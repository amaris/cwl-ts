{
    "class": "Workflow",
    "cwlVersion": "sbg:draft-2",
    "id": "admin/sbg-public-data/whole-genome-sequencing-bwa-gatk-4-0/10",
    "label": "Whole Genome Sequencing - BWA + GATK 4.0 (with Metrics)",
    "description": "The Whole Genome Sequencing (WGS) pipeline enables identification of variants from a human whole-genome resequencing experiment using the [Broad Institute's](https://software.broadinstitute.org/gatk/best-practices/) best-practices workflow for alignment and variant calling.\n\n*Disclaimer -- This workflow uses the [beta-2](https://github.com/broadinstitute/gatk) version of the GATK v4.0 suite, please carefully review the release notes before considering for general production use.*\n\nThe pipeline is designed for optimal performance on data from experiments that utilize a PCR-free library preparation protocol and targets 30x mean coverage across the genome, but is suitable a range of coverages (verified up to 150x). Although WGS generally has lower coverage than Whole Exome Sequencing (WES), this method can detect variants outside of protein-coding areas and can detect changes affecting regulatory regions and various controlling mechanisms. This characteristic allows for wider application of the pipeline, especially in cases when novel variants are expected. For example, WGS can be used when the phenotype or family history strongly implicates genetic etiology but the phenotype does not correspondent to any specific disorder for which a testing targeting a specific gene is clinically available.\n\n## Pipeline structure\n\nThe pipeline is constructed following the Broad Institute best practice and utilizing Broad Institute's GATK tools. A separate step is undertaken to assess the quality of sequenced reads using Babraham Institute's tool FastQC. \nSequenced reads are aligned with the BWA tool after which duplicates are removed. The next step uses algorithms developed by the Broad Institute to improve alignment around indels followed by the re-evaluation of the qualities of sequenced bases. Generated BAM files are pooled together and variant calling is performed. Detected variants are subjected to additional analysis resulting in refined, high-quality set of identified variants (for more information on how variant calling is performed, please refer to the [Broad Institute's web site](https://software.broadinstitute.org/gatk/best-practices/)).\n\nIn order to obtain optimal usage of the computational instanceâ€™s resources analysis is divided into the number of jobs that correspond to the number of *chromosomal* regions in the input BED file plus one job for much smaller, mitochondrial and global contigs. Splitting of BED file (Target BED) into several smaller BED files is performed by SBG PrepareIntervals tool. GATK BaseRecalibrator collects all the BAM files and uses only those covered with the BQSR intervals string input for creating the model for base quality score recalibration (BQSR). If the BQSR intervals string is not set, GATK BaseRecalibrator would work for more than 20 hours on a whole genome sample. For that reason, this input is set to *required* with the **default value of 20** meaning only chromosome number 20 will be used for creating the model for BQSR. GATK ApplyBQSR applies quality mapping table received from GATK BaseRecalibrator to the BAMs received from BWA-MEM. It also works in scatter mode set on intervals input (one job per BED file) received from SBG PrepareIntervals tool. GATK HaplotypeCaller is scattered by BAM file received from GATK ApplyBQSR. It performs variant calling on each of the BAMs and outputs raw genotype variant calling files (GVCF). Each of them is passed to GATK GenotypeGVCFs which converts it VCF. All GVCFs and VCFs from intervals are merged. The final step of the workflow is VCF recalibration of variants. Parameters for variant recalibration are done according to Broad [recommendations](https://software.broadinstitute.org/gatk/documentation/tooldocs/current/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php). \n\n## Required inputs\n\n- Reference or TAR with BWA reference indices\n- Target BED file - Chromosomal intervals of this BED are used for parallelization (scattering)\n- DBSNP database - Database with known variants from the population used with base quality score recalibration, variant calling and variant quality score recalibration\n- Omni 1000g database use for variant quality score recalibration. ([VCF](https://samtools.github.io/hts-specs/VCFv4.1.pdf))\n- Hapmap database use for variant quality score recalibration. (VCF)\n- 1000G phase1 SNPs database for variant quality score recalibration (VCF)\n- Mills INDEL database - Database of known indels in the population used with variant recalibration (VCF)\n- Known indels 1000g fused with BQSR\n- FASTQ reads Illumina paired-end reads from the sequencer.\n- Interval used for Base Quality Score Recalibration model creation (recommended value is 20 or chr20)\n- Threads for BWA MEM (default value is 36, which is equal to the number of CPUs on the c4.8xlarge instance)\n- Threads for Sambamba sort (default value is 36, which is equal to the number of CPUs on the c4.8xlarge instance)\n- Memory per job for HaplotypeCaller (default value is 2200 MB)\n\n## Outputs\n\n- Genome coverage metrics\n- Alignment metrics\n- Genotype variant calling format file ([GVCF](https://gatkforums.broadinstitute.org/gatk/discussion/4017/what-is-a-gvcf-and-how-is-it-different-from-a-regular-vcf))\n- Aligned Reads from BWA-MEM ([BAM](https://samtools.github.io/hts-specs/SAMv1.pdf))\n- Variant recalibrated file (VCF)\n- Raw variant calling format file (VCF)\n- FastQC Report\n\n## Expected pipeline performance\n\nBelow we present three benchmarks show-casing the expected variant detection and run-time performance of the WGS pipeline. \n\nWe use the  [Genome in a bottle](ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release) truth dataset and the [hap.py](https://github.com/Illumina/hap.py) variant evaluation tool to determine the sensitivity and precision of the pipeline for both SNPs and Indels following the GA4GH recommended practices. We note that the observed precision and sensitivity measures are in line with expected performance for this sample. Further, we observe that both the transition to transversion ratio for SNPs as well as the ratio of heterozygous to homozygous indels calls are in the expected ranges for a whole-genome context. Only the calls that have PASS flag in the VCF filter column were used for calculating the reported performance metrics, reflecting the performance that can be expected when the pipeline is used in a production scenario.\n\n\n| Sample  | SNP precision | SNP sensitivity  | INDEL precision | INDEL sensitivity | SNP ti/tv-ratio | INDEL het/hom-ratio |\n| ------- | ------------- | ---------------- | --------------- |------------------ | -------- | ---------|\n| HG001   | 99.8 %        | 99.2%            | 87.3%           | 91.5%             | 2.11    | 1.8   |\n\nSecond, we use the CEPH and Ashkenazi trios from the Genome In A Bottle project to measure pipeline genotyping consistency. This is done by counting the total proportion of fully determined variant loci where the detected trio genotypes for father, mother, and child agree with the expected mendelian inheritance pattern. For the two trios we observe SNP error rates of < 1% and indel error rates of 6.38% and 3.85%, respectively.\n\n\n| Pedigree  | Total SNP calls | Total INDEL calls  | SNP error rate | INDEL error rate |\n| --------- | --------------- | ------------------ | -------------- |----------------- |\n| [CEPH](http://www.cephb.fr/en/familles_CEPH.php)      | 4836659         | 933789             | 0.82%          | 6.38%            |\n| [Ashkenazi](https://github.com/genome-in-a-bottle/giab_data_indexes/tree/master/AshkenazimTrio) | 4908585         | 1056532            | 0.62%          | 3.85%            |\n\nFinally, we measured the end-to-end run-time of the workflow. The average run-time for analyzing 10 whole-genome sequencing experiments on default AWS hardware is around 10.5 hours for a 30x PCR-free sample. \n\n## Important issues\n\n- In order to complete the execution of the workflow the following fields in the metadata of FASTQ files must be set: **Paired-end, Sample ID and Platform**.\n- All reference files must correspond to the same reference genome (HG19, GRCh 37, HG38,...). If some of the reference files has contigs not listed in reference genome the pipeline cannot be executed.\n- If BQSR intervals string is not set GATK BaseRecalibrator would work for more than 20 hours on Whole genome sample. For that reason, this input is set to \"required\" with the **default value of 20** meaning only chromosome number 20 will be used for creating the model for BQSR.\n- BWA-MEM index files are packed together with the reference genome in the TAR files which are available on SBG Public files. With that indexing step in the pipeline can be skipped and its total execution will be faster.\n- If HG38 is used, it is recommended to lower the number of BWA MEM and Sambamba sort threads. For input files with ~30x coverage the recommended value for both parameters is 15, while for input files with ~50x coverage the recommended value for both parameters is 10.\n- If HG38 is used, it is recommended to increase the memory per job for HaplotypeCaller from 2048 MB to at least 4096 MB depending on the type of sample and coverage.\n- For concatenating GVCF files custom SBG Concat GVCFs tool is used since GATK 4.0 toolkit does not have a tool for that purpose.",
    "inputs": [
        {
            "type": [
                "string"
            ],
            "label": "BQSR intervals optimal value is 20 or chr20",
            "description": "BQSR intervals optimal value is 20 or chr20",
            "id": "#bqsr_interval",
            "sbg:y": 489.04783037163753,
            "sbg:x": 699.2858554238414,
            "sbg:includeInPorts": true
        },
        {
            "type": [
                "File"
            ],
            "label": "Target BED",
            "description": "Chromosomal intervals of this BED are used for parallelization (scattering)",
            "sbg:fileTypes": "BED",
            "id": "#intervals_file",
            "sbg:includeInPorts": true,
            "sbg:x": 695.5725971025585,
            "sbg:y": 1188.4774212099737,
            "sbg:suggestedValue": {
                "name": "human_g1k_v37_decoy_breakpoints_86_intervals.bed",
                "path": "5978b7df507c1745908269bf",
                "class": "File"
            }
        },
        {
            "type": [
                "File"
            ],
            "label": "dbsnp",
            "description": "Database with known variants from the population used with base quality score recalibration and annotation in variant calling",
            "sbg:fileTypes": "VCF, BED, RECAL",
            "id": "#dbsnp",
            "sbg:includeInPorts": true,
            "sbg:x": 700.9534852366695,
            "sbg:y": 981.1910669299391,
            "sbg:suggestedValue": {
                "name": "dbsnp_137.b37.vcf",
                "path": "5772b6cd507c1752674486d8",
                "class": "File"
            }
        },
        {
            "type": [
                "File"
            ],
            "label": "Mills",
            "description": "Database of know =n indels in population used with variant recalibration.",
            "sbg:fileTypes": "VCF, BED, RECAL",
            "id": "#mills",
            "sbg:includeInPorts": true,
            "sbg:x": 698.7731975359328,
            "sbg:y": 818.333581897957,
            "sbg:suggestedValue": {
                "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
                "path": "5772b6c9507c1752674486d4",
                "class": "File"
            }
        },
        {
            "type": [
                {
                    "type": "array",
                    "items": "File"
                }
            ],
            "label": "Fastq",
            "description": "Illumina paired-end reads from the sequencer.",
            "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
            "id": "#fastq",
            "sbg:x": 61.23813509815136,
            "sbg:y": 249.28001859792116,
            "sbg:includeInPorts": true
        },
        {
            "type": [
                "null",
                "File"
            ],
            "label": "1000G phase1 SNP",
            "description": "1000G phase1 SNPs database for variant quality score recalibration (VCF)",
            "sbg:fileTypes": "VCF, BED, RECAL",
            "id": "#phase1_snp_1000g",
            "sbg:includeInPorts": true,
            "sbg:x": 2295.0011490054035,
            "sbg:y": -233.71819471193112,
            "sbg:suggestedValue": {
                "name": "1000G_phase1.snps.high_confidence.b37.vcf",
                "path": "578cf947507c17681a3117d0",
                "class": "File"
            }
        },
        {
            "type": [
                "null",
                "File"
            ],
            "label": "HapMap",
            "description": "Hapmap database use for variant quality score recalibration.",
            "sbg:fileTypes": "VCF, BED, RECAL",
            "id": "#hapmap",
            "sbg:includeInPorts": true,
            "sbg:x": 2290.2566013570577,
            "sbg:y": -416.7949388343067,
            "sbg:suggestedValue": {
                "name": "hapmap_3.3.b37.vcf",
                "path": "5772b6d3507c1752674486df",
                "class": "File"
            }
        },
        {
            "type": [
                "null",
                "File"
            ],
            "label": "1000G Omni",
            "description": "Omni database use for variant quality score recalibration.",
            "sbg:fileTypes": "VCF, BED, RECAL",
            "id": "#omni_1000g",
            "sbg:includeInPorts": true,
            "sbg:x": 2283.97470033068,
            "sbg:y": -607.3077822118773,
            "sbg:suggestedValue": {
                "name": "1000G_omni2.5.b37.vcf",
                "path": "578cf946507c17681a3117cb",
                "class": "File"
            }
        },
        {
            "type": [
                "File"
            ],
            "label": "Reference or TAR with BWA reference indices",
            "description": "Reference or TAR with BWA reference indices",
            "sbg:fileTypes": "FASTA, FA, FA.GZ, FASTA.GZ, TAR",
            "id": "#reference",
            "sbg:includeInPorts": true,
            "sbg:x": 195.0000333123748,
            "sbg:y": 49.994323438842635,
            "sbg:suggestedValue": {
                "name": "human_g1k_v37_decoy.fasta.tar",
                "path": "5772b6d9507c1752674486e7",
                "class": "File"
            }
        },
        {
            "type": [
                "File"
            ],
            "label": "Known indels 1000g bqsr",
            "description": "Known indels for BQSR",
            "sbg:fileTypes": "VCF",
            "id": "#known_indels_1000g_bqsr",
            "sbg:includeInPorts": true,
            "sbg:x": 698.3334630065539,
            "sbg:y": 645.0002697706324,
            "sbg:suggestedValue": {
                "name": "1000G_phase1.indels.b37.vcf",
                "path": "578cf947507c17681a3117ce",
                "class": "File"
            }
        },
        {
            "type": [
                "null",
                "int"
            ],
            "label": "Threads",
            "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
            "id": "#threads",
            "sbg:toolDefaultValue": "8",
            "sbg:category": "Execution",
            "required": false,
            "sbg:suggestedValue": 36
        },
        {
            "type": [
                "null",
                "int"
            ],
            "label": "Sambamba Sort threads",
            "description": "Number of threads to pass to Sambamba sort, if used.",
            "id": "#sambamba_threads",
            "sbg:category": "Execution",
            "required": false,
            "sbg:suggestedValue": 36
        },
        {
            "type": [
                "null",
                "int"
            ],
            "label": "HaplotypeCaller Memory Per Job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs.",
            "id": "#memory_per_job",
            "sbg:toolDefaultValue": "2048",
            "sbg:category": "Execution",
            "sbg:suggestedValue": 2048
        }
    ],
    "outputs": [
        {
            "id": "#Genome_coverage",
            "label": "Genome coverage",
            "source": [
                "#SBG_Genome_Coverage.summary"
            ],
            "type": [
                "null",
                "File"
            ],
            "required": false,
            "sbg:y": -610.9526609958269,
            "sbg:includeInPorts": true,
            "sbg:x": 2003.8105850806714
        },
        {
            "id": "#alignment_summary_metrics",
            "label": "Alignment Summary Metrics",
            "source": [
                "#GATK_CollectAlignmentSummaryMetrics.summary_metrics"
            ],
            "type": [
                "File"
            ],
            "sbg:fileTypes": "TXT",
            "required": true,
            "sbg:y": -441.4345644620216,
            "sbg:includeInPorts": true,
            "sbg:x": 2005.7154184864107
        },
        {
            "id": "#gvcf",
            "label": "GVCF",
            "source": [
                "#Tabix_Index.indexed_file"
            ],
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
            "required": false,
            "sbg:y": 779.9769799170347,
            "sbg:includeInPorts": true,
            "sbg:x": 2663.333927710872
        },
        {
            "id": "#aligned_reads",
            "label": "Aligned Reads",
            "source": [
                "#BWA_MEM_Bundle.aligned_reads"
            ],
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "SAM, BAM",
            "required": false,
            "sbg:y": -281.6667085091287,
            "sbg:includeInPorts": true,
            "sbg:x": 2008.333535273876
        },
        {
            "id": "#recalibrated_vcf",
            "label": "Recalibrated VCF",
            "source": [
                "#INDEL_GATK_ApplyVQSR.recalibrated_vcf"
            ],
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "required": true,
            "sbg:y": 305.0000527434897,
            "sbg:includeInPorts": true,
            "sbg:x": 3796.667224499933
        },
        {
            "id": "#raw_vcf",
            "label": "Raw VCF",
            "source": [
                "#Tabix_Index_1.indexed_file"
            ],
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
            "required": false,
            "sbg:y": 601.6668125788423,
            "sbg:includeInPorts": true,
            "sbg:x": 3178.333947579087
        },
        {
            "id": "#fastqc_report",
            "label": "FastQC Report",
            "source": [
                "#SBG_Html2b64.b64html"
            ],
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "HTML, B64HTML",
            "required": false,
            "sbg:y": 318.33339677916854,
            "sbg:includeInPorts": true,
            "sbg:x": 835.0001554489189
        }
    ],
    "steps": [
        {
            "id": "#BWA_INDEX",
            "inputs": [
                {
                    "id": "#BWA_INDEX.reference",
                    "source": [
                        "#reference"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#BWA_INDEX.indexed_reference"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/bwa-index/16",
                "label": "BWA INDEX",
                "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Total memory [Gb]",
                        "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
                        "id": "#total_memory"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File input",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "label": "Reference",
                        "description": "Input reference fasta of TAR file with reference and indices.",
                        "sbg:fileTypes": "FASTA, FA, FA.GZ, FASTA.GZ, TAR",
                        "id": "#reference"
                    },
                    {
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Prefix of the index to be output",
                        "description": "Prefix of the index [same as fasta name].",
                        "id": "#prefix_of_the_index_to_be_output"
                    },
                    {
                        "sbg:toolDefaultValue": "auto",
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "bwtsw",
                                    "is",
                                    "div"
                                ],
                                "name": "bwt_construction"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-a",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Bwt construction",
                        "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
                        "id": "#bwt_construction"
                    },
                    {
                        "sbg:toolDefaultValue": "10000000",
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Block size",
                        "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
                        "id": "#block_size"
                    },
                    {
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Output index files renamed by adding 64",
                        "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
                        "id": "#add_64_to_fasta_name"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "TARed fasta with its BWA indices",
                        "description": "TARed fasta with its BWA indices.",
                        "sbg:fileTypes": "TAR",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "reference": {
                                    "engine": "#cwl-js-engine",
                                    "script": "{\n  path = [].concat($job.inputs.reference)[0].path.split('/')\n  last = path.pop()\n  return last\n}",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#reference"
                        },
                        "id": "#indexed_reference"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "2f813371e803",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "total_memory": null,
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ],
                            "path": "/path/to/the/reference.fasta",
                            "class": "File",
                            "size": 0
                        },
                        "prefix_of_the_index_to_be_output": "prefix",
                        "bwt_construction": "bwtsw",
                        "block_size": 0,
                        "add_64_to_fasta_name": true
                    },
                    "allocatedResources": {
                        "mem": 1536,
                        "cpu": 1
                    }
                },
                "sbg:license": "GNU Affero General Public License v3.0, MIT License",
                "sbg:links": [
                    {
                        "id": "http://bio-bwa.sourceforge.net/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/lh3/bwa",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/bio-bwa/",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
                        "label": "Publication"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "appUrl": "/u/vladimirk/bwa-mem-bundle-0-7-13-demo/apps/#vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-index/16",
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1491817691,
                "sbg:modifiedBy": "vladimirk",
                "sbg:revision": 16,
                "sbg:revisionNotes": "Added reference name to metadata",
                "sbg:categories": [
                    "Indexing",
                    "FASTA-Processing"
                ],
                "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "y": 49.79170424905232,
                "sbg:toolkitVersion": "0.7.13",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Heng Li",
                "sbg:validationErrors": [],
                "sbg:latestRevision": 16,
                "x": 651.6670583089342,
                "sbg:createdOn": 1458658817,
                "sbg:createdBy": "vladimirk",
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:projectName": "BWA MEM Bundle 0.7.13 - Demo",
                "sbg:toolkit": "BWA",
                "sbg:id": "admin/sbg-public-data/bwa-index/16",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458658817
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458658836
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458745340
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460643813
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462801955
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465227109
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465231882
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465990497
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465992672
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465993183
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465994793
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466070064
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466071727
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 13,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466072504
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 14,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466077580
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 15,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469449858
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 16,
                        "sbg:revisionNotes": "Added reference name to metadata",
                        "sbg:modifiedOn": 1491817691
                    }
                ]
            },
            "label": "BWA INDEX",
            "sbg:x": 651.6670583089342,
            "sbg:y": 49.79170424905232
        },
        {
            "id": "#SBG_Genome_Coverage",
            "inputs": [
                {
                    "id": "#SBG_Genome_Coverage.fasta",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#SBG_Genome_Coverage.bam",
                    "source": [
                        "#Sambamba_Merge.merged_bam"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Genome_Coverage.summary"
                },
                {
                    "id": "#SBG_Genome_Coverage.per_interval"
                },
                {
                    "id": "#SBG_Genome_Coverage.bed_graph"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-genome-coverage/5",
                "label": "SBG Genome Coverage",
                "description": "SBG Genome Coverage extends BEDTools Genome Coverage. The Genome Coverage calculates histograms, per-base reports and BedGraph summaries of feature coverage (aligned sequences for example) for a given genome. This extended version additionally extracts and creates a text file containing summary coverage stats.\n\nNote: This tool should be used for genome data only.",
                "baseCommand": [
                    "python3.6",
                    "sbg_genome_coverage.py"
                ],
                "inputs": [
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--trackopt",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Additional track",
                        "description": "Writes additional track line definition parameters in the first line.",
                        "id": "#trackopt"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--trackline",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "UCSC track line",
                        "description": "Adds a UCSC/Genome-Browser track line definition in the first line of the output.",
                        "id": "#trackline"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Not Specified",
                                    "Forward+",
                                    "Reverse-"
                                ],
                                "name": "strand"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--strand",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.strand == 'Not Specified') return 0\n  if ($job.inputs.strand == 'Forward+') return 1\n  if ($job.inputs.strand == 'Reverse-') return 2\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Strand",
                        "description": "Calculate coverage of intervals from a specific strand.",
                        "id": "#strand"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--split",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Split",
                        "description": "Treat BAM entries as distinct BED intervals when computing coverage. Uses CIGAR 'N' and 'D' operations to infer the blocks for computing coverage.",
                        "id": "#split"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--scale",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Scale",
                        "description": "Scale the coverage by a constant factor. Requires BedGraph or Dept Per Base output.",
                        "id": "#scale"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--report_z",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Report Z",
                        "description": "If BedGraph or Depth Per Base output is selected, also report zero-depth positions.",
                        "id": "#report_z"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--gzipped",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "GZipped",
                        "description": "Compress output with gzip.",
                        "id": "#gzipped"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Bed-Histogram",
                                    "Bed-DepthPerBase",
                                    "BedGraph"
                                ],
                                "name": "format"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--format",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.format == 'Bed-Histogram') return 0\n  if ($job.inputs.format == 'Bed-DepthPerBase') return 1\n  if ($job.inputs.format == 'BedGraph') return 2\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Format",
                        "description": "Output format.",
                        "id": "#format"
                    },
                    {
                        "sbg:category": "INPUT FILES",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-f",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Fasta",
                        "description": "Reference file.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#fasta"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Entire Interval",
                                    "3' Positions Only",
                                    "5' Positions Only"
                                ],
                                "name": "coverage_interval"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--coverage_interval",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.coverage_interval == 'Entire Interval') return 0\n  if ($job.inputs.coverage_interval == \"3' Positions Only\") return 3\n  if ($job.inputs.coverage_interval == \"5' Positions Only\") return 5\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Coverage interval",
                        "description": "Coverage calculation.",
                        "id": "#coverage_interval"
                    },
                    {
                        "sbg:category": "INPUT FILES",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-b",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  return [].concat($job.inputs.bam)[0].path\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Bam",
                        "description": "Input BAM file for coverage calculation.",
                        "sbg:fileTypes": "BAM",
                        "id": "#bam"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Summary",
                        "description": "Summary file.",
                        "outputBinding": {
                            "glob": "*.summary",
                            "sbg:metadata": {
                                "file_format": "TEXT"
                            },
                            "sbg:inheritMetadataFrom": "#bam"
                        },
                        "id": "#summary"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Per interval",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "if ($job.inputs.gzipped)\n\t'*.per_interval.bed.gz'\nelse\n\t'*.per_interval.bed'",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "file_format": "BED"
                            },
                            "sbg:inheritMetadataFrom": "#bam"
                        },
                        "id": "#per_interval"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Bed graph",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "if ($job.inputs.gzipped)\n\t'*.bedgraph.gz'\nelse\n\t'*.bedgraph'",
                                "class": "Expression"
                            }
                        },
                        "id": "#bed_graph"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    },
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "filename": "sbg_genome_coverage.py",
                                "fileContent": "\"\"\"\nUsage:\n    sbg_genome_coverage.py --bam FILE --fasta FILE [options]\n\nOptions:\n    -h, --help                      Show this message.\n\n    -b, --bam FILE                  Input BAM file for coverage calculation.\n\n    -f, --fasta FILE                Reference file.\n\n    --format ENUM                   Output format. Available options: {0, 1, 2}\n                                    0: Bed-Histogram\n                                    1: Bed-DepthPerBase\n                                    2: BedGraph\n                                    [default: 0]\n\n    --report_z                      If BedGraph or Depth Per Base output is\n                                    selected, also report zero-depth positions.\n\n    --gzipped                       Compress output with gzip.\n\n    --split                         Treat BAM entries as distinct BED intervals\n                                    when computing coverage. Uses CIGAR 'N' and\n                                    'D' operations to infer the blocks for\n                                    computing coverage.\n\n    --strand ENUM                   Calculate coverage of intervals from a\n                                    specific strand.\n                                    Available options: {0, 1, 2}\n                                    0: Not Specified\n                                    1: Forward+\n                                    2: Reverse-\n                                    [default: 0]\n\n    --coverage_interval ENUM        Coverage calculation.\n                                    Available options:  \n                                    0: Entire Interval\n                                    3: 3' Positions Only\n                                    5: 5' Positions Only\n                                    [default: 0]\n\n    --scale FLOAT                   Scale the coverage by a constant factor.\n                                    Requires BedGraph or Dept Per Base output.\n                                    [default: 1.0]\n\n    --trackopt STR                  Writes additional track line definition\n                                    parameters in the first line.\n\n    --trackline                     Adds a UCSC/Genome-Browser track line\n                                    definition in the first line of the output.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport pipes\nfrom pathlib import Path\nimport subprocess\nfrom enum import IntEnum\nfrom Compressor import PigzCompressor\n\nargs = docopt(__doc__, version='1.0')\n\nargs['--format'] = int(args['--format'])\nargs['--strand'] = int(args['--strand'])\nargs['--coverage_interval'] = int(args['--coverage_interval'])\nargs['--scale'] = float(args['--scale'])\n\n# BEDTOOLS_ROOT = ''\n\nBEDTOOLS_ROOT = '/opt/bedtools2/bin/'\n\nclass BEDTOOLS_FORMAT(IntEnum):\n    BedHistogram = 0\n    BedDepthPerBase = 1\n    BedGraph = 2\n\nclass BEDTOOLS_STRAND(IntEnum):\n    NotSpecified = 0\n    Forward = 1\n    Reverse = 2\n\nclass BEDTOOLS_COVERAGE_INTERVAL:\n    EntireInterval = 0\n    ThreePrimPositionsOnly = 3\n    FivePrimPositionsOnly = 5\n\ndef append_arg(arg_list, *args):\n    for arg in args:\n        if arg not in (None, ''):\n            arg_list.append(pipes.quote(arg))\n\ndef append_narg(arg_list, key, value):\n    if value in (None, '') or value is False:\n        return\n    if isinstance(value, bool):\n        append_arg(arg_list, key)\n    else:\n        append_arg(arg_list, key, str(value))\n\ndef get_output_file_name(bam, params):\n    just_name = lambda file_name: Path(file_name).name\n\n    if params['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase:\n        return just_name(bam) + '.per_interval.bed'\n    elif params['--format'] == BEDTOOLS_FORMAT.BedHistogram:\n        return just_name(bam) + '.bed'\n    elif params['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        return just_name(bam) + '.bedgraph'\n    else:\n        raise Exception('Unsupported --format value.')\n\ndef get_bedtools_cmd(bam, genome, parameters) -> list:\n    cmd_bedtools = [os.path.join(BEDTOOLS_ROOT, 'genomeCoverageBed'), '-ibam', bam, '-g', genome]\n\n    if parameters['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase:\n        if parameters['--report_z'] is True:\n            append_arg(cmd_bedtools, '-d')\n        else:\n            append_arg(cmd_bedtools, '-dz')\n    elif parameters['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        if parameters['--report_z'] is True:\n            append_arg(cmd_bedtools, '-bga')\n        else:\n            append_arg(cmd_bedtools, '-bg')\n\n    append_narg(cmd_bedtools, '-split', parameters['--split'])\n\n    if parameters['--coverage_interval'] == BEDTOOLS_COVERAGE_INTERVAL.FivePrimPositionsOnly:\n        append_arg(cmd_bedtools, '-5')\n    elif parameters['--coverage_interval'] == BEDTOOLS_COVERAGE_INTERVAL.ThreePrimPositionsOnly:\n        append_arg(cmd_bedtools, '-3')\n\n    if parameters['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase or parameters['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        append_narg(cmd_bedtools, '-scale', parameters['--scale'])\n\n    if parameters['--strand'] == BEDTOOLS_STRAND.Forward:\n        append_narg(cmd_bedtools, '-strand', '+')\n    elif parameters['--strand'] == BEDTOOLS_STRAND.Reverse:\n        append_narg(cmd_bedtools, '-strand', '-')\n\n    if parameters['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        append_narg(cmd_bedtools, '-trackopts', parameters['--trackopt'])\n        append_narg(cmd_bedtools, '-trackline', parameters['--trackline'])\n\n    return cmd_bedtools\n\ndef handle_bed_histogram(bam, genome, parameters, gzip, ziper):\n    output_file = get_output_file_name(bam, parameters)\n    cmd_bedtools = get_bedtools_cmd(bam, genome, parameters)\n    cmd_summary = ['grep', '^genome']\n    cmd_intervals = ['grep', '-v', '^genome']\n    cmd_pigz = ['pigz', '--force', '--keep']\n\n    summary = open(Path(output_file).name + '.summary', 'wb')\n    per_interval_path = Path(output_file).name + '.per_interval.bed.gz' if gzip \\\n                        else Path(output_file).name + '.per_interval.bed'\n\n    per_interval = open(per_interval_path, 'wb')\n\n    bed_proc = subprocess.Popen(cmd_bedtools, stdout=subprocess.PIPE)\n    sum_proc = subprocess.Popen(cmd_summary,  stdin=subprocess.PIPE, stdout=summary)\n    inter_proc = subprocess.Popen(cmd_intervals, stdin=subprocess.PIPE, stdout=subprocess.PIPE if gzip else per_interval)\n    pigz_proc = None\n\n    if gzip:\n        pigz_proc = subprocess.Popen(cmd_pigz, stdin=inter_proc.stdout, stdout=per_interval)\n\n    try:\n        while True:\n            data = bed_proc.stdout.readline()\n            if not data:\n                sum_proc.stdin.close()\n                inter_proc.stdin.close()\n                break\n            sum_proc.stdin.write(data)\n            inter_proc.stdin.write(data)\n\n        bed_proc.wait()\n        inter_proc.wait()\n        sum_proc.wait()\n\n        if gzip and pigz_proc:\n            pigz_proc.wait()\n\n    except Exception as e:\n        print (str(e))\n        bed_proc.kill()\n        sum_proc.kill()\n        inter_proc.kill()\n    finally:\n        summary.close()\n        per_interval.close()\n\ndef handle_graph_or_depth(bam, genome, parameters, gzip, ziper):\n    output_file = get_output_file_name(bam, parameters)\n    cmd_bedtools = get_bedtools_cmd(bam, genome, parameters)\n\n    stdout = subprocess.PIPE if gzip else open(output_file, 'w')\n    process = subprocess.Popen(cmd_bedtools, stdout=stdout)\n    if gzip:\n        with open(output_file + '.gz', 'wb') as out:\n            ziper.compress(stdin=process.stdout, stdout=out, params={'threads': 2})\n    process.wait()\n\ndef main():\n    ziper = PigzCompressor()\n    if args['--format'] == BEDTOOLS_FORMAT.BedHistogram:\n        handle_bed_histogram(args['--bam'], args['--fasta'], args, args['--gzipped'], ziper)\n    elif args['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase:\n        handle_graph_or_depth(args['--bam'], args['--fasta'], args, args['--gzipped'], ziper)\n    elif args['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        handle_graph_or_depth(args['--bam'], args['--fasta'], args, args['--gzipped'], ziper)\nif __name__ == '__main__':\n    main()"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 4096
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/filip_tubic/sbg_genome_coverage:2.0"
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "trackopt": "trackopt",
                        "trackline": true,
                        "strand": "Forward+",
                        "split": true,
                        "scale": 0,
                        "report_z": true,
                        "gzipped": true,
                        "format": "BedGraph",
                        "fasta": {
                            "secondaryFiles": [],
                            "path": "fasta.ext",
                            "class": "File",
                            "size": 0
                        },
                        "coverage_interval": "Entire Interval",
                        "bam": {
                            "secondaryFiles": [],
                            "path": "bam.ext",
                            "class": "File",
                            "size": 0
                        }
                    },
                    "allocatedResources": {
                        "mem": 4096,
                        "cpu": 1
                    }
                },
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911308
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911308
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "BEDTools newer version",
                        "sbg:modifiedOn": 1476214514
                    },
                    {
                        "sbg:modifiedBy": "filip_tubic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1493296999
                    },
                    {
                        "sbg:modifiedBy": "milan_kovacevic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Note in the description added",
                        "sbg:modifiedOn": 1496740110
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "added concat guard",
                        "sbg:modifiedOn": 1496853224
                    }
                ],
                "sbg:modifiedBy": "vladimirk",
                "sbg:cmdPreview": "python3.6 sbg_genome_coverage.py -b bam.ext -f fasta.ext",
                "sbg:revision": 5,
                "sbg:revisionNotes": "added concat guard",
                "sbg:categories": [
                    "Analysis"
                ],
                "y": -651.7597671115363,
                "sbg:toolkit": "SBGTools",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:latestRevision": 5,
                "x": 1735.619705611761,
                "sbg:createdOn": 1450911308,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "filip_tubic",
                    "bogdang",
                    "milan_kovacevic",
                    "bix-demo",
                    "vladimirk"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:modifiedOn": 1496853224,
                "sbg:id": "admin/sbg-public-data/sbg-genome-coverage/5",
                "sbg:project": "bix-demo/sbgtools-demo"
            },
            "label": "SBG Genome Coverage",
            "sbg:x": 1735.619705611761,
            "sbg:y": -651.7597671115363
        },
        {
            "id": "#Tabix_Index",
            "inputs": [
                {
                    "id": "#Tabix_Index.type_format",
                    "default": "vcf.gz"
                },
                {
                    "id": "#Tabix_Index.input_file",
                    "source": [
                        "#Tabix_BGZIP.output_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#Tabix_Index.indexed_file"
                },
                {
                    "id": "#Tabix_Index.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/tabix-index-v0-2-6/11",
                "label": "Tabix Index",
                "description": "Tabix indexes a TAB-delimited genome position file in.tab.bgz and creates an index file in.tab.bgz.tbi when region is absent from the command-line. The input data file must be position sorted and compressed by bgzip which has a gzip(1) like interface. After indexing, tabix is able to quickly retrieve data lines overlapping regions specified in the format \"chr:beginPos-endPos\". Fast data retrieval also works over network if URI is given as a file name and in this case the index file will be downloaded if it is not present locally.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if ($job.inputs.index_file==undefined)\n    return \"/opt/tabix-0.2.6/tabix \"\n  else\n    return \"echo \\\"Passing inputs to outputs.\\\" \"\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 7,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.zero_based==true)\n    return \" -0 \"\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Specify if the position in the data file is 0 based",
                        "description": "Specify if the position in the data file is 0 based.",
                        "id": "#zero_based"
                    },
                    {
                        "sbg:toolDefaultValue": "gff.gz",
                        "sbg:category": "File inputs",
                        "type": [
                            {
                                "type": "enum",
                                "symbols": [
                                    "gff.gz",
                                    "bed.gz",
                                    "sam.gz",
                                    "vcf.gz",
                                    "psltab.gz"
                                ],
                                "name": "type_format"
                            }
                        ],
                        "inputBinding": {
                            "position": 1,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.type_format!=undefined && $job.inputs.type_format!='')\n  {\n    return ' -p ' + $job.inputs.type_format.substring(0, $job.inputs.type_format.length-3)\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Select input file format",
                        "description": "Select input file format.",
                        "id": "#type_format"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 5,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.skip_lines!=undefined)\n    return \" -S \" + $job.inputs.skip_lines\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip first N lines",
                        "description": "Skip first N lines in the data file.",
                        "id": "#skip_lines"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 2,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.sequence_name_col!=undefined)\n    return \" -s \" + $job.inputs.sequence_name_col\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Column of the sequence name",
                        "description": "Column of the sequence name.",
                        "id": "#sequence_name_col"
                    },
                    {
                        "sbg:category": "File inputs",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 8,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.region_bed==true)\n    return \" -B \"\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Region1 is a BED file",
                        "description": "Region1 is a BED file (entire file will be read).",
                        "id": "#region_bed"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Reserve N MB of RAM",
                        "description": "Reserve N MB of RAM for tool execution.",
                        "id": "#mem_mb"
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 9,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.list_chrs==true)\n    return \" -l \"\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "List chromosome names",
                        "description": "List chromosome names.",
                        "id": "#list_chrs"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File inputs",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 99,
                            "separate": false,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined)\n  \treturn $job.inputs.input_file.path.split('/').slice(-1)[0]\n}\n",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input file",
                        "description": "Input file for tabix indexing.",
                        "sbg:fileTypes": "GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                        "id": "#input_file"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File inputs",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file.",
                        "sbg:fileTypes": "TBI, CSI",
                        "id": "#index_file"
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 4,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.end_chr!=undefined)\n    return \" -e \" + $job.inputs.end_chr\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "End position of the chromosome column",
                        "description": "End position of the chromosome column. Can be identical to start chromosome column.",
                        "id": "#end_chr"
                    },
                    {
                        "sbg:category": "Output files",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Don't output data file",
                        "description": "Don't output data file (only index file will be outputed).",
                        "id": "#dont_output_data_file"
                    },
                    {
                        "sbg:toolDefaultValue": "#",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 6,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.comment_lines!=undefined)\n    return \" -c \" + $job.inputs.comment_lines\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip lines starting with character CHAR",
                        "description": "Skip lines starting with character CHAR.",
                        "id": "#comment_lines"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 3,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.chr_start!=undefined)\n    return \" -b \" + $job.inputs.chr_start\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Start position of the chromosome column",
                        "description": "Start position of the chromosome column.",
                        "id": "#chr_start"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tabix indexed file",
                        "description": "Tabix indexed file.",
                        "sbg:fileTypes": "GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.dont_output_data_file==true)\n    return ''\n  return $job.inputs.input_file.path.split('/').slice(-1)[0]\n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "__inherit__": "input_file"
                            },
                            "sbg:inheritMetadataFrom": "#input_file",
                            "secondaryFiles": [
                                ".tbi"
                            ]
                        },
                        "id": "#indexed_file"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tabix index",
                        "description": "Tabix index file.",
                        "sbg:fileTypes": "VCF.TBI",
                        "outputBinding": {
                            "glob": "*.tbi",
                            "sbg:inheritMetadataFrom": "#input_file"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "engineCommand": "cwl-engine.js",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.mem_mb)\n  {\n    return $job.inputs.mem_mb\n  }\n  else\n  {\n    return 2048\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "78fc60e5f28a",
                        "dockerPull": "images.sbgenomics.com/nevenam/tabix:0.2.6"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.index_file==undefined)\n    return \" -f \"\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "zero_based": null,
                        "type_format": null,
                        "skip_lines": null,
                        "sequence_name_col": null,
                        "region_bed": true,
                        "mem_mb": 5000,
                        "list_chrs": true,
                        "input_file": {
                            "path": "/sdf/asdf/asdf/asdf/vnbv.cvnb.cvbn.vcf"
                        },
                        "index_file": null,
                        "end_chr": null,
                        "dont_output_data_file": false,
                        "comment_lines": null,
                        "chr_start": null
                    },
                    "allocatedResources": {
                        "mem": 5000,
                        "cpu": 1
                    }
                },
                "sbg:license": "MIT/Expat License",
                "sbg:links": [
                    {
                        "id": "http://www.htslib.org/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/samtools/htslib/tree/master",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://www.htslib.org/doc/#manual-pages",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/samtools/files/tabix/tabix-0.2.5.tar.bz2/download",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176/",
                        "label": "Publication"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1489060552,
                "sbg:modifiedBy": "nevenam",
                "sbg:cmdPreview": "/opt/tabix-0.2.6/tabix    -f  vnbv.cvnb.cvbn.vcf",
                "sbg:revision": 11,
                "sbg:revisionNotes": "Changed output type for indexed_file to GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                "sbg:categories": [
                    "Indexing"
                ],
                "sbg:project": "bix-demo/tabix-0-2-6-demo",
                "y": 776.666941603035,
                "sbg:toolkitVersion": "0.2.6",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Heng Li -  Broad Institue",
                "sbg:latestRevision": 11,
                "x": 2465.0005862315707,
                "sbg:createdOn": 1450911542,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "bix-demo",
                    "mladenlSBG",
                    "nevenam"
                ],
                "sbg:projectName": "Tabix 0.2.6 - Demo New",
                "sbg:toolkit": "Tabix",
                "sbg:id": "admin/sbg-public-data/tabix-index-v0-2-6/11",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911542
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911544
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458576452
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467212209
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467381893
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467962665
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467964896
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469091516
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469091660
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469092179
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470066288
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Changed output type for indexed_file to GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                        "sbg:modifiedOn": 1489060552
                    }
                ]
            },
            "label": "Tabix Index",
            "sbg:x": 2465.0005862315707,
            "sbg:y": 776.666941603035
        },
        {
            "id": "#Tabix_Index_1",
            "inputs": [
                {
                    "id": "#Tabix_Index_1.type_format",
                    "default": "vcf.gz"
                },
                {
                    "id": "#Tabix_Index_1.input_file",
                    "source": [
                        "#Tabix_BGZIP_1.output_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#Tabix_Index_1.indexed_file"
                },
                {
                    "id": "#Tabix_Index_1.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/tabix-index-v0-2-6/11",
                "label": "Tabix Index",
                "description": "Tabix indexes a TAB-delimited genome position file in.tab.bgz and creates an index file in.tab.bgz.tbi when region is absent from the command-line. The input data file must be position sorted and compressed by bgzip which has a gzip(1) like interface. After indexing, tabix is able to quickly retrieve data lines overlapping regions specified in the format \"chr:beginPos-endPos\". Fast data retrieval also works over network if URI is given as a file name and in this case the index file will be downloaded if it is not present locally.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if ($job.inputs.index_file==undefined)\n    return \"/opt/tabix-0.2.6/tabix \"\n  else\n    return \"echo \\\"Passing inputs to outputs.\\\" \"\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 7,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.zero_based==true)\n    return \" -0 \"\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Specify if the position in the data file is 0 based",
                        "description": "Specify if the position in the data file is 0 based.",
                        "id": "#zero_based"
                    },
                    {
                        "sbg:toolDefaultValue": "gff.gz",
                        "sbg:category": "File inputs",
                        "type": [
                            {
                                "type": "enum",
                                "symbols": [
                                    "gff.gz",
                                    "bed.gz",
                                    "sam.gz",
                                    "vcf.gz",
                                    "psltab.gz"
                                ],
                                "name": "type_format"
                            }
                        ],
                        "inputBinding": {
                            "position": 1,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.type_format!=undefined && $job.inputs.type_format!='')\n  {\n    return ' -p ' + $job.inputs.type_format.substring(0, $job.inputs.type_format.length-3)\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Select input file format",
                        "description": "Select input file format.",
                        "id": "#type_format"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 5,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.skip_lines!=undefined)\n    return \" -S \" + $job.inputs.skip_lines\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip first N lines",
                        "description": "Skip first N lines in the data file.",
                        "id": "#skip_lines"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 2,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.sequence_name_col!=undefined)\n    return \" -s \" + $job.inputs.sequence_name_col\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Column of the sequence name",
                        "description": "Column of the sequence name.",
                        "id": "#sequence_name_col"
                    },
                    {
                        "sbg:category": "File inputs",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 8,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.region_bed==true)\n    return \" -B \"\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Region1 is a BED file",
                        "description": "Region1 is a BED file (entire file will be read).",
                        "id": "#region_bed"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Reserve N MB of RAM",
                        "description": "Reserve N MB of RAM for tool execution.",
                        "id": "#mem_mb"
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 9,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.list_chrs==true)\n    return \" -l \"\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "List chromosome names",
                        "description": "List chromosome names.",
                        "id": "#list_chrs"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File inputs",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 99,
                            "separate": false,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined)\n  \treturn $job.inputs.input_file.path.split('/').slice(-1)[0]\n}\n",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input file",
                        "description": "Input file for tabix indexing.",
                        "sbg:fileTypes": "GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                        "id": "#input_file"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File inputs",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file.",
                        "sbg:fileTypes": "TBI, CSI",
                        "id": "#index_file"
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 4,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.end_chr!=undefined)\n    return \" -e \" + $job.inputs.end_chr\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "End position of the chromosome column",
                        "description": "End position of the chromosome column. Can be identical to start chromosome column.",
                        "id": "#end_chr"
                    },
                    {
                        "sbg:category": "Output files",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Don't output data file",
                        "description": "Don't output data file (only index file will be outputed).",
                        "id": "#dont_output_data_file"
                    },
                    {
                        "sbg:toolDefaultValue": "#",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 6,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.comment_lines!=undefined)\n    return \" -c \" + $job.inputs.comment_lines\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip lines starting with character CHAR",
                        "description": "Skip lines starting with character CHAR.",
                        "id": "#comment_lines"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 3,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.index_file==undefined && $job.inputs.chr_start!=undefined)\n    return \" -b \" + $job.inputs.chr_start\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Start position of the chromosome column",
                        "description": "Start position of the chromosome column.",
                        "id": "#chr_start"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tabix indexed file",
                        "description": "Tabix indexed file.",
                        "sbg:fileTypes": "GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.dont_output_data_file==true)\n    return ''\n  return $job.inputs.input_file.path.split('/').slice(-1)[0]\n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "__inherit__": "input_file"
                            },
                            "sbg:inheritMetadataFrom": "#input_file",
                            "secondaryFiles": [
                                ".tbi"
                            ]
                        },
                        "id": "#indexed_file"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tabix index",
                        "description": "Tabix index file.",
                        "sbg:fileTypes": "VCF.TBI",
                        "outputBinding": {
                            "glob": "*.tbi",
                            "sbg:inheritMetadataFrom": "#input_file"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "engineCommand": "cwl-engine.js",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.mem_mb)\n  {\n    return $job.inputs.mem_mb\n  }\n  else\n  {\n    return 2048\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "78fc60e5f28a",
                        "dockerPull": "images.sbgenomics.com/nevenam/tabix:0.2.6"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.index_file==undefined)\n    return \" -f \"\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "zero_based": null,
                        "type_format": null,
                        "skip_lines": null,
                        "sequence_name_col": null,
                        "region_bed": true,
                        "mem_mb": 5000,
                        "list_chrs": true,
                        "input_file": {
                            "path": "/sdf/asdf/asdf/asdf/vnbv.cvnb.cvbn.vcf"
                        },
                        "index_file": null,
                        "end_chr": null,
                        "dont_output_data_file": false,
                        "comment_lines": null,
                        "chr_start": null
                    },
                    "allocatedResources": {
                        "mem": 5000,
                        "cpu": 1
                    }
                },
                "sbg:license": "MIT/Expat License",
                "sbg:links": [
                    {
                        "id": "http://www.htslib.org/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/samtools/htslib/tree/master",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://www.htslib.org/doc/#manual-pages",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/samtools/files/tabix/tabix-0.2.5.tar.bz2/download",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176/",
                        "label": "Publication"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1489060552,
                "sbg:modifiedBy": "nevenam",
                "sbg:cmdPreview": "/opt/tabix-0.2.6/tabix    -f  vnbv.cvnb.cvbn.vcf",
                "sbg:revision": 11,
                "sbg:revisionNotes": "Changed output type for indexed_file to GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                "sbg:categories": [
                    "Indexing"
                ],
                "sbg:project": "bix-demo/tabix-0-2-6-demo",
                "y": 601.666790776787,
                "sbg:toolkitVersion": "0.2.6",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Heng Li -  Broad Institue",
                "sbg:latestRevision": 11,
                "x": 2998.3339438041266,
                "sbg:createdOn": 1450911542,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "bix-demo",
                    "mladenlSBG",
                    "nevenam"
                ],
                "sbg:projectName": "Tabix 0.2.6 - Demo New",
                "sbg:toolkit": "Tabix",
                "sbg:id": "admin/sbg-public-data/tabix-index-v0-2-6/11",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911542
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911544
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458576452
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467212209
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467381893
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467962665
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1467964896
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469091516
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469091660
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469092179
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470066288
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Changed output type for indexed_file to GFF.GZ, BED.GZ, SAM.GZ, VCF.GZ, PSLTBL.GZ",
                        "sbg:modifiedOn": 1489060552
                    }
                ]
            },
            "label": "Tabix Index",
            "sbg:x": 2998.3339438041266,
            "sbg:y": 601.666790776787
        },
        {
            "id": "#FastQC",
            "inputs": [
                {
                    "id": "#FastQC.input_fastq",
                    "source": [
                        "#fastq"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#FastQC.report_zip"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/fastqc-0-11-4/10",
                "label": "FastQC",
                "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data. \n\nSince it's necessary to convert the tool report in order to show them on Seven Bridges platform, it's recommended to use [FastQC Analysis workflow instead](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/). \n\nFastQC is a tool which takes a FASTQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.\n\n### Common Issues:\n\nOutput of the tool is ZIP archive. In order to view report on Seven Bridges platform, you can use SBG Html2b64 tool. It is advised to scatter SBG Html2b64 so it would be able to process an array of files. The example can be seen in [FastQC Analysis workflow](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/) which you can also use instead of this tool.",
                "baseCommand": [
                    "fastqc"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-t",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--threads",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  if (! $job.inputs.threads){\n    $job.inputs.threads = [].concat($job.inputs.input_fastq).length\n  }\n  return Math.min($job.inputs.threads,7)\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Threads",
                        "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
                        "id": "#threads"
                    },
                    {
                        "sbg:altPrefix": "-q",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--quiet",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Quiet",
                        "description": "Supress all progress messages on stdout and only report errors.",
                        "id": "#quiet"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--nogroup",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Nogroup",
                        "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
                        "id": "#nogroup"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--nano",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Nano",
                        "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
                        "id": "#nano"
                    },
                    {
                        "sbg:toolDefaultValue": "Determined by the number of input files",
                        "sbg:category": "Execution parameters",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Amount of memory allocated per job execution.",
                        "description": "Amount of memory allocated per execution of FastQC job.",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:altPrefix": "-l",
                        "sbg:category": "File inputs",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--limits",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Limits",
                        "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
                        "sbg:fileTypes": "TXT",
                        "id": "#limits_file"
                    },
                    {
                        "sbg:altPrefix": "-f",
                        "sbg:toolDefaultValue": "7",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--kmers",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Kmers",
                        "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
                        "id": "#kmers"
                    },
                    {
                        "sbg:category": "File inputs",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 100,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input file",
                        "description": "Input file.",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
                        "id": "#input_fastq"
                    },
                    {
                        "sbg:altPrefix": "-f",
                        "sbg:toolDefaultValue": "FASTQ",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "bam",
                                    "sam",
                                    "bam_mapped",
                                    "sam_mapped",
                                    "fastq"
                                ],
                                "name": "format"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--format",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Format",
                        "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
                        "id": "#format"
                    },
                    {
                        "sbg:toolDefaultValue": "Determined by the number of input files",
                        "sbg:category": "Execution parameters",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Number of CPUs.",
                        "description": "Number of CPUs to be allocated per execution of FastQC.",
                        "id": "#cpus_per_job"
                    },
                    {
                        "sbg:altPrefix": "-c",
                        "sbg:category": "File inputs",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--contaminants",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Contaminants",
                        "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "sbg:fileTypes": "TXT",
                        "id": "#contaminants_file"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--casava",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Casava",
                        "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
                        "id": "#casava"
                    },
                    {
                        "sbg:altPrefix": "-a",
                        "sbg:category": "File inputs",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--adapters",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Adapters",
                        "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "sbg:fileTypes": "TXT",
                        "id": "#adapters_file"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "Report zip",
                        "description": "Zip archive of the report.",
                        "sbg:fileTypes": "ZIP",
                        "outputBinding": {
                            "glob": "*_fastqc.zip",
                            "sbg:metadata": {
                                "__inherit__": "input_fastq"
                            },
                            "sbg:inheritMetadataFrom": "#input_fastq"
                        },
                        "id": "#report_zip"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  // if cpus_per_job is set, it takes precedence\n  if ($job.inputs.cpus_per_job) {\n    return $job.inputs.cpus_per_job \n  }\n  // if threads parameter is set, the number of CPUs is set based on that parametere\n  else if ($job.inputs.threads) {\n    return $job.inputs.threads\n  }\n  // else the number of CPUs is determined by the number of input files, up to 7 -- default\n  else return Math.min([].concat($job.inputs.input_fastq).length,7)\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  // if memory_per_job is set, it takes precedence\n  if ($job.inputs.memory_per_job){\n    return $job.inputs.memory_per_job\n  }\n  // if threads parameter is set, memory req is set based on the number of threads\n  else if ($job.inputs.threads){\n    return 1024 + 300*$job.inputs.threads\n  }\n  // else the memory req is determined by the number of input files, up to 7 -- default\n  else return (1024 + 300*Math.min([].concat($job.inputs.input_fastq).length,7))\n}\n\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "759c4c8fbafd",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "",
                        "separate": true,
                        "valueFrom": "--noextract"
                    },
                    {
                        "position": 0,
                        "prefix": "--outdir",
                        "separate": true,
                        "valueFrom": "."
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "threads": null,
                        "quiet": true,
                        "nogroup": null,
                        "nano": null,
                        "memory_per_job": null,
                        "limits_file": null,
                        "kmers": null,
                        "input_fastq": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/input_fastq-1.fastq",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/input_fastq-2.fastq",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "format": null,
                        "cpus_per_job": null,
                        "contaminants_file": null,
                        "casava": null,
                        "adapters_file": null
                    },
                    "allocatedResources": {
                        "mem": 1624,
                        "cpu": 2
                    }
                },
                "sbg:license": "GNU General Public License v3.0 only",
                "sbg:links": [
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
                        "label": "Homepage"
                    },
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc",
                        "label": "Publication"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1493223877,
                "sbg:modifiedBy": "nikola_jovanovic",
                "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.fastq  /path/to/input_fastq-2.fastq",
                "sbg:revision": 10,
                "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
                "sbg:categories": [
                    "FASTQ-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:project": "bix-demo/fastqc-0-11-4-demo",
                "y": 318.33339677916854,
                "sbg:toolkitVersion": "0.11.4",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Babraham Institute",
                "sbg:latestRevision": 10,
                "x": 470.00010548697924,
                "sbg:createdOn": 1450911593,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "nikola_jovanovic",
                    "bix-demo",
                    "mladenlSBG"
                ],
                "sbg:projectName": "FastQC 0.11.4 - Demo",
                "sbg:toolkit": "FastQC",
                "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/10",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911593
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911593
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911594
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459870965
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465990120
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Input categories added.",
                        "sbg:modifiedOn": 1476188095
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
                        "sbg:modifiedOn": 1476270496
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
                        "sbg:modifiedOn": 1476354537
                    },
                    {
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"\n\nAdded automatised handling of BAM and SAM files. Also, added security measures for better automated threading handling.",
                        "sbg:modifiedOn": 1488882730
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Changed the file types of limits, adapters and contaminants files to be TXT, they have to be in format name[tab]sequence. Format should be similar to the one in the Configuration folder provided with FastQC, txt files.\n\n\"IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"",
                        "sbg:modifiedOn": 1488980183
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
                        "sbg:modifiedOn": 1493223877
                    }
                ]
            },
            "label": "FastQC",
            "sbg:x": 470.00010548697924,
            "sbg:y": 318.33339677916854
        },
        {
            "id": "#SBG_Untar_fasta",
            "inputs": [
                {
                    "id": "#SBG_Untar_fasta.input_tar_with_reference",
                    "source": [
                        "#reference"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Untar_fasta.output_fasta"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-untar-fasta/8",
                "label": "SBG Untar fasta",
                "description": "SBG Untar fasta is primarily used for extracting FASTA file from TAR with more different files. For example, extracting FASTA from BWA-MEM's index TAR.\n\n**Inputs**\n\nTAR (containing FASTA).\n\n**Outputs**\n\nFA/FASTA/FA.GZ/FASTA.GZ from TAR.\n\n\n\n**Important: TAR.GZ format is not supported. \nIf only decompress operation is required use SBG Decompressor tool.**",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  reference_file = $job.inputs.input_tar_with_reference.path.split('/')[$job.inputs.input_tar_with_reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'tar -xf ' + reference_file    \n  }\n  else{\n    return 'echo Passing input file '\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "label": "Input archive file with fasta",
                        "description": "The input archive file to be unpacked.",
                        "sbg:fileTypes": "TAR, FA, FASTA, FA.GZ, FASTA.GZ",
                        "id": "#input_tar_with_reference"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Unpacked fasta file",
                        "description": "Unpacked fasta file from the input archive.",
                        "outputBinding": {
                            "glob": "{*.fasta,*.fa,*.fa.gz,*.fasta.gz}",
                            "sbg:inheritMetadataFrom": "#input_tar_with_reference"
                        },
                        "id": "#output_fasta"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "58b79c627f95",
                        "dockerPull": "images.sbgenomics.com/markop/sbg-decompressor:1.0"
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "input_tar_with_reference": {
                            "secondaryFiles": [],
                            "path": "input_file.fasta",
                            "class": "File",
                            "size": 0
                        }
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466002722
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466003214
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466004710
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466004986
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466005081
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466005599
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466007588
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466077480
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Description updated.",
                        "sbg:modifiedOn": 1500468272
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "description",
                        "sbg:modifiedOn": 1500468316
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Important with bold",
                        "sbg:modifiedOn": 1500472209
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "description - bold important",
                        "sbg:modifiedOn": 1500472520
                    }
                ],
                "sbg:modifiedBy": "vladimirk",
                "sbg:cmdPreview": "echo Passing input file",
                "sbg:revision": 11,
                "sbg:revisionNotes": "description - bold important",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:modifiedOn": 1500472520,
                "y": -162.47767769539385,
                "sbg:toolkitVersion": "v1.0",
                "sbg:license": "Apache License 2.0",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Vladimir Kovacevic, Seven Bridges Genomics",
                "sbg:homepage": "https://igor.sbgenomics.com/",
                "sbg:createdBy": "bix-demo",
                "sbg:latestRevision": 11,
                "x": 648.3335068093467,
                "sbg:createdOn": 1466002722,
                "sbg:contributors": [
                    "bix-demo",
                    "vladimirk"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:toolkit": "SBGTools",
                "sbg:id": "admin/sbg-public-data/sbg-untar-fasta/8"
            },
            "label": "SBG Untar fasta",
            "sbg:x": 648.3335068093467,
            "sbg:y": -162.47767769539385
        },
        {
            "id": "#Tabix_BGZIP",
            "inputs": [
                {
                    "id": "#Tabix_BGZIP.input_file",
                    "source": [
                        "#VCFtools_Sort_1.output_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#Tabix_BGZIP.output_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/tabix-bgzip-v0-2-6/9",
                "label": "Tabix BGZIP",
                "description": "Tabix BGZIP is used for compressing/decompressing (BAM, VCF, BED, ...) any file (can handle only single file on input; list of files should be handled with scatter method) in BGZF and from BGZF format.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  com=''\n  filename=''\n  if($job.inputs.input_file instanceof Array)\n    filename=$job.inputs.input_file[0].path\n  else\n    filename=$job.inputs.input_file.path\n    \n  paths=filename.split('/')\n  names=filename.split('/')[paths.length-1].split('.')\n  \n  name=filename\n  if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined))\n  {\n    com+='gzip -d -c '\n    com+=filename\n    com+='>'\n    com+=filename.split('/')[paths.length-1].substring(0, (filename.split('/')[paths.length-1].length)-3)\n    com+=' ; '\n    name=filename.split('/')[paths.length-1].substring(0, (filename.split('/')[paths.length-1].length)-3)\n  }\n  com+='/opt/samtools-1.3/tabix-0.2.6/bgzip '\n  com+=' -c -f '\n  if($job.inputs.decompress==true)\n  {\n    com+='-d '\n  }\n  com+=name\n  return com\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:category": "File inputs",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "label": "Input file",
                        "description": "Input file to be compressed/decompressed.",
                        "sbg:fileTypes": "VCF, VCF.GZ, GFF, GFF.GZ, BED, BED.GZ, SAM, SAM.GZ, PSLTAB, PSLTAB.GZ",
                        "id": "#input_file"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Decompress input file",
                        "description": "Decompress input file.",
                        "id": "#decompress"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Compressed or decompressed file",
                        "description": "Compressed or decompressed file.",
                        "sbg:fileTypes": "VCF.GZ, VCF, BED.GZ, BED, GFF.GZ, GFF, SAM.GZ, SAM, PSLTAB.GZ, PSLTAB",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  filename=''\n  if($job.inputs.input_file instanceof Array)\n    filename=$job.inputs.input_file[0].path\n  else\n    filename=$job.inputs.input_file.path\n  \n  paths=filename.split('/')\n  names=filename.split('/')[paths.length-1].split('.')\n  \n  nn=''\n  if($job.inputs.decompress)\n  {\n    lind=names.length-1\n  }\n  else if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined))\n    \n  {\n    lind=names.length-1\n  }\n  else\n  {\n    lind=names.length\n  }\n  for(i=0; i<lind; i++)\n  {\n    if(i!=0)\n      nn+='.'\n    nn+=names[i]\n    if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n    else if (($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n  }\n  \n  if($job.inputs.decompress)\n  {\n    return nn\n  }\n  else\n  {\n    return nn+'.gz'\n  }\n}",
                                "class": "Expression"
                            }
                        },
                        "id": "#output_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/nevenam/tabixbgzip:0.2.6"
                    }
                ],
                "stdout": {
                    "engine": "#cwl-js-engine",
                    "script": "{\n  filename=''\n  if($job.inputs.input_file instanceof Array)\n    filename=$job.inputs.input_file[0].path\n  else\n    filename=$job.inputs.input_file.path\n    \n  paths=filename.split('/')\n  names=filename.split('/')[paths.length-1].split('.')\n  \n  nn=''\n  if($job.inputs.decompress)\n  {\n    lind=names.length-1\n  }\n  else if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined))\n    \n  {\n    lind=names.length-1\n  }\n  else\n  {\n    lind=names.length\n  }\n  for(i=0; i<lind; i++)\n  {\n    if(i!=0)\n      nn+='.'\n    nn+=names[i]\n    if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n    else if (($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n  }\n  \n  if($job.inputs.decompress)\n  {\n    return nn\n  }\n  else\n  {\n    return nn+'.gz'\n  }\n}",
                    "class": "Expression"
                },
                "sbg:job": {
                    "inputs": {
                        "input_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/input_vcf_file.vcf.gz",
                            "class": "File",
                            "size": 0
                        },
                        "decompress": false
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:license": "MIT/Expat License",
                "sbg:links": [
                    {
                        "id": "http://www.htslib.org/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/samtools/htslib/tree/master",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://www.htslib.org/doc/#manual-pages",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/samtools/files/tabix/tabix-0.2.5.tar.bz2/download",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176/",
                        "label": "Publication"
                    },
                    {
                        "id": "http://www.htslib.org/doc/#manual-pages",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1500998041,
                "sbg:modifiedBy": "nevenam",
                "sbg:cmdPreview": "gzip -d -c /path/to/input_vcf_file.vcf.gz>input_vcf_file.vcf ; /opt/samtools-1.3/tabix-0.2.6/bgzip  -c -f input_vcf_file.vcf  > input_vcf_file.tab.vcf.gz",
                "sbg:revision": 9,
                "sbg:revisionNotes": "changed | to ;",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:project": "bix-demo/tabix-0-2-6-demo",
                "y": 775.000090042753,
                "sbg:toolkitVersion": "0.2.6",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Heng Li -  Broad Institue",
                "sbg:latestRevision": 9,
                "x": 2263.3337487247395,
                "sbg:createdOn": 1458920859,
                "sbg:createdBy": "nevenam.sudo",
                "sbg:contributors": [
                    "nevenam",
                    "nevenam.sudo"
                ],
                "sbg:projectName": "Tabix 0.2.6 - Demo New",
                "sbg:toolkit": "Tabix",
                "sbg:id": "admin/sbg-public-data/tabix-bgzip-v0-2-6/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920859
                    },
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920968
                    },
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462790441
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469092031
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470066112
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1489579092
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "input_file can be an array of one file (javascript); decompress==undefined is threated as false value; .tab is added as additional extension for compression (.tab.vcf.gz, corrected)",
                        "sbg:modifiedOn": 1489579236
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "output file format updated",
                        "sbg:modifiedOn": 1500286251
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "added -c to gzip command",
                        "sbg:modifiedOn": 1500984378
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "changed | to ;",
                        "sbg:modifiedOn": 1500998041
                    }
                ]
            },
            "label": "Tabix BGZIP",
            "sbg:x": 2263.3337487247395,
            "sbg:y": 775.000090042753
        },
        {
            "id": "#Tabix_BGZIP_1",
            "inputs": [
                {
                    "id": "#Tabix_BGZIP_1.input_file",
                    "source": [
                        "#VCFtools_Sort.output_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#Tabix_BGZIP_1.output_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/tabix-bgzip-v0-2-6/9",
                "label": "Tabix BGZIP",
                "description": "Tabix BGZIP is used for compressing/decompressing (BAM, VCF, BED, ...) any file (can handle only single file on input; list of files should be handled with scatter method) in BGZF and from BGZF format.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  com=''\n  filename=''\n  if($job.inputs.input_file instanceof Array)\n    filename=$job.inputs.input_file[0].path\n  else\n    filename=$job.inputs.input_file.path\n    \n  paths=filename.split('/')\n  names=filename.split('/')[paths.length-1].split('.')\n  \n  name=filename\n  if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined))\n  {\n    com+='gzip -d -c '\n    com+=filename\n    com+='>'\n    com+=filename.split('/')[paths.length-1].substring(0, (filename.split('/')[paths.length-1].length)-3)\n    com+=' ; '\n    name=filename.split('/')[paths.length-1].substring(0, (filename.split('/')[paths.length-1].length)-3)\n  }\n  com+='/opt/samtools-1.3/tabix-0.2.6/bgzip '\n  com+=' -c -f '\n  if($job.inputs.decompress==true)\n  {\n    com+='-d '\n  }\n  com+=name\n  return com\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:category": "File inputs",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "label": "Input file",
                        "description": "Input file to be compressed/decompressed.",
                        "sbg:fileTypes": "VCF, VCF.GZ, GFF, GFF.GZ, BED, BED.GZ, SAM, SAM.GZ, PSLTAB, PSLTAB.GZ",
                        "id": "#input_file"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Decompress input file",
                        "description": "Decompress input file.",
                        "id": "#decompress"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Compressed or decompressed file",
                        "description": "Compressed or decompressed file.",
                        "sbg:fileTypes": "VCF.GZ, VCF, BED.GZ, BED, GFF.GZ, GFF, SAM.GZ, SAM, PSLTAB.GZ, PSLTAB",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  filename=''\n  if($job.inputs.input_file instanceof Array)\n    filename=$job.inputs.input_file[0].path\n  else\n    filename=$job.inputs.input_file.path\n  \n  paths=filename.split('/')\n  names=filename.split('/')[paths.length-1].split('.')\n  \n  nn=''\n  if($job.inputs.decompress)\n  {\n    lind=names.length-1\n  }\n  else if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined))\n    \n  {\n    lind=names.length-1\n  }\n  else\n  {\n    lind=names.length\n  }\n  for(i=0; i<lind; i++)\n  {\n    if(i!=0)\n      nn+='.'\n    nn+=names[i]\n    if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n    else if (($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n  }\n  \n  if($job.inputs.decompress)\n  {\n    return nn\n  }\n  else\n  {\n    return nn+'.gz'\n  }\n}",
                                "class": "Expression"
                            }
                        },
                        "id": "#output_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/nevenam/tabixbgzip:0.2.6"
                    }
                ],
                "stdout": {
                    "engine": "#cwl-js-engine",
                    "script": "{\n  filename=''\n  if($job.inputs.input_file instanceof Array)\n    filename=$job.inputs.input_file[0].path\n  else\n    filename=$job.inputs.input_file.path\n    \n  paths=filename.split('/')\n  names=filename.split('/')[paths.length-1].split('.')\n  \n  nn=''\n  if($job.inputs.decompress)\n  {\n    lind=names.length-1\n  }\n  else if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined))\n    \n  {\n    lind=names.length-1\n  }\n  else\n  {\n    lind=names.length\n  }\n  for(i=0; i<lind; i++)\n  {\n    if(i!=0)\n      nn+='.'\n    nn+=names[i]\n    if((filename.charAt(filename.length-3)+filename.charAt(filename.length-2)+filename.charAt(filename.length-1))\n     =='.gz' && ($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n    else if (($job.inputs.decompress==false || $job.inputs.decompress==undefined) && i==0)\n      nn+='.tab'\n  }\n  \n  if($job.inputs.decompress)\n  {\n    return nn\n  }\n  else\n  {\n    return nn+'.gz'\n  }\n}",
                    "class": "Expression"
                },
                "sbg:job": {
                    "inputs": {
                        "input_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/input_vcf_file.vcf.gz",
                            "class": "File",
                            "size": 0
                        },
                        "decompress": false
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:license": "MIT/Expat License",
                "sbg:links": [
                    {
                        "id": "http://www.htslib.org/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/samtools/htslib/tree/master",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://www.htslib.org/doc/#manual-pages",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/samtools/files/tabix/tabix-0.2.5.tar.bz2/download",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176/",
                        "label": "Publication"
                    },
                    {
                        "id": "http://www.htslib.org/doc/#manual-pages",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1500998041,
                "sbg:modifiedBy": "nevenam",
                "sbg:cmdPreview": "gzip -d -c /path/to/input_vcf_file.vcf.gz>input_vcf_file.vcf ; /opt/samtools-1.3/tabix-0.2.6/bgzip  -c -f input_vcf_file.vcf  > input_vcf_file.tab.vcf.gz",
                "sbg:revision": 9,
                "sbg:revisionNotes": "changed | to ;",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:project": "bix-demo/tabix-0-2-6-demo",
                "y": 601.6667903794227,
                "sbg:toolkitVersion": "0.2.6",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Heng Li -  Broad Institue",
                "sbg:latestRevision": 9,
                "x": 2808.333770182412,
                "sbg:createdOn": 1458920859,
                "sbg:createdBy": "nevenam.sudo",
                "sbg:contributors": [
                    "nevenam",
                    "nevenam.sudo"
                ],
                "sbg:projectName": "Tabix 0.2.6 - Demo New",
                "sbg:toolkit": "Tabix",
                "sbg:id": "admin/sbg-public-data/tabix-bgzip-v0-2-6/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920859
                    },
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920968
                    },
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462790441
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469092031
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470066112
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1489579092
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "input_file can be an array of one file (javascript); decompress==undefined is threated as false value; .tab is added as additional extension for compression (.tab.vcf.gz, corrected)",
                        "sbg:modifiedOn": 1489579236
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "output file format updated",
                        "sbg:modifiedOn": 1500286251
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "added -c to gzip command",
                        "sbg:modifiedOn": 1500984378
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "changed | to ;",
                        "sbg:modifiedOn": 1500998041
                    }
                ]
            },
            "label": "Tabix BGZIP",
            "sbg:x": 2808.333770182412,
            "sbg:y": 601.6667903794227
        },
        {
            "id": "#VCFtools_Concat",
            "inputs": [
                {
                    "id": "#VCFtools_Concat.input_files",
                    "source": [
                        "#GATK_GenotypeGVCFs.vcf"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#VCFtools_Concat.output_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/vcftools-concat-0-1-14/9",
                "label": "VCFtools Concat",
                "description": "VCFtools concat concatenates VCF files (for example, splitting by chromosome). Note that the input and output VCFs will have the same number of columns. The script does not merge VCFs by position (see also vcf-merge).\n\nIn the default mode, this tool only checks that all files have the same columns. When run with the -s option, it will perform a partial merge sort and look at a limited number of open files simultaneously.",
                "baseCommand": [
                    "vcf-concat"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "--merge-sort",
                        "sbg:toolDefaultValue": "None",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-s",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Small overlap",
                        "description": "Allow small overlaps in N consecutive files (when run with the this option, only one chromosome can be present).",
                        "id": "#small_overlap"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-p",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Pad missing",
                        "description": "Write '.' in place of missing columns. Useful for joining chrY with the rest.",
                        "id": "#pad_missing"
                    },
                    {
                        "sbg:category": "File Input",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 20,
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input files",
                        "description": "Input array of files (vcf or vcf.gz).",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "id": "#input_files"
                    },
                    {
                        "sbg:category": "File Input",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-f",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "List of files",
                        "description": "Read the list of files from a file.",
                        "sbg:fileTypes": "TXT",
                        "id": "#file_list"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Compressed output",
                        "description": "Check to make the output compressed (usually for further processing).",
                        "id": "#compressed"
                    },
                    {
                        "sbg:altPrefix": "--check_columns",
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 5,
                            "prefix": "-c",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Check columns",
                        "description": "Do not concatenate, only check if the columns agree.",
                        "id": "#check_columns"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Concatenated vcf file",
                        "description": "Concatenated files from the input as a single vcf file.",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n    function flatten(array){\n  \n\n  \n  for(i=0;i<array.length;i++) {\n    if (array[i] instanceof Array) {\n    \tarray = array.concat(array[i])\n        array.splice(i, 1)\n        i -= 1\n    }\n  }\n  \n  return array\n  \n}\n  \n  inp = $job.inputs.input_files\n  inp = flatten([].concat( inp ));\n  \n  if (inp.length > 1) {\n     sufix = \"and_more.concat\"\n  } else {\n     sufix = \"concat\"\n  }\n  \n  sufix_ext = \"vcf\";\n  filepath = inp[0].path\n  filename = filepath.split(\"/\").pop()\n  \n  if (filename.lastIndexOf(\".vcf.gz\") != -1) {\n    basename = filename.substr(0,filename.lastIndexOf(\".vcf.gz\"))\n  } else {\n    basename = filename.substr(0,filename.lastIndexOf(\".\"))\n  }\n\n  new_filename = basename + \".\" + sufix + \".\" + sufix_ext;\n\n  if ($job.inputs.compressed) {\n\n  \treturn new_filename + '.gz'\n      \n  } else {\n  \n  \treturn new_filename\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:inheritMetadataFrom": "#input_files"
                        },
                        "id": "#output_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "engineCommand": "cwl-engine.js",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "54cb823ba25a",
                        "dockerPull": "images.sbgenomics.com/ognjenm/vcftools:0.1.14"
                    }
                ],
                "arguments": [
                    {
                        "position": 50,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n      function flatten(array){\n  \n\n  \n  for(i=0;i<array.length;i++) {\n    if (array[i] instanceof Array) {\n    \tarray = array.concat(array[i])\n        array.splice(i, 1)\n        i -= 1\n    }\n  }\n  \n  return array\n  \n}\n  \n  inp = $job.inputs.input_files\n  inp = flatten([].concat( inp ));\n  \n  if (inp.length > 1) {\n     sufix = \"and_more.concat\"\n  } else {\n     sufix = \"concat\"\n  }\n  \n  sufix_ext = \"vcf\";\n  filepath = inp[0].path\n  filename = filepath.split(\"/\").pop()\n  \n  if (filename.lastIndexOf(\".vcf.gz\") != -1) {\n    basename = filename.substr(0,filename.lastIndexOf(\".vcf.gz\"))\n  } else {\n    basename = filename.substr(0,filename.lastIndexOf(\".\"))\n  }\n\n  new_filename = basename + \".\" + sufix + \".\" + sufix_ext;\n\n  return '> ' + new_filename\n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 100,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n      function flatten(array){\n  \n\n  \n  for(i=0;i<array.length;i++) {\n    if (array[i] instanceof Array) {\n    \tarray = array.concat(array[i])\n        array.splice(i, 1)\n        i -= 1\n    }\n  }\n  \n  return array\n  \n}\n  \n  inp = $job.inputs.input_files\n  inp = flatten([].concat( inp ));\n  \n  if (inp.length > 1) {\n     sufix = \"and_more.concat\"\n  } else {\n     sufix = \"concat\"\n  }\n  \n  sufix_ext = \"vcf\";\n  filepath = inp[0].path\n  filename = filepath.split(\"/\").pop()\n  \n  if (filename.lastIndexOf(\".vcf.gz\") != -1) {\n    basename = filename.substr(0,filename.lastIndexOf(\".vcf.gz\"))\n  } else {\n    basename = filename.substr(0,filename.lastIndexOf(\".\"))\n  }\n\n  new_filename = basename + \".\" + sufix + \".\" + sufix_ext;\n\n  if ($job.inputs.compressed) {\n\n  \treturn '&& bgzip -c -f ' + new_filename + ' > ' + new_filename + '.gz'\n      \n  } else {\n    \n    return ''\n  }\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "small_overlap": 0,
                        "pad_missing": true,
                        "input_files": [
                            {
                                "path": "sample1.vcf"
                            },
                            {
                                "path": "sample2.vcf"
                            }
                        ],
                        "file_list": {
                            "secondaryFiles": [],
                            "path": "file_list.ext",
                            "class": "File",
                            "size": 0
                        },
                        "compressed": true,
                        "check_columns": true
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:license": "GNU General Public License version 3.0 (GPLv3)",
                "sbg:links": [
                    {
                        "id": "https://vcftools.github.io",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/vcftools/vcftools",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bioinformatics.oxfordjournals.org/content/27/15/2156",
                        "label": "Publications"
                    },
                    {
                        "id": "https://github.com/vcftools/vcftools/zipball/master",
                        "label": "Download"
                    },
                    {
                        "id": "https://sourceforge.net/p/vcftools/wiki/Home/",
                        "label": "Wiki"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1480431543,
                "sbg:modifiedBy": "ognjenm",
                "sbg:cmdPreview": "vcf-concat sample1.vcf sample2.vcf  > sample1.and_more.concat.vcf  && bgzip -c -f sample1.and_more.concat.vcf > sample1.and_more.concat.vcf.gz",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Added flattens",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/vcftools-0-1-14-demo",
                "y": 446.6667574776574,
                "sbg:toolkitVersion": "0.1.14",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Adam Auton, Petr Danecek, Anthony Marcketta",
                "sbg:latestRevision": 9,
                "x": 2313.3333460622343,
                "sbg:createdOn": 1450911615,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "ognjenm",
                    "bix-demo"
                ],
                "sbg:projectName": "VCFtools 0.1.14 - Demo",
                "sbg:toolkit": "VCFtools",
                "sbg:id": "admin/sbg-public-data/vcftools-concat-0-1-14/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911615
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911616
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911617
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911617
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911618
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Added -c option",
                        "sbg:modifiedOn": 1472826063
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Changed info",
                        "sbg:modifiedOn": 1472826160
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Changed concat",
                        "sbg:modifiedOn": 1474591521
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Overhaul done",
                        "sbg:modifiedOn": 1480431144
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Added flattens",
                        "sbg:modifiedOn": 1480431543
                    }
                ]
            },
            "label": "VCFtools Concat",
            "sbg:x": 2313.3333460622343,
            "sbg:y": 446.6667574776574
        },
        {
            "id": "#VCFtools_Sort",
            "inputs": [
                {
                    "id": "#VCFtools_Sort.input_file",
                    "source": [
                        "#VCFtools_Concat.output_file"
                    ]
                },
                {
                    "id": "#VCFtools_Sort.chromosomal_order",
                    "default": true
                }
            ],
            "outputs": [
                {
                    "id": "#VCFtools_Sort.output_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/vcftools-sort-0-1-14/7",
                "label": "VCFtools Sort",
                "description": "VCFtools sort sorts a VCF file.",
                "baseCommand": [
                    "vcf-sort"
                ],
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 2,
                            "prefix": "-p",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Parallel threads",
                        "description": "Change the number of sorts run concurrently to <int>.",
                        "id": "#parallel"
                    },
                    {
                        "sbg:toolDefaultValue": "N/A",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory in MB",
                        "description": "Memory in MB for execution.",
                        "id": "#mem_mb"
                    },
                    {
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 1,
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input file",
                        "description": "Input file (vcf or vcf.gz)",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "id": "#input_file"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Compressed output",
                        "description": "Check to make the output compressed (usually for further processing).",
                        "id": "#compressed"
                    },
                    {
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-c",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Chromosomal order",
                        "description": "Use natural ordering (1,2,10,MT,X) rather then the default (1,10,2,MT,X). This requires                                      new version of the unix \"sort\" command which supports the --version-sort option.",
                        "id": "#chromosomal_order"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Output file",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  filepath = $job.inputs.input_file.path\n\n  filename = filepath.split(\"/\").pop();\n\n  file_dot_sep = filename.split(\".\");\n  file_ext = file_dot_sep[file_dot_sep.length-1];\n\n  new_filename = filename.substr(0,filename.lastIndexOf(\".vcf\")) + \".sorted.vcf\";\n\n  if ($job.inputs.compressed) {\n      new_filename += \".gz\";\n  }\n  \n  return new_filename;\n  \n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "__inherit__": "input_file"
                            },
                            "sbg:inheritMetadataFrom": "#input_file"
                        },
                        "id": "#output_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "engineCommand": "cwl-engine.js",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.parallel) {\n  \treturn $job.inputs.parallel\n  } else {\n    return 1\n  }  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n   }  else {\n      \n      return 1000\n      \n      }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "54cb823ba25a",
                        "dockerPull": "images.sbgenomics.com/ognjenm/vcftools:0.1.14"
                    }
                ],
                "arguments": [
                    {
                        "position": 100,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\n\n  if ($job.inputs.compressed) {\n    \n  \tfilepath = $job.inputs.input_file.path\n\n  \tfilename = filepath.split(\"/\").pop();\n\n  \tfile_dot_sep = filename.split(\".\");\n  \tfile_ext = file_dot_sep[file_dot_sep.length-1];\n\n  \tnew_filename = filename.substr(0,filename.lastIndexOf(\".vcf\")) + \".sorted.vcf\";\n  \treturn '&& bgzip -c -f ' + new_filename + ' > ' + new_filename + '.gz'\n      \n  }\n  \n  \n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 50,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  filepath = $job.inputs.input_file.path\n\n  filename = filepath.split(\"/\").pop();\n\n  file_dot_sep = filename.split(\".\");\n  file_ext = file_dot_sep[file_dot_sep.length-1];\n\n  new_filename = filename.substr(0,filename.lastIndexOf(\".vcf\")) + \".sorted.vcf\";\n  \n  return '> '+new_filename;\n  \n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "parallel": 2,
                        "mem_mb": 100,
                        "input_file": {
                            "path": "sample1.vcf"
                        },
                        "compressed": true,
                        "chromosomal_order": null
                    },
                    "allocatedResources": {
                        "mem": 100,
                        "cpu": 2
                    }
                },
                "sbg:license": "GNU General Public License version 3.0 (GPLv3)",
                "sbg:links": [
                    {
                        "id": "https://vcftools.github.io",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/vcftools/vcftools",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bioinformatics.oxfordjournals.org/content/27/15/2156",
                        "label": "Publications"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1482334199,
                "sbg:modifiedBy": "milan.domazet.sudo",
                "sbg:cmdPreview": "vcf-sort sample1.vcf  > sample1.sorted.vcf  && bgzip -c -f sample1.sorted.vcf > sample1.sorted.vcf.gz",
                "sbg:revision": 7,
                "sbg:revisionNotes": "Added inherit metadata from input.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/vcftools-0-1-14-demo",
                "y": 471.666752192711,
                "sbg:toolkitVersion": "0.1.14",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Adam Auton, Petr Danecek, Anthony Marcketta",
                "sbg:latestRevision": 7,
                "x": 2515.0000374582078,
                "sbg:createdOn": 1450911603,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "ognjenm",
                    "bix-demo",
                    "milan.domazet.sudo"
                ],
                "sbg:projectName": "VCFtools 0.1.14 - Demo",
                "sbg:toolkit": "VCFtools",
                "sbg:id": "admin/sbg-public-data/vcftools-sort-0-1-14/7",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911603
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911604
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911604
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Changed memory, CPU and added parallel",
                        "sbg:modifiedOn": 1472821172
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Compressable output",
                        "sbg:modifiedOn": 1474285644
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Changed --parallel to -p",
                        "sbg:modifiedOn": 1478007439
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Changed CPU",
                        "sbg:modifiedOn": 1480089729
                    },
                    {
                        "sbg:modifiedBy": "milan.domazet.sudo",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Added inherit metadata from input.",
                        "sbg:modifiedOn": 1482334199
                    }
                ]
            },
            "label": "VCFtools Sort",
            "sbg:x": 2515.0000374582078,
            "sbg:y": 471.666752192711
        },
        {
            "id": "#VCFtools_Concat_1",
            "inputs": [
                {
                    "id": "#VCFtools_Concat_1.input_files",
                    "source": [
                        "#GATK_HaplotypeCaller.vcf_output"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#VCFtools_Concat_1.output_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/vcftools-concat-0-1-14/9",
                "label": "VCFtools Concat",
                "description": "VCFtools concat concatenates VCF files (for example, splitting by chromosome). Note that the input and output VCFs will have the same number of columns. The script does not merge VCFs by position (see also vcf-merge).\n\nIn the default mode, this tool only checks that all files have the same columns. When run with the -s option, it will perform a partial merge sort and look at a limited number of open files simultaneously.",
                "baseCommand": [
                    "vcf-concat"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "--merge-sort",
                        "sbg:toolDefaultValue": "None",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-s",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Small overlap",
                        "description": "Allow small overlaps in N consecutive files (when run with the this option, only one chromosome can be present).",
                        "id": "#small_overlap"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-p",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Pad missing",
                        "description": "Write '.' in place of missing columns. Useful for joining chrY with the rest.",
                        "id": "#pad_missing"
                    },
                    {
                        "sbg:category": "File Input",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 20,
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input files",
                        "description": "Input array of files (vcf or vcf.gz).",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "id": "#input_files"
                    },
                    {
                        "sbg:category": "File Input",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-f",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "List of files",
                        "description": "Read the list of files from a file.",
                        "sbg:fileTypes": "TXT",
                        "id": "#file_list"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Compressed output",
                        "description": "Check to make the output compressed (usually for further processing).",
                        "id": "#compressed"
                    },
                    {
                        "sbg:altPrefix": "--check_columns",
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 5,
                            "prefix": "-c",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Check columns",
                        "description": "Do not concatenate, only check if the columns agree.",
                        "id": "#check_columns"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Concatenated vcf file",
                        "description": "Concatenated files from the input as a single vcf file.",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n    function flatten(array){\n  \n\n  \n  for(i=0;i<array.length;i++) {\n    if (array[i] instanceof Array) {\n    \tarray = array.concat(array[i])\n        array.splice(i, 1)\n        i -= 1\n    }\n  }\n  \n  return array\n  \n}\n  \n  inp = $job.inputs.input_files\n  inp = flatten([].concat( inp ));\n  \n  if (inp.length > 1) {\n     sufix = \"and_more.concat\"\n  } else {\n     sufix = \"concat\"\n  }\n  \n  sufix_ext = \"vcf\";\n  filepath = inp[0].path\n  filename = filepath.split(\"/\").pop()\n  \n  if (filename.lastIndexOf(\".vcf.gz\") != -1) {\n    basename = filename.substr(0,filename.lastIndexOf(\".vcf.gz\"))\n  } else {\n    basename = filename.substr(0,filename.lastIndexOf(\".\"))\n  }\n\n  new_filename = basename + \".\" + sufix + \".\" + sufix_ext;\n\n  if ($job.inputs.compressed) {\n\n  \treturn new_filename + '.gz'\n      \n  } else {\n  \n  \treturn new_filename\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:inheritMetadataFrom": "#input_files"
                        },
                        "id": "#output_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "engineCommand": "cwl-engine.js",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "54cb823ba25a",
                        "dockerPull": "images.sbgenomics.com/ognjenm/vcftools:0.1.14"
                    }
                ],
                "arguments": [
                    {
                        "position": 50,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n      function flatten(array){\n  \n\n  \n  for(i=0;i<array.length;i++) {\n    if (array[i] instanceof Array) {\n    \tarray = array.concat(array[i])\n        array.splice(i, 1)\n        i -= 1\n    }\n  }\n  \n  return array\n  \n}\n  \n  inp = $job.inputs.input_files\n  inp = flatten([].concat( inp ));\n  \n  if (inp.length > 1) {\n     sufix = \"and_more.concat\"\n  } else {\n     sufix = \"concat\"\n  }\n  \n  sufix_ext = \"vcf\";\n  filepath = inp[0].path\n  filename = filepath.split(\"/\").pop()\n  \n  if (filename.lastIndexOf(\".vcf.gz\") != -1) {\n    basename = filename.substr(0,filename.lastIndexOf(\".vcf.gz\"))\n  } else {\n    basename = filename.substr(0,filename.lastIndexOf(\".\"))\n  }\n\n  new_filename = basename + \".\" + sufix + \".\" + sufix_ext;\n\n  return '> ' + new_filename\n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 100,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n      function flatten(array){\n  \n\n  \n  for(i=0;i<array.length;i++) {\n    if (array[i] instanceof Array) {\n    \tarray = array.concat(array[i])\n        array.splice(i, 1)\n        i -= 1\n    }\n  }\n  \n  return array\n  \n}\n  \n  inp = $job.inputs.input_files\n  inp = flatten([].concat( inp ));\n  \n  if (inp.length > 1) {\n     sufix = \"and_more.concat\"\n  } else {\n     sufix = \"concat\"\n  }\n  \n  sufix_ext = \"vcf\";\n  filepath = inp[0].path\n  filename = filepath.split(\"/\").pop()\n  \n  if (filename.lastIndexOf(\".vcf.gz\") != -1) {\n    basename = filename.substr(0,filename.lastIndexOf(\".vcf.gz\"))\n  } else {\n    basename = filename.substr(0,filename.lastIndexOf(\".\"))\n  }\n\n  new_filename = basename + \".\" + sufix + \".\" + sufix_ext;\n\n  if ($job.inputs.compressed) {\n\n  \treturn '&& bgzip -c -f ' + new_filename + ' > ' + new_filename + '.gz'\n      \n  } else {\n    \n    return ''\n  }\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "small_overlap": 0,
                        "pad_missing": true,
                        "input_files": [
                            {
                                "path": "sample1.vcf"
                            },
                            {
                                "path": "sample2.vcf"
                            }
                        ],
                        "file_list": {
                            "secondaryFiles": [],
                            "path": "file_list.ext",
                            "class": "File",
                            "size": 0
                        },
                        "compressed": true,
                        "check_columns": true
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:license": "GNU General Public License version 3.0 (GPLv3)",
                "sbg:links": [
                    {
                        "id": "https://vcftools.github.io",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/vcftools/vcftools",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bioinformatics.oxfordjournals.org/content/27/15/2156",
                        "label": "Publications"
                    },
                    {
                        "id": "https://github.com/vcftools/vcftools/zipball/master",
                        "label": "Download"
                    },
                    {
                        "id": "https://sourceforge.net/p/vcftools/wiki/Home/",
                        "label": "Wiki"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1480431543,
                "sbg:modifiedBy": "ognjenm",
                "sbg:cmdPreview": "vcf-concat sample1.vcf sample2.vcf  > sample1.and_more.concat.vcf  && bgzip -c -f sample1.and_more.concat.vcf > sample1.and_more.concat.vcf.gz",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Added flattens",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/vcftools-0-1-14-demo",
                "y": 759.1713547171139,
                "sbg:toolkitVersion": "0.1.14",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Adam Auton, Petr Danecek, Anthony Marcketta",
                "sbg:latestRevision": 9,
                "x": 1960.000245157885,
                "sbg:createdOn": 1450911615,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "ognjenm",
                    "bix-demo"
                ],
                "sbg:projectName": "VCFtools 0.1.14 - Demo",
                "sbg:toolkit": "VCFtools",
                "sbg:id": "admin/sbg-public-data/vcftools-concat-0-1-14/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911615
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911616
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911617
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911617
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911618
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Added -c option",
                        "sbg:modifiedOn": 1472826063
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Changed info",
                        "sbg:modifiedOn": 1472826160
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Changed concat",
                        "sbg:modifiedOn": 1474591521
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Overhaul done",
                        "sbg:modifiedOn": 1480431144
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Added flattens",
                        "sbg:modifiedOn": 1480431543
                    }
                ]
            },
            "label": "VCFtools Concat",
            "sbg:x": 1960.000245157885,
            "sbg:y": 759.1713547171139
        },
        {
            "id": "#VCFtools_Sort_1",
            "inputs": [
                {
                    "id": "#VCFtools_Sort_1.input_file",
                    "source": [
                        "#VCFtools_Concat_1.output_file"
                    ]
                },
                {
                    "id": "#VCFtools_Sort_1.chromosomal_order",
                    "default": true
                }
            ],
            "outputs": [
                {
                    "id": "#VCFtools_Sort_1.output_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/vcftools-sort-0-1-14/7",
                "label": "VCFtools Sort",
                "description": "VCFtools sort sorts a VCF file.",
                "baseCommand": [
                    "vcf-sort"
                ],
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 2,
                            "prefix": "-p",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Parallel threads",
                        "description": "Change the number of sorts run concurrently to <int>.",
                        "id": "#parallel"
                    },
                    {
                        "sbg:toolDefaultValue": "N/A",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory in MB",
                        "description": "Memory in MB for execution.",
                        "id": "#mem_mb"
                    },
                    {
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 1,
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input file",
                        "description": "Input file (vcf or vcf.gz)",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "id": "#input_file"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Compressed output",
                        "description": "Check to make the output compressed (usually for further processing).",
                        "id": "#compressed"
                    },
                    {
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-c",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Chromosomal order",
                        "description": "Use natural ordering (1,2,10,MT,X) rather then the default (1,10,2,MT,X). This requires                                      new version of the unix \"sort\" command which supports the --version-sort option.",
                        "id": "#chromosomal_order"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Output file",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  filepath = $job.inputs.input_file.path\n\n  filename = filepath.split(\"/\").pop();\n\n  file_dot_sep = filename.split(\".\");\n  file_ext = file_dot_sep[file_dot_sep.length-1];\n\n  new_filename = filename.substr(0,filename.lastIndexOf(\".vcf\")) + \".sorted.vcf\";\n\n  if ($job.inputs.compressed) {\n      new_filename += \".gz\";\n  }\n  \n  return new_filename;\n  \n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "__inherit__": "input_file"
                            },
                            "sbg:inheritMetadataFrom": "#input_file"
                        },
                        "id": "#output_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "engineCommand": "cwl-engine.js",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.parallel) {\n  \treturn $job.inputs.parallel\n  } else {\n    return 1\n  }  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n   }  else {\n      \n      return 1000\n      \n      }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "54cb823ba25a",
                        "dockerPull": "images.sbgenomics.com/ognjenm/vcftools:0.1.14"
                    }
                ],
                "arguments": [
                    {
                        "position": 100,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\n\n  if ($job.inputs.compressed) {\n    \n  \tfilepath = $job.inputs.input_file.path\n\n  \tfilename = filepath.split(\"/\").pop();\n\n  \tfile_dot_sep = filename.split(\".\");\n  \tfile_ext = file_dot_sep[file_dot_sep.length-1];\n\n  \tnew_filename = filename.substr(0,filename.lastIndexOf(\".vcf\")) + \".sorted.vcf\";\n  \treturn '&& bgzip -c -f ' + new_filename + ' > ' + new_filename + '.gz'\n      \n  }\n  \n  \n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 50,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  filepath = $job.inputs.input_file.path\n\n  filename = filepath.split(\"/\").pop();\n\n  file_dot_sep = filename.split(\".\");\n  file_ext = file_dot_sep[file_dot_sep.length-1];\n\n  new_filename = filename.substr(0,filename.lastIndexOf(\".vcf\")) + \".sorted.vcf\";\n  \n  return '> '+new_filename;\n  \n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "parallel": 2,
                        "mem_mb": 100,
                        "input_file": {
                            "path": "sample1.vcf"
                        },
                        "compressed": true,
                        "chromosomal_order": null
                    },
                    "allocatedResources": {
                        "mem": 100,
                        "cpu": 2
                    }
                },
                "sbg:license": "GNU General Public License version 3.0 (GPLv3)",
                "sbg:links": [
                    {
                        "id": "https://vcftools.github.io",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/vcftools/vcftools",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bioinformatics.oxfordjournals.org/content/27/15/2156",
                        "label": "Publications"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1482334199,
                "sbg:modifiedBy": "milan.domazet.sudo",
                "sbg:cmdPreview": "vcf-sort sample1.vcf  > sample1.sorted.vcf  && bgzip -c -f sample1.sorted.vcf > sample1.sorted.vcf.gz",
                "sbg:revision": 7,
                "sbg:revisionNotes": "Added inherit metadata from input.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/vcftools-0-1-14-demo",
                "y": 775.1713142106777,
                "sbg:toolkitVersion": "0.1.14",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Adam Auton, Petr Danecek, Anthony Marcketta",
                "sbg:latestRevision": 7,
                "x": 2124.000146477311,
                "sbg:createdOn": 1450911603,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "ognjenm",
                    "bix-demo",
                    "milan.domazet.sudo"
                ],
                "sbg:projectName": "VCFtools 0.1.14 - Demo",
                "sbg:toolkit": "VCFtools",
                "sbg:id": "admin/sbg-public-data/vcftools-sort-0-1-14/7",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911603
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911604
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911604
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Changed memory, CPU and added parallel",
                        "sbg:modifiedOn": 1472821172
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Compressable output",
                        "sbg:modifiedOn": 1474285644
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Changed --parallel to -p",
                        "sbg:modifiedOn": 1478007439
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Changed CPU",
                        "sbg:modifiedOn": 1480089729
                    },
                    {
                        "sbg:modifiedBy": "milan.domazet.sudo",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Added inherit metadata from input.",
                        "sbg:modifiedOn": 1482334199
                    }
                ]
            },
            "label": "VCFtools Sort",
            "sbg:x": 2124.000146477311,
            "sbg:y": 775.1713142106777
        },
        {
            "id": "#BWA_MEM_Bundle",
            "inputs": [
                {
                    "id": "#BWA_MEM_Bundle.threads",
                    "source": [
                        "#threads"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle.sort_memory",
                    "default": 8
                },
                {
                    "id": "#BWA_MEM_Bundle.sambamba_threads",
                    "source": [
                        "#sambamba_threads"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle.reserved_threads",
                    "default": 20
                },
                {
                    "id": "#BWA_MEM_Bundle.reference_index_tar",
                    "source": [
                        "#BWA_INDEX.indexed_reference"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle.output_format",
                    "default": "SortedBAM"
                },
                {
                    "id": "#BWA_MEM_Bundle.input_reads",
                    "source": [
                        "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle.deduplication",
                    "default": "RemoveDuplicates"
                }
            ],
            "outputs": [
                {
                    "id": "#BWA_MEM_Bundle.samblaster_log"
                },
                {
                    "id": "#BWA_MEM_Bundle.aligned_reads"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/42",
                "label": "BWA MEM Bundle",
                "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Sorted BAM is the default output of BWA MEM. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  cmd = \"/bin/bash -c \\\"\"\n  return cmd\n}",
                        "class": "Expression"
                    },
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
                        "class": "Expression"
                    },
                    "/opt/bwa-0.7.13/bwa",
                    "mem"
                ],
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "3",
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "1",
                                    "2",
                                    "3",
                                    "4"
                                ],
                                "name": "verbose_level"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-v",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Verbose level",
                        "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
                        "id": "#verbose_level"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-Y",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use soft clipping",
                        "description": "Use soft clipping for supplementary alignments.",
                        "id": "#use_soft_clipping"
                    },
                    {
                        "sbg:toolDefaultValue": "17",
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-U",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Unpaired read penalty",
                        "description": "Penalty for an unpaired read pair.",
                        "id": "#unpaired_read_penalty"
                    },
                    {
                        "sbg:toolDefaultValue": "15",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Total memory",
                        "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
                        "id": "#total_memory"
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "sbg:category": "Execution",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Threads",
                        "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
                        "id": "#threads"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "float"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-I",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Specify distribution parameters",
                        "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
                        "id": "#speficy_distribution_parameters"
                    },
                    {
                        "sbg:category": "Execution",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory for BAM sorting",
                        "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
                        "id": "#sort_memory"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-p",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Smart pairing in input FASTQ file",
                        "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
                        "id": "#smart_pairing_in_input_fastq"
                    },
                    {
                        "sbg:toolDefaultValue": "500",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-c",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip seeds with more than INT occurrences",
                        "description": "Skip seeds with more than INT occurrences.",
                        "id": "#skip_seeds"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-P",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip pairing",
                        "description": "Skip pairing; mate rescue performed unless -S also in use.",
                        "id": "#skip_pairing"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-S",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip mate rescue",
                        "description": "Skip mate rescue.",
                        "id": "#skip_mate_rescue"
                    },
                    {
                        "sbg:toolDefaultValue": "1.5",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-r",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Select seeds",
                        "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
                        "id": "#select_seeds"
                    },
                    {
                        "sbg:toolDefaultValue": "20",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-y",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Seed occurrence for the 3rd round",
                        "description": "Seed occurrence for the 3rd round seeding.",
                        "id": "#seed_occurrence_for_the_3rd_round"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-A",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Score for a sequence match",
                        "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
                        "id": "#score_for_a_sequence_match"
                    },
                    {
                        "sbg:category": "Execution",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Sambamba Sort threads",
                        "description": "Number of threads to pass to Sambamba sort, if used.",
                        "id": "#sambamba_threads"
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Sample ID",
                        "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
                        "id": "#rg_sample_id"
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Platform unit ID",
                        "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
                        "id": "#rg_platform_unit_id"
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "454",
                                    "Helicos",
                                    "Illumina",
                                    "Solid",
                                    "IonTorrent"
                                ],
                                "name": "rg_platform"
                            }
                        ],
                        "label": "Platform",
                        "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
                        "id": "#rg_platform"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Median fragment length",
                        "description": "Specify the median fragment length for RG line.",
                        "id": "#rg_median_fragment_length"
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Library ID",
                        "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
                        "id": "#rg_library_id"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Read group ID",
                        "description": "Read group ID",
                        "id": "#rg_id"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Data submitting center",
                        "description": "Specify the data submitting center for RG line.",
                        "id": "#rg_data_submitting_center"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:stageInput": null,
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Reserved number of threads on the instance",
                        "description": "Reserved number of threads on the instance used by scheduler.",
                        "id": "#reserved_threads"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input files",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "label": "Reference Index TAR",
                        "description": "Reference fasta file with BWA index files packed in TAR.",
                        "sbg:fileTypes": "TAR",
                        "id": "#reference_index_tar"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "pacbio",
                                    "ont2d",
                                    "intractg"
                                ],
                                "name": "read_type"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-x",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Sequencing technology-specific settings",
                        "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
                        "id": "#read_type"
                    },
                    {
                        "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
                        "sbg:category": "BWA Read Group Options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Read group header",
                        "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
                        "id": "#read_group_header"
                    },
                    {
                        "sbg:category": "Configuration",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Output SAM/BAM file name",
                        "description": "Name of the output BAM file.",
                        "id": "#output_name"
                    },
                    {
                        "sbg:toolDefaultValue": "[5, 200]",
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-h",
                            "separate": false,
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true
                        },
                        "label": "Output in XA",
                        "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
                        "id": "#output_in_xa"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-V",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output header",
                        "description": "Output the reference FASTA header in the XR tag.",
                        "id": "#output_header"
                    },
                    {
                        "sbg:toolDefaultValue": "SortedBAM",
                        "sbg:category": "Execution",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SAM",
                                    "BAM",
                                    "SortedBAM"
                                ],
                                "name": "output_format"
                            }
                        ],
                        "label": "Output format",
                        "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
                        "id": "#output_format"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-a",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output alignments",
                        "description": "Output all alignments for SE or unpaired PE.",
                        "id": "#output_alignments"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-B",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mismatch penalty",
                        "description": "Penalty for a mismatch.",
                        "id": "#mismatch_penalty"
                    },
                    {
                        "sbg:toolDefaultValue": "19",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-k",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum seed length",
                        "description": "Minimum seed length for BWA MEM.",
                        "id": "#minimum_seed_length"
                    },
                    {
                        "sbg:toolDefaultValue": "30",
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-T",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum alignment score for a read to be output in SAM/BAM",
                        "description": "Minimum alignment score for a read to be output in SAM/BAM.",
                        "id": "#minimum_output_score"
                    },
                    {
                        "sbg:toolDefaultValue": "50",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-m",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mate rescue rounds",
                        "description": "Perform at most INT rounds of mate rescues for each read.",
                        "id": "#mate_rescue_rounds"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-M",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mark shorter",
                        "description": "Mark shorter split hits as secondary.",
                        "id": "#mark_shorter"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-H",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Insert string to output SAM or BAM header",
                        "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
                        "id": "#insert_string_to_header"
                    },
                    {
                        "sbg:category": "Input files",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "Input reads",
                        "description": "Input sequence reads.",
                        "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
                        "id": "#input_reads"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-j",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ignore ALT file",
                        "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
                        "id": "#ignore_alt_file"
                    },
                    {
                        "sbg:toolDefaultValue": "[6,6]",
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-O",
                            "separate": false,
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true
                        },
                        "label": "Gap open penalties",
                        "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
                        "id": "#gap_open_penalties"
                    },
                    {
                        "sbg:toolDefaultValue": "[1,1]",
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-E",
                            "separate": false,
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true
                        },
                        "label": "Gap extension",
                        "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
                        "id": "#gap_extension_penalties"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Filter out secondary alignments",
                        "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
                        "id": "#filter_out_secondary_alignments"
                    },
                    {
                        "sbg:toolDefaultValue": "100",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-d",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Dropoff",
                        "description": "Off-diagonal X-dropoff.",
                        "id": "#dropoff"
                    },
                    {
                        "sbg:toolDefaultValue": "0.50",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-D",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Drop chains fraction",
                        "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
                        "id": "#drop_chains_fraction"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-e",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Discard exact matches",
                        "description": "Discard full-length exact matches.",
                        "id": "#discard_exact_matches"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-W",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Discard chain length",
                        "description": "Discard a chain if seeded bases shorter than INT.",
                        "id": "#discard_chain_length"
                    },
                    {
                        "sbg:toolDefaultValue": "MarkDuplicates",
                        "sbg:category": "Samblaster parameters",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "None",
                                    "MarkDuplicates",
                                    "RemoveDuplicates"
                                ],
                                "name": "deduplication"
                            }
                        ],
                        "label": "PCR duplicate detection",
                        "description": "Use Samblaster for finding duplicates on sequence reads.",
                        "id": "#deduplication"
                    },
                    {
                        "sbg:toolDefaultValue": "[5,5]",
                        "sbg:category": "BWA Scoring options",
                        "required": false,
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-L",
                            "separate": false,
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true
                        },
                        "label": "Clipping penalty",
                        "description": "Penalty for 5'- and 3'-end clipping.",
                        "id": "#clipping_penalty"
                    },
                    {
                        "sbg:toolDefaultValue": "100",
                        "sbg:category": "BWA Algorithm options",
                        "required": false,
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-w",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Band width",
                        "description": "Band width for banded alignment.",
                        "id": "#band_width"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "required": false,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "-C",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Append comment",
                        "description": "Append FASTA/FASTQ comment to SAM output.",
                        "id": "#append_comment"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Samblaster log",
                        "description": "Log file for Samblaster mark duplicates",
                        "sbg:fileTypes": "LOG",
                        "outputBinding": {
                            "glob": "*.samblaster.log"
                        },
                        "id": "#samblaster_log"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Aligned SAM/BAM",
                        "description": "Aligned reads.",
                        "sbg:fileTypes": "SAM, BAM",
                        "outputBinding": {
                            "glob": "{*.sam,*.bam}",
                            "sbg:metadata": {
                                "reference_genome": {
                                    "engine": "#cwl-js-engine",
                                    "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ]
                        },
                        "id": "#aligned_reads"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    }
                ],
                "arguments": [
                    {
                        "position": 111,
                        "prefix": "",
                        "separate": false,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 112,
                        "separate": false,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  suggested_cpus = 8\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  // SortedBAM is considered default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 110,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n     $job.inputs.mark_shorter ? cmd = \"| /opt/samblaster/samblaster -M -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\" : cmd = \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\"\n     return cmd\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    $job.inputs.mark_shorter ? cmd = \"| /opt/samblaster/samblaster -M -r -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\" : cmd = \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\"\n  \treturn cmd\n  }\n  else{\n   return \"\" \n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 1,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  if($job.inputs.rg_id){\n    add_param('ID', $job.inputs.rg_id)\n  }\n  else {\n    add_param('ID', '1')\n  } \n   \n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n    if(read_metadata.platform == 'HiSeq X Ten'){\n      rg_platform = 'Illumina'\n    }\n    else{\n      rg_platform = read_metadata.platform\n    }\n  \tadd_param('PL', rg_platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 101,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 2,
                        "prefix": "-t",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  \n  /*reads_size = 0 \n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  */\n  suggested_threads = 8\n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 10,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  name = ''\n  metadata = [].concat($job.inputs.reference_index_tar)[0].metadata\n  \n  if (metadata && metadata.reference_genome) {\n \tname = metadata.reference_genome\n  }\n  else {\n\treference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  \tname = reference_file.slice(0, -4) // cut .tar extension \n  }\n    \n  return name \t\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 10000,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  cmd = \";declare -i pipe_statuses=(\\\\${PIPESTATUS[*]});len=\\\\${#pipe_statuses[@]};declare -i tot=0;echo \\\\${pipe_statuses[*]};for (( i=0; i<\\\\${len}; i++ ));do if [ \\\\${pipe_statuses[\\\\$i]} -ne 0 ];then tot=\\\\${pipe_statuses[\\\\$i]}; fi;done;if [ \\\\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\\\${pipe_statuses[*]};fi; if [ \\\\$tot -ne 0 ]; then false;fi\\\"\"\n  return cmd\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbose_level": null,
                        "use_soft_clipping": null,
                        "unpaired_read_penalty": null,
                        "total_memory": null,
                        "threads": null,
                        "speficy_distribution_parameters": [],
                        "sort_memory": 0,
                        "smart_pairing_in_input_fastq": null,
                        "skip_seeds": null,
                        "skip_pairing": null,
                        "skip_mate_rescue": null,
                        "select_seeds": null,
                        "seed_occurrence_for_the_3rd_round": null,
                        "score_for_a_sequence_match": null,
                        "sambamba_threads": null,
                        "rg_sample_id": "",
                        "rg_platform_unit_id": "",
                        "rg_platform": null,
                        "rg_median_fragment_length": "",
                        "rg_library_id": "",
                        "rg_id": "rg_id-string-value",
                        "rg_data_submitting_center": "",
                        "reserved_threads": 3,
                        "reference_index_tar": {
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ],
                            "path": "/path/to/reference.b37.fasta.gz.tar",
                            "class": "File",
                            "size": 0
                        },
                        "read_type": null,
                        "read_group_header": "",
                        "output_name": "",
                        "output_in_xa": [],
                        "output_header": null,
                        "output_format": null,
                        "output_alignments": null,
                        "mismatch_penalty": null,
                        "minimum_seed_length": null,
                        "minimum_output_score": null,
                        "mate_rescue_rounds": null,
                        "mark_shorter": false,
                        "insert_string_to_header": null,
                        "input_reads": [
                            {
                                "secondaryFiles": [],
                                "metadata": {
                                    "platform": "HiSeq X Ten",
                                    "sample_id": "dnk_sample",
                                    "paired_end": "2"
                                },
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz",
                                "class": "File",
                                "size": 30000000000
                            },
                            {
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
                            }
                        ],
                        "ignore_alt_file": null,
                        "gap_open_penalties": [],
                        "gap_extension_penalties": [],
                        "filter_out_secondary_alignments": false,
                        "dropoff": null,
                        "drop_chains_fraction": null,
                        "discard_exact_matches": null,
                        "discard_chain_length": null,
                        "deduplication": "MarkDuplicates",
                        "clipping_penalty": [],
                        "band_width": null,
                        "append_comment": null
                    },
                    "allocatedResources": {
                        "mem": 4096,
                        "cpu": 3
                    }
                },
                "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
                "sbg:links": [
                    {
                        "id": "http://bio-bwa.sourceforge.net/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/lh3/bwa",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/bio-bwa/",
                        "label": "Download"
                    },
                    {
                        "id": "http://arxiv.org/abs/1303.3997",
                        "label": "Publication"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
                        "label": "Publication BWA Algorithm"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "appUrl": "/u/vladimirk/bwa-mem-bundle-0-7-13-demo/apps/#vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-mem-bundle-0-7-13/42",
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1496404265,
                "sbg:modifiedBy": "nikola_jovanovic",
                "sbg:revision": 42,
                "sbg:revisionNotes": "Added option for mark shorter on samblaster, related to the mark shorter setting for bwa.",
                "sbg:categories": [
                    "Alignment",
                    "FASTQ-Processing"
                ],
                "sbg:cmdPreview": "/bin/bash -c \" tar -xf reference.b37.fasta.gz.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:rg_id-string-value\\tPL:Illumina\\tSM:dnk_sample' -t 8  reference.b37.fasta.gz  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout 2>LP6005524-DNA_C01_lane_7.sorted.converted.filtered.samblaster.log | /opt/sambamba_v0.6.0 view -t 8 -f bam -l 0 -S /dev/stdin | /opt/sambamba_v0.6.0 sort -t 8 -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin  ;declare -i pipe_statuses=(\\${PIPESTATUS[*]});len=\\${#pipe_statuses[@]};declare -i tot=0;echo \\${pipe_statuses[*]};for (( i=0; i<\\${len}; i++ ));do if [ \\${pipe_statuses[\\$i]} -ne 0 ];then tot=\\${pipe_statuses[\\$i]}; fi;done;if [ \\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\${pipe_statuses[*]};fi; if [ \\$tot -ne 0 ]; then false;fi\"",
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "y": 167.099388020544,
                "sbg:toolkitVersion": "0.7.13",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Heng Li",
                "sbg:validationErrors": [],
                "sbg:latestRevision": 42,
                "x": 995.256956931893,
                "sbg:createdOn": 1458653351,
                "sbg:createdBy": "vladimirk",
                "sbg:contributors": [
                    "bix-demo",
                    "nikola_jovanovic",
                    "vladimirk",
                    "filip_tubic",
                    "bogdang"
                ],
                "sbg:projectName": "BWA MEM Bundle 0.7.13 - Demo",
                "sbg:toolkit": "BWA",
                "sbg:id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/42",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653351
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653365
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653397
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653457
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458735076
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458744323
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460644019
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461676796
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461677982
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461691955
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462799414
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462800334
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465226602
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 13,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465997760
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 14,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465999303
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 15,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466161520
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 16,
                        "sbg:revisionNotes": "Change red port type - FIX.",
                        "sbg:modifiedOn": 1468500423
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 17,
                        "sbg:revisionNotes": "port renamed to reference index tar",
                        "sbg:modifiedOn": 1469448834
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 18,
                        "sbg:revisionNotes": "reference_index_tar renamed in other expressions.",
                        "sbg:modifiedOn": 1469449249
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 19,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470746327
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 20,
                        "sbg:revisionNotes": "SortedBAM is default output type.",
                        "sbg:modifiedOn": 1470747524
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 21,
                        "sbg:revisionNotes": "Fix for single-ended reads.",
                        "sbg:modifiedOn": 1471860342
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 22,
                        "sbg:revisionNotes": "instanceof fix for common filename",
                        "sbg:modifiedOn": 1471864768
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 23,
                        "sbg:revisionNotes": "[]concat(input_reads)",
                        "sbg:modifiedOn": 1471866804
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 24,
                        "sbg:revisionNotes": "SortedBAM default - returned revision.",
                        "sbg:modifiedOn": 1471868494
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 25,
                        "sbg:revisionNotes": "Fix for same common sub-strings.",
                        "sbg:modifiedOn": 1471879715
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 26,
                        "sbg:revisionNotes": "Fix to support single FASTQ input.",
                        "sbg:modifiedOn": 1471880959
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 27,
                        "sbg:revisionNotes": "reads_size for sorter made more robust.",
                        "sbg:modifiedOn": 1472054931
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 28,
                        "sbg:revisionNotes": "FASTQs size use for memory and CPU estimation removed!",
                        "sbg:modifiedOn": 1472056751
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 29,
                        "sbg:revisionNotes": "reads size removed from estimating number of CPUs",
                        "sbg:modifiedOn": 1472057639
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 30,
                        "sbg:revisionNotes": "Added reference_genome metadata field to SAM/BAM.",
                        "sbg:modifiedOn": 1472122448
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 31,
                        "sbg:revisionNotes": "BAM/SAM metadata, reference_genome in the same format as in drop down menu.",
                        "sbg:modifiedOn": 1472126991
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 32,
                        "sbg:revisionNotes": "Added reserved number of threads as an input.",
                        "sbg:modifiedOn": 1476202723
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 33,
                        "sbg:revisionNotes": "added piping command status check",
                        "sbg:modifiedOn": 1477616482
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 34,
                        "sbg:revisionNotes": "BAM index output port removed",
                        "sbg:modifiedOn": 1479314087
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 35,
                        "sbg:revisionNotes": "Support for files with \"HiSeq X Ten\" in platform metadata field",
                        "sbg:modifiedOn": 1479483637
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 36,
                        "sbg:revisionNotes": "fix platform",
                        "sbg:modifiedOn": 1479492159
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 37,
                        "sbg:revisionNotes": "Added RG ID as optional input parameter",
                        "sbg:modifiedOn": 1480437238
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 38,
                        "sbg:revisionNotes": "Description - SortedBAM is default.",
                        "sbg:modifiedOn": 1482241039
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 39,
                        "sbg:revisionNotes": "default threads parameter set to 8",
                        "sbg:modifiedOn": 1484235220
                    },
                    {
                        "sbg:modifiedBy": "filip_tubic",
                        "sbg:revision": 40,
                        "sbg:revisionNotes": "Changed positional argument 10. Now, if reference genome is set, app can use reference_genome value from metadata instead of parsing it from input file name.",
                        "sbg:modifiedOn": 1491823512
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 41,
                        "sbg:revisionNotes": "Added Samblaster log output to be used with MultiQC",
                        "sbg:modifiedOn": 1496148226
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 42,
                        "sbg:revisionNotes": "Added option for mark shorter on samblaster, related to the mark shorter setting for bwa.",
                        "sbg:modifiedOn": 1496404265
                    }
                ]
            },
            "label": "BWA MEM Bundle",
            "scatter": "#BWA_MEM_Bundle.input_reads",
            "sbg:y": 167.099388020544,
            "sbg:x": 995.256956931893
        },
        {
            "id": "#SBG_FASTQ_Quality_Adjuster",
            "inputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.fastq",
                    "source": [
                        "#fastq"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.result"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-fastq-quality-adjuster/13",
                "label": "SBG FASTQ Quality Adjuster",
                "description": "This app detects quality score format used in input FASTQ file. FASTQ quality score is then converted to standard Sanger quality score if conversion is required. It is basically a compact merged version of \"SBG Fastq Quality Detector\" and \"SBG Fastq Quality Converter\", created to speed up the execution of pipelines. Supported source formats are: Solexa, Illumina 1.3, Illumina 1.5 and Illumina 1.8.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n  \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {// no conversion\n\treturn \"echo No conversion\"\n  }\n  else\n  {\n    return \"python sbg_fastq_quality_scale_adjuster.py\"\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:category": "Input",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "sanger",
                                    "illumina18",
                                    "illumina13",
                                    "illumina15",
                                    "solexa"
                                ],
                                "name": "used_quality_scale"
                            }
                        ],
                        "label": "Used quality scale",
                        "description": "Used quality scale of FASTQ reads.",
                        "id": "#used_quality_scale"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Total memory [GB]",
                        "description": "Total memory in GB.",
                        "id": "#total_memory"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 1,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" )   {\n    return \"\"\n  }\n  else\n  {\n    return \"--fastq \" + $job.inputs.fastq.path\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Fastq file",
                        "description": "Input FASTQ file.",
                        "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
                        "id": "#fastq"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Result",
                        "description": "Resulting file in FASTQ format.",
                        "sbg:fileTypes": "FASTQ",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {\n    return $job.inputs.fastq.path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n  {\n\tfile = $job.inputs.fastq.path\n\tfile_split = file.split('.')\n\tbasename = file_split\n  \tif (basename.length > 1)\n    {\n      l_ext = basename.splice(basename.length-1)\n      if (l_ext == 'gz')\n      {\n        basename = basename.slice(0, basename.length-1)\n      }\n    }\n \tretval = basename.concat('std.fastq')\n\treturn retval.join('.').replace(/^.*[\\\\\\/]/, '') + \"*\"\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "Quality scale": "sanger"
                            },
                            "sbg:inheritMetadataFrom": "#fastq"
                        },
                        "id": "#result"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    },
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "filename": "sbg_fastq_quality_scale_adjuster.py",
                                "fileContent": "\"\"\"\nUsage:\n    sbg_fastq_quality_scale_adjuster.py --fastq FILE\n\nOptions:\n    -h, --help          Show this message.\n\n    -f, --fastq FILE    Input FASTQ file.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport gzip\nimport itertools as it\nimport shutil\nimport sys\nfrom math import log10\nfrom subprocess import Popen\n\n\n\nargs = docopt(__doc__, version='1.0')\n\ninput_file = args['--fastq'] \n\nbase_name = input_file[input_file.rfind('/')+1:input_file.rfind('.') if input_file.rfind('.') != -1 else None]\nr_ext = input_file[input_file.rfind('.')+1:] if input_file.rfind('.') else \"\"\nl_ext = base_name.split('.')[-1].lower()\nif l_ext == 'fastq' or l_ext == 'fq':\n    if not r_ext == 'fastq' and not r_ext == 'fq':\n        base_name = base_name[:base_name.rfind('.')]\noutput_file = base_name + '.std.fastq'\n\n\n\"\"\"input and output names defined above\"\"\"\n\nclass myGzipFile(gzip.GzipFile):\n    def __enter__(self, *args, **kwargs):\n        if self.fileobj is None:\n            raise ValueError(\"I/O operation on closed GzipFile object\")\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n\ndef extremes(a, b):\n    if a is False:\n        return b, b\n    return min(a[0], b), max(a[1], b)\n\n\ndef walk_qualities(f, sample_size=1000):\n    for i in xrange(sample_size * 4):\n        try:\n            line = f.next()\n        except StopIteration:\n            return\n        if i % 4 == 3:\n            yield line.rstrip(\"\\n\\r\")\n\n\ndef sniff(path):\n    with open(path, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    opn = myGzipFile if gz else open\n    with opn(path) as f:\n        return get_scale(*map(ord, reduce(extremes, it.chain(*walk_qualities(f)), False)))\n\n\ndef get_scale(ord_min, ord_max):\n    options = {\n        'illumina13': (64, 105),\n        'illumina15': (66, 105),\n        'sanger': (33, 126),\n        'solexa': (59, 105),\n    }\n    fits = [(k, v) for k, v in options.iteritems() if v[0] <= ord_min and v[1] >= ord_max]\n    if not fits:\n        message = 'Quality scale for range (%s, %s) not found.' % (ord_min, ord_max)\n        raise Exception(message)\n        # Return narrowest range\n    return reduce(lambda a, b: a if a[1][1] - a[1][0] < b[1][1] - b[1][0] else b, fits)[0]\n\ndef qsolexa(x):\n    return chr(int(round(10 * log10(10.0**((ord(x)-64)/10.0)+1))) + 33)\n\n\ndef qillumina13(x):\n    return chr(ord(x) - 31)\n\n\ndef qillumina15(x):\n    return chr(ord(x) - 31) if ord(x)-64 > 2 else chr(33)\n\n\ndef qillumina18(x):\n    return x\n\n\n\"\"\"detect quality scale format\"\"\"\n\nmeta_qual = sniff(input_file)\n\n\n\"\"\"adjust quality scale if needed\"\"\"\n\nif meta_qual == 'illumina13':\n    proc = qillumina13\nelif meta_qual == 'illumina15':\n    proc = qillumina15\nelif meta_qual == 'solexa':\n    proc = qsolexa\nelse:\n    proc = None\n\nif proc == qsolexa: \n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    open_gz = myGzipFile if gz else open\n    with open(output_file, 'w') as out:\n        for i, line in enumerate(open_gz(input_file)):\n            if i % 4 == 3:\n                line = line.strip()\n                converted = ''.join(map(proc, line))\n                out.write(converted + '\\n')\n            else:\n                out.write(line)\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelif proc is not None: #seqtk converter from illumina13-15\n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    f.close()\n    if gz:#gunzip file to temp.fastq\n        temp_file = 'temp.fastq'\n        \n        inF = gzip.GzipFile(input_file, 'rb')\n        outF = file(temp_file, 'wb')\n        \n        newline = ''\n        for lines in inF:\n            outF.write(newline + lines.rstrip('\\n'))\n            newline = '\\n'\n            \n        inF.close()\n        outF.close()\n\n    else:\n        temp_file = input_file\n\n    cmd = ['seqtk','seq','-Q64','-V',temp_file,'>',output_file]\n    with open(output_file, 'w') as out:\n        p = Popen(cmd, stdout = out)\n        p.communicate()\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelse:\n    if input_file.rfind(\".gz\") == len(input_file) - 3:\n        output_file = output_file + \".gz\"\n    #shutil.copyfile(input_file, output_file)\n    #os.symlink(input_file, output_file)\n    os.rename(input_file, output_file)\n    contents = \"Original fastq quality scale format was illumina18. No conversion performed.\\n\"\n\nsys.stderr.write(contents) #Write conversion to error log"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return 1000\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/bogdang/sbg_quality_scale_adjuster:1.0"
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "used_quality_scale": null,
                        "total_memory": 9,
                        "fastq": {
                            "secondaryFiles": [],
                            "metadata": {
                                "Quality scale": "sanger"
                            },
                            "path": "/path/to/test.1.fastq",
                            "class": "File",
                            "size": 0
                        }
                    },
                    "allocatedResources": {
                        "mem": 9216,
                        "cpu": 1
                    }
                },
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/23",
                        "sbg:modifiedOn": 1470927070
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/24",
                        "sbg:modifiedOn": 1472559664
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/25",
                        "sbg:modifiedOn": 1474546255
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "'sanger': (33, 74) instead 'sanger': (33, 126)",
                        "sbg:modifiedOn": 1475084132
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "sanger 33:92",
                        "sbg:modifiedOn": 1475231421
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "seqtk for converting from illumina13-15",
                        "sbg:modifiedOn": 1475234050
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "fix for seqtk conversion from .gz files",
                        "sbg:modifiedOn": 1478274820
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Without seqtk",
                        "sbg:modifiedOn": 1478277013
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "fix seqtk for .gz files",
                        "sbg:modifiedOn": 1478300733
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Support for files named filename.fq.fastq",
                        "sbg:modifiedOn": 1481123041
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "No conversion if sanger or illumina18 quality scale set in metadata",
                        "sbg:modifiedOn": 1481290093
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "fix",
                        "sbg:modifiedOn": 1481448894
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "Added detection mode and switched to python3",
                        "sbg:modifiedOn": 1495706394
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 13,
                        "sbg:revisionNotes": "Revert to rev 11",
                        "sbg:modifiedOn": 1497438325
                    }
                ],
                "sbg:modifiedBy": "bogdang",
                "sbg:cmdPreview": "python sbg_fastq_quality_scale_adjuster.py  --fastq /path/to/test.1.fastq",
                "sbg:revision": 13,
                "sbg:revisionNotes": "Revert to rev 11",
                "sbg:categories": [
                    "Converters",
                    "FASTQ-Processing"
                ],
                "y": 172.50462351142033,
                "sbg:toolkit": "SBGTools",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:latestRevision": 13,
                "x": 334.66669267018585,
                "sbg:createdOn": 1470927070,
                "sbg:createdBy": "vladimirk",
                "sbg:contributors": [
                    "vladimirk",
                    "bogdang"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:modifiedOn": 1497438325,
                "sbg:id": "admin/sbg-public-data/sbg-fastq-quality-adjuster/13",
                "sbg:project": "bix-demo/sbgtools-demo"
            },
            "label": "SBG FASTQ Quality Adjuster",
            "scatter": "#SBG_FASTQ_Quality_Adjuster.fastq",
            "sbg:y": 172.50462351142033,
            "sbg:x": 334.66669267018585
        },
        {
            "id": "#Sambamba_Merge",
            "inputs": [
                {
                    "id": "#Sambamba_Merge.bams",
                    "source": [
                        "#BWA_MEM_Bundle.aligned_reads"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#Sambamba_Merge.merged_bam"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sambamba-merge-0-5-9/18",
                "label": "Sambamba Merge",
                "description": "Sambamba Merge is used for merging several sorted BAM files into one. The sorting order of all the files must be the same, and it is maintained in the output file.",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  comm=''\n  if(in_var instanceof Array) // Always true\n  {\n    if(in_var.length==1)\n    {\n      comm+='cp '\n      \n    }\n  \telse if(in_var.length>1)\n  \t{\n    \n    \tcomm+='/opt/sambamba_0.5.9/sambamba_v0.5.9 merge '\n    \tif($job.inputs.num_of_threads)\n  \t\t{\n    \t\tcomm+=' -t '\n    \t\tcomm+=$job.inputs.num_of_threads\n  \t\t}\n  \t\tif($job.inputs.compression_level)\n  \t\t{\n   \t\t\tcomm+=' -l '\n    \t\tcomm+=$job.inputs.compression_level\n  \t\t}\n   \t\t\n    }\n  \n  \t\n\n  }\n  return comm\n}",
                        "class": "Expression"
                    }
                ],
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Number of threads reserved on the instance",
                        "description": "Number of threads reserved on the instance passed to the scheduler (number of jobs).",
                        "id": "#reserved_threads"
                    },
                    {
                        "sbg:category": "Merge",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Number of threads to use",
                        "description": "Number of threads to use for compression/decompression.",
                        "id": "#num_of_threads"
                    },
                    {
                        "sbg:toolDefaultValue": "1024",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory in MB",
                        "description": "Memory in MB.",
                        "id": "#mem_mb"
                    },
                    {
                        "sbg:category": "Merge",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Compression level",
                        "description": "Level of compression for merged BAM file, number from 0 to 9.",
                        "id": "#compression_level"
                    },
                    {
                        "sbg:category": "Merge",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 5,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "BAM files",
                        "description": "Input BAM files.",
                        "sbg:fileTypes": "BAM",
                        "id": "#bams"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Merged bam",
                        "description": "Merged bam.",
                        "sbg:fileTypes": "BAM",
                        "outputBinding": {
                            "glob": "*.bam",
                            "sbg:inheritMetadataFrom": "#bams",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ]
                        },
                        "id": "#merged_bam"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.reserved_threads) {\n    \n    return $job.inputs.reserved_threads\n    \n  } else if ($job.inputs.num_of_threads) {\n    \n    return $job.inputs.num_of_threads\n    \n  } else {\n    \n    return 1\n  }\n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
                    }
                ],
                "arguments": [
                    {
                        "position": 10,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  comm=''\n  if(in_var.length==1)\n  {\n  \tcomm+='. '\n  \n  \tif(in_var[0].secondaryFiles!=undefined && in_var[0].secondaryFiles.length>0)\n  \t{\n    \t comm+='| cp '\n    \t comm+=in_var[0].secondaryFiles[0].path\n    \t comm+=' . '\n  \t}\n  }\n  return comm\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 5,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\n  function common_end(strs) {\n  \n  \t// Find minimum length of file name\n  \n  \tls = [];\n    whole = [];\n\tfor (i=0;i<strs.length;i++){\n  \t\tls = ls.concat(strs[i].path.split('/').pop().length);\n        whole = whole.concat(strs[i].path.length);\n  \t}\n \tl = Math.min.apply(Math,ls);\n  \n  \t// Loop from the end through characters and check if they are the same for all\n  \n \tind = 0;\n \tflag = 0;\n \tfor (i=1;i<=l;i++){\n    \tfor (j=1;j<strs.length;j++){\n      \t\tif (strs[0].path[whole[0]-i]!=strs[j].path[whole[j]-i]){\n        \tflag = 1;\n        \tbreak\n      \t\t}\n   \t\t}\n   \t \tif (flag == 1){\n   \t \t  \tbreak\n   \t    } else {\n      \t\tind = ind + 1;\n        }\n  \t }\n  \n  // Assign and return longest ending common substring\n  if (ind>0) {\n  \tcomstr = strs[0].path.slice(-ind);\n  } else {\n    comstr = 'different_extensions'\n  }\n  \n  return comstr\n  \n  }\n  \n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  prefix=''\n  \n  if(in_var.length==1) { \n    return '' // Input will be just passed to output\n  }else if (in_var[0].metadata){\n \t   if (\"sample_id\" in in_var[0].metadata){   \n  \t\t prefix = in_var[0].metadata[\"sample_id\"];      \n   \t    } else {\n   \t\t  prefix = 'sample_unknown';\n        }\n   \n  }else {\n    prefix = 'sample_unknown';   \n  }\n  \n  // Create joint name and add the merged suffix\n  joint_name = prefix + '_' + common_end(in_var);\n  name = joint_name.split('.').slice(0,-1).join('.') + '.merged.bam'\n  \n  \n  \n  return name\n  \n}\n\n\n",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "reserved_threads": 2,
                        "num_of_threads": 6,
                        "mem_mb": 2,
                        "compression_level": null,
                        "bams": [
                            {
                                "secondaryFiles": [],
                                "metadata": {
                                    "sample_id": "testmeta"
                                },
                                "path": "/path/to/uuu_bams.bam",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/uyyy_bams.bam",
                                "class": "File",
                                "size": 0
                            }
                        ]
                    },
                    "allocatedResources": {
                        "mem": 2,
                        "cpu": 2
                    }
                },
                "sbg:license": "GNU General Public License v2.0 only",
                "sbg:links": [
                    {
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/lomereiter/sambamba",
                        "label": "Source code"
                    },
                    {
                        "id": "https://github.com/lomereiter/sambamba/wiki",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9",
                        "label": "Download"
                    },
                    {
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
                        "label": "Publication"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1476706820,
                "sbg:modifiedBy": "vladimirk",
                "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 merge  -t 6  /path/to/uuu_bams.bam  /path/to/uyyy_bams.bam  testmeta__bams.merged.bam",
                "sbg:revision": 18,
                "sbg:revisionNotes": "Added reserved number of threads.",
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:project": "bix-demo/sambamba-0-5-9-demo",
                "y": -316.91665898097824,
                "sbg:toolkitVersion": "0.5.9",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Artem Tarasov",
                "sbg:latestRevision": 18,
                "x": 1456.3334305021522,
                "sbg:createdOn": 1458920412,
                "sbg:createdBy": "nevenam.sudo",
                "sbg:contributors": [
                    "nevenam",
                    "ognjenm",
                    "vladimirk",
                    "nevenam.sudo"
                ],
                "sbg:projectName": "Sambamba 0.5.9 - Demo",
                "sbg:toolkit": "Sambamba",
                "sbg:id": "admin/sbg-public-data/sambamba-merge-0-5-9/18",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920412
                    },
                    {
                        "sbg:modifiedBy": "nevenam.sudo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920459
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462963630
                    },
                    {
                        "sbg:modifiedBy": "nevenam",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462963660
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1468849940
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Changed to common name",
                        "sbg:modifiedOn": 1470679574
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Smart naming introduced",
                        "sbg:modifiedOn": 1470752287
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Corrected single file case",
                        "sbg:modifiedOn": 1470753233
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Changed glob",
                        "sbg:modifiedOn": 1470753950
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Updated sample id tag",
                        "sbg:modifiedOn": 1470756561
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Added inherit metadata",
                        "sbg:modifiedOn": 1470757408
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Added support for receiving bams as list inside list.",
                        "sbg:modifiedOn": 1472994215
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "Glob returns *.bam",
                        "sbg:modifiedOn": 1473000652
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 13,
                        "sbg:revisionNotes": "Added support for input.bams received as list of one-element-lists.",
                        "sbg:modifiedOn": 1473071971
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 14,
                        "sbg:revisionNotes": "Added protection from null (10)",
                        "sbg:modifiedOn": 1473257751
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 15,
                        "sbg:revisionNotes": "Returned revision that accepts list of one-element lists.",
                        "sbg:modifiedOn": 1473424164
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 16,
                        "sbg:revisionNotes": "Added resource parameters",
                        "sbg:modifiedOn": 1475064412
                    },
                    {
                        "sbg:modifiedBy": "ognjenm",
                        "sbg:revision": 17,
                        "sbg:revisionNotes": "Changed mem error",
                        "sbg:modifiedOn": 1475064631
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 18,
                        "sbg:revisionNotes": "Added reserved number of threads.",
                        "sbg:modifiedOn": 1476706820
                    }
                ]
            },
            "label": "Sambamba Merge",
            "sbg:x": 1456.3334305021522,
            "sbg:y": -316.91665898097824
        },
        {
            "id": "#SBG_Html2b64",
            "inputs": [
                {
                    "id": "#SBG_Html2b64.input_file",
                    "source": [
                        "#FastQC.report_zip"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Html2b64.b64html"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-html2b64/9",
                "label": "SBG Html2b64",
                "description": "Tool for converting HTML reports of FastQC, SnpEff, MultiQC (simple report only) and ChimeraScan to b64html so it can easily be displayed on SBG platform.",
                "baseCommand": [
                    "python",
                    "sbg_html_to_b64.py"
                ],
                "inputs": [
                    {
                        "sbg:category": "File input.",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input file",
                        "description": "Compressed archive.",
                        "sbg:fileTypes": "ZIP, HTML",
                        "id": "#input_file"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "B64html",
                        "description": "Output file, b64html.",
                        "sbg:fileTypes": "HTML, B64HTML",
                        "outputBinding": {
                            "glob": "*b64html",
                            "sbg:inheritMetadataFrom": "#input_file"
                        },
                        "id": "#b64html"
                    }
                ],
                "requirements": [
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "filename": "sbg_html_to_b64.py",
                                "fileContent": "\"\"\"\nUsage:\n    sbg_html_to_b64.py --input FILE [--select FILE]\n\nDescription:\n    This tool is used for conversion of html file to b64 html file so it can be easily displayed in browsers.\n\nOptions:\n    -h, --help      Show this help message and exit. (For third class of tools it's required to put\n                    this option).\n\n    -v, --version   Show version and exit.\n\n    --input FILE    Input file is archive containing html and all other files included in the html file(images, etc).\n\n    --select FILE If we wish to select specific html file from folder that we wish to parse.\n\nExamples:\n    python sbg_html_to_b64.py --input sample_fastqc.zip\n\"\"\"\n\nimport os\nfrom docopt import docopt\nimport os.path\nimport base64\nimport mimetypes\nfrom bs4 import BeautifulSoup\nfrom path import Path\nfrom subprocess import call, check_output\nimport re\n\n\ndef dataurl(data, img=False, mime=None):\n    isfile = os.path.isfile(data)\n    if not isfile and not mime:\n        raise Exception('Mimetype must be provided when encoding data is not a valid file path.')\n    if not mime:\n        mimetypes.init()\n        mime, enc = mimetypes.guess_type(os.path.join('file://', data))\n        if mime is None:\n            raise Exception('rfc2397: failed to determine file type')\n    if isfile:\n        with open(data, 'r') as fpp:\n            data = fpp.read()\n    if not img:\n        return 'data:%s;base64,%s' % (mime, base64.b64encode(data.encode(encoding=\"utf-8\", errors=\"ignore\")))\n    else:\n        return 'data:%s;base64,%s' % (mime, base64.b64encode(data))\n\n\ndef compact_html(html_file):\n    with open(html_file) as f:\n        html = f.read()\n\n    if 'snpEff_summary' in html_file:\n        for l in html.split('\\n'):\n            if str(l).startswith('<a name'):\n                html = html.replace(str(l), str(l) + '</a>')\n        html = html.replace('<p>', '<p></p>')\n        html = html[:-358]\n        soup = BeautifulSoup(html, \"html5lib\")\n\n        js = \"javascript: void(0); document.getElementById('%s').scrollIntoView(true);\"\n        for anchor in soup.findAll('a'):\n            if 'href' in str(anchor):\n                if anchor['href'].startswith('#'):\n                    anchor['href'] = js % anchor['href'][1:]\n                else:\n                    anchor.decompose()\n            else:\n                anchor['id'] = anchor['name']\n\n        return soup.prettify()\n\n    else:\n        html = html.replace('&middot;', '.')\n        html = html.replace('&raquo;', '>>')\n        html = html.replace('&ge;', '>=')\n        html = html.replace('&gt;', '>')\n        html = html.replace('&lt;', '<')\n        html = html.replace('\\xab', '<<')\n        html = html.replace('\\xbb', '>>')\n        html = html.replace('\\xc2', '')\n        html = html.replace('&le;', '<=')\n        html = html.replace('&mdash;', '--')\n        #html = re.sub(re.compile(\"/\\*.*?\\*/\", re.DOTALL), \"\", html)\n        base_dir = os.path.split(html_file)[0]\n        soup = BeautifulSoup(html, \"html5lib\")\n        for img in soup.findAll('img'):\n            if img['src'].find('data:') == 0:\n                durl_img = img['src']\n            else:\n                durl_img = dataurl(os.path.join(base_dir, img['src']), img=True)\n            img['src'] = durl_img\n        return soup.prettify()\n\n\ndef html_to_dataurl(html_file):\n    return dataurl(compact_html(html_file), img=False, mime='text/html')\n\nif __name__ == \"__main__\":\n    args = docopt(__doc__, version='1.0')\n    filename = args.get('--input')\n\n    # unzipping the archive\n    if Path(filename).ext == '.zip':\n        cmd = [\"unzip\", filename, \"-d\", \"./unzip\"]\n        call(cmd)\n\n        if args.get('--select'):\n            selected_file = args.get('--select')\n            filepath = \"./unzip/\" + args.get('--select')\n            if os.path.isfile(filepath):\n                html_file = filepath\n                b64_html = selected_file + '.b64html'\n            else:\n                raise Exception(\"File not present!\")\n        else:\n            html_file = check_output([\"find\", \"./unzip\", \"-iname\", \"*.html\"]).split('\\n')[:-1]\n            if len(html_file) == 1:\n                b64_html = Path(filename).namebase + '.b64html'\n                html_file = html_file[0]                                # conversion from list to string\n            else:\n                b64_html = [x.split('/')[-1] + '.b64html' for x in html_file]\n    else:\n        html_file = filename\n        b64_html = Path(filename).namebase + '.b64html'\n\n    # check if we need to process single or list of html files. if it is a single file then html_file is type string\n    if type(html_file) is str:\n        with open(b64_html, 'w') as fp:\n            fp.write(html_to_dataurl(html_file))\n    elif type(b64_html) is list:\n        for i, elem in enumerate(b64_html):\n            with open(elem, 'w') as fp:\n                print(html_file[i])\n                fp.write(html_to_dataurl(html_file[i]))\n    else:\n        raise Exception('This is not good.')"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "8c35d2a2d8d1",
                        "dockerPull": "images.sbgenomics.com/medjo/sbg-html:1.0"
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "input_file": {
                            "secondaryFiles": [],
                            "path": "input_file.ext",
                            "class": "File",
                            "size": 0
                        }
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911294
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911294
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459963571
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "MulitQC, ChimeraScan added",
                        "sbg:modifiedOn": 1496315469
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1496317247
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1496670071
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "bug fixed",
                        "sbg:modifiedOn": 1496673165
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1496673994
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "data errors=ignore added",
                        "sbg:modifiedOn": 1503051959
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Difference between img and html in dataurl.",
                        "sbg:modifiedOn": 1503584574
                    }
                ],
                "sbg:modifiedBy": "medjo",
                "sbg:cmdPreview": "python sbg_html_to_b64.py",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Difference between img and html in dataurl.",
                "sbg:categories": [
                    "Converters",
                    "Plotting-and-Rendering"
                ],
                "y": 318.33341738913094,
                "sbg:toolkitVersion": "1.0",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Seven Bridges",
                "sbg:latestRevision": 9,
                "x": 655.0001538594616,
                "sbg:createdOn": 1450911294,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "medjo",
                    "bix-demo"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:modifiedOn": 1503584574,
                "sbg:toolkit": "SBGTools",
                "sbg:id": "admin/sbg-public-data/sbg-html2b64/9",
                "sbg:project": "bix-demo/sbgtools-demo"
            },
            "label": "SBG Html2b64",
            "scatter": "#SBG_Html2b64.input_file",
            "sbg:y": 318.33341738913094,
            "sbg:x": 655.0001538594616
        },
        {
            "id": "#GATK_IndexFeatureFile_7",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_7.feature_file",
                    "source": [
                        "#known_indels_1000g_bqsr"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_7.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_7.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 670.0000501871125,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 938.3334921598489,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 938.3334921598489,
            "sbg:y": 670.0000501871125
        },
        {
            "id": "#GATK_IndexFeatureFile_1",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_1.feature_file",
                    "source": [
                        "#mills"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_1.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_1.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 843.2408910953022,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 943.5723227357454,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 943.5723227357454,
            "sbg:y": 843.2408910953022
        },
        {
            "id": "#GATK_IndexFeatureFile",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile.feature_file",
                    "source": [
                        "#dbsnp"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 1005.7150057838353,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 943.3344084819576,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 943.3344084819576,
            "sbg:y": 1005.7150057838353
        },
        {
            "id": "#GATK_CollectAlignmentSummaryMetrics",
            "inputs": [
                {
                    "id": "#GATK_CollectAlignmentSummaryMetrics.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_CollectAlignmentSummaryMetrics.input_bam",
                    "source": [
                        "#Sambamba_Merge.merged_bam"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_CollectAlignmentSummaryMetrics.summary_metrics"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-collectalignmentsummarymetrics/7",
                "label": "GATK CollectAlignmentSummaryMetrics",
                "description": "Produces from a SAM/BAM/CRAM file containing summary alignment metrics.\n\n###**Overview**  \n\nCollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.\n\n###**Inputs**  \nA BAM or SAM file.\n\n###**Outputs**  \nAn alignment summary file. \n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         CollectAlignmentSummaryMetrics \\  \n         --reference reference.fasta \\\n         --input input.bam \\\n         --output summary_metrics.txt\n\n###**Common issues**\n\n1) BAM file - Sort order should be coordinate based.\n2) Reference sequence file - Note that while this argument is not required, without it only a small subset of the metrics will be calculated. If reference sequence file is used, sequence index and dictionary are required. This tool requires the exact same FASTA file as the one to which raw reads were aligned.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "CollectAlignmentSummaryMetrics"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "position": 6,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Verbosity",
                        "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "position": 4,
                            "prefix": "--VALIDATION_STRINGENCY",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency",
                        "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#validation_stringency"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 9,
                            "prefix": "--STOP_AFTER",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Stop after",
                        "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
                        "id": "#stop_after"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "File inputs",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 3,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Reference sequence",
                        "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated. If reference sequence file is used, sequence index and dictionary are required. This tool requires the exact same FASTA file as the one to which raw reads were aligned. Default value: null.",
                        "sbg:fileTypes": "FASTA",
                        "id": "#reference"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 4,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Quiet",
                        "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "id": "#quiet"
                    },
                    {
                        "sbg:altPrefix": "-LEVEL",
                        "sbg:toolDefaultValue": "ALL_READS",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "position": 8,
                            "prefix": "--METRIC_ACCUMULATION_LEVEL",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Metric accumulation level",
                        "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "id": "#metric_accumulation_level"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 4,
                            "prefix": "--MAX_RECORDS_IN_RAM",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Max records in RAM",
                        "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
                        "id": "#max_records_in_ram"
                    },
                    {
                        "sbg:toolDefaultValue": "100000",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 9,
                            "prefix": "--MAX_INSERT_SIZE",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Max insert size",
                        "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
                        "id": "#max_insert_size"
                    },
                    {
                        "sbg:altPrefix": "-BS",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 8,
                            "prefix": "--IS_BISULFITE_SEQUENCED",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Is bisulfite sequenced",
                        "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "id": "#is_bisulfite_sequenced"
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "File inputs",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input file",
                        "description": "Input SAM or BAM file.  Required. Note: Sort order should be coordinate based.",
                        "sbg:fileTypes": "BAM, SAM",
                        "id": "#input_bam"
                    },
                    {
                        "sbg:altPrefix": "-gcs_retries",
                        "sbg:toolDefaultValue": "20",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--gcs_max_retries",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "GCS Max Retries",
                        "description": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection.",
                        "id": "#gcs_max_retries"
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 4,
                            "prefix": "--COMPRESSION_LEVEL",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Compression level",
                        "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
                        "id": "#compression_level"
                    },
                    {
                        "sbg:altPrefix": "-AS",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ASSUME_SORTED",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Assume sorted",
                        "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "id": "#assume_sorted"
                    },
                    {
                        "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT",
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ],
                        "inputBinding": {
                            "position": 8,
                            "prefix": "--ADAPTER_SEQUENCE",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Adapter sequence",
                        "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "id": "#adapter_sequence"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Summary metrics",
                        "description": "File to which the output will be written.",
                        "sbg:fileTypes": "TXT",
                        "outputBinding": {
                            "glob": "*.summary_metrics.txt",
                            "sbg:inheritMetadataFrom": "#input_bam"
                        },
                        "id": "#summary_metrics"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 3,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = [].concat($job.inputs.input_bam)[0].path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": "INFO",
                        "validation_stringency": null,
                        "stop_after": null,
                        "reference": {
                            "path": "/root/directory/example.fasta"
                        },
                        "quiet": true,
                        "metric_accumulation_level": null,
                        "memory_per_job": 2048,
                        "max_records_in_ram": null,
                        "max_insert_size": null,
                        "is_bisulfite_sequenced": 5.480351658898888,
                        "input_bam": {
                            "path": "/root/folder/example.bam"
                        },
                        "gcs_max_retries": 7,
                        "compression_level": null,
                        "assume_sorted": true,
                        "adapter_sequence": null
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/14",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275149,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" CollectAlignmentSummaryMetrics --input /root/folder/example.bam --output example.summary_metrics.txt",
                "sbg:revision": 7,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/14",
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification",
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": -444.3334670712571,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 7,
                "x": 1772.0003820657791,
                "sbg:createdOn": 1500373187,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-collectalignmentsummarymetrics/7",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/7",
                        "sbg:modifiedOn": 1500373187
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/8",
                        "sbg:modifiedOn": 1500640338
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/9",
                        "sbg:modifiedOn": 1500887421
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/10",
                        "sbg:modifiedOn": 1502718034
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/11",
                        "sbg:modifiedOn": 1503405173
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/12",
                        "sbg:modifiedOn": 1504105710
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/13",
                        "sbg:modifiedOn": 1504272977
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/14",
                        "sbg:modifiedOn": 1504275149
                    }
                ]
            },
            "label": "GATK CollectAlignmentSummaryMetrics",
            "sbg:x": 1772.0003820657791,
            "sbg:y": -444.3334670712571
        },
        {
            "id": "#GATK_IndexFeatureFile_4",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_4.feature_file",
                    "source": [
                        "#omni_1000g"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_4.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_4.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": -602.7122842091561,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 2454.28655830833,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 2454.28655830833,
            "sbg:y": -602.7122842091561
        },
        {
            "id": "#GATK_IndexFeatureFile_2",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_2.feature_file",
                    "source": [
                        "#hapmap"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_2.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_2.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": -413.18855401629384,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 2455.715185471977,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 2455.715185471977,
            "sbg:y": -413.18855401629384
        },
        {
            "id": "#GATK_IndexFeatureFile_3",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_3.feature_file",
                    "source": [
                        "#phase1_snp_1000g"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_3.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_3.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": -232.23603217744932,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 2463.572363518568,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 2463.572363518568,
            "sbg:y": -232.23603217744932
        },
        {
            "id": "#GATK_IndexFeatureFile_5",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_5.feature_file",
                    "source": [
                        "#INDEL_GATK_VariantRecalibrator.recal_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_5.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_5.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 402.16542125405516,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 3063.811238148921,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 3063.811238148921,
            "sbg:y": 402.16542125405516
        },
        {
            "id": "#GATK_IndexFeatureFile_6",
            "inputs": [
                {
                    "id": "#GATK_IndexFeatureFile_6.feature_file",
                    "source": [
                        "#SNP_GATK_VariantRecalibrator.recal_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndexFeatureFile_6.output_with_index"
                },
                {
                    "id": "#GATK_IndexFeatureFile_6.index"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "label": "GATK IndexFeatureFile",
                "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/root/gatk.jar",
                    "IndexFeatureFile"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-F",
                        "sbg:stageInput": "link",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--feature_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Feature file (eg",
                        "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format \n                              Required.",
                        "id": "#feature_file"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Output file with index",
                        "description": "Output file with index.",
                        "sbg:fileTypes": "VCF, BED, RECAL",
                        "outputBinding": {
                            "glob": "{*.vcf,*.bed,*.recal}",
                            "sbg:inheritMetadataFrom": "#feature_file",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#output_with_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Index file",
                        "description": "Index file",
                        "sbg:fileTypes": "IDX",
                        "outputBinding": {
                            "glob": "*.idx"
                        },
                        "id": "#index"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn $job.inputs.feature_file.path.split('/').slice(-1)[0] + '.idx'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "feature_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/feature_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "QUIET": true
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504275173,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar IndexFeatureFile --feature_file /path/to/feature_file.ext --output feature_file.ext.idx",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 199.308098129753,
                "sbg:toolkitVersion": "Alpha",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 9,
                "x": 3063.810668619895,
                "sbg:createdOn": 1500296617,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/9",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
                        "sbg:modifiedOn": 1500296617
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
                        "sbg:modifiedOn": 1500367649
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
                        "sbg:modifiedOn": 1500640357
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
                        "sbg:modifiedOn": 1500887430
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
                        "sbg:modifiedOn": 1503405190
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
                        "sbg:modifiedOn": 1504105732
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
                        "sbg:modifiedOn": 1504108418
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
                        "sbg:modifiedOn": 1504109513
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
                        "sbg:modifiedOn": 1504273463
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
                        "sbg:modifiedOn": 1504275173
                    }
                ]
            },
            "label": "GATK IndexFeatureFile",
            "sbg:x": 3063.810668619895,
            "sbg:y": 199.308098129753
        },
        {
            "id": "#SBG_FASTA_Indices",
            "inputs": [
                {
                    "id": "#SBG_FASTA_Indices.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_FASTA_Indices.fasta_reference"
                },
                {
                    "id": "#SBG_FASTA_Indices.fasta_index"
                },
                {
                    "id": "#SBG_FASTA_Indices.fasta_dict"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-fasta-indices/5",
                "label": "SBG FASTA Indices",
                "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
                "baseCommand": [
                    "samtools",
                    "faidx"
                ],
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input files",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "FASTA file",
                        "description": "FASTA file to be indexed",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory in megabytes required for each execution of the tool.",
                        "id": "#memory_per_job"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Reference",
                        "sbg:fileTypes": "FASTA",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  return $job.inputs.reference.path.split('/').pop()\n}",
                                "class": "Expression"
                            },
                            "sbg:inheritMetadataFrom": "#reference",
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "id": "#fasta_reference"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "FASTA Index",
                        "sbg:fileTypes": "FAI",
                        "outputBinding": {
                            "glob": "*.fai"
                        },
                        "id": "#fasta_index"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "FASTA Dictionary",
                        "sbg:fileTypes": "DICT",
                        "outputBinding": {
                            "glob": "*.dict"
                        },
                        "id": "#fasta_dict"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job)return $job.inputs.memory_per_job + 500\n  else return 2548\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "b177f5bd06db",
                        "dockerPull": "images.sbgenomics.com/nikola_jovanovic/samtoolspicard:1.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 1,
                        "prefix": "&&",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  memory = '2048'\n  if ($job.inputs.memory_per_job){\n    memory = $job.inputs.memory_per_job\n  }\n  return 'java -Xmx' + memory + 'M -jar /opt/picard.jar CreateSequenceDictionary R=' + $job.inputs.reference.path + ' O=' + $job.inputs.reference.path.split('.').slice(0,-1).join() + '.dict'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "reference": {
                            "secondaryFiles": [],
                            "path": "/path/to/reference.ext",
                            "class": "File",
                            "size": 0
                        },
                        "memory_per_job": 10
                    },
                    "allocatedResources": {
                        "mem": 510,
                        "cpu": 1
                    }
                },
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911283
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911283
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458655251
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458655509
                    },
                    {
                        "sbg:modifiedBy": "markop",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458658019
                    },
                    {
                        "sbg:modifiedBy": "markop",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458669249
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Removed python script. Changed docker to just samtools and picard. Wrapped both faidx and CreateSequenceDictionary and exposed memory parameter for java execution.",
                        "sbg:modifiedOn": 1504530329
                    }
                ],
                "sbg:modifiedBy": "nikola_jovanovic",
                "sbg:cmdPreview": "samtools faidx  /path/to/reference.ext && java -Xmx10M -jar /opt/picard.jar CreateSequenceDictionary R=/path/to/reference.ext O=/path/to/reference.dict",
                "sbg:revision": 6,
                "sbg:revisionNotes": "Removed python script. Changed docker to just samtools and picard. Wrapped both faidx and CreateSequenceDictionary and exposed memory parameter for java execution.",
                "sbg:categories": [
                    "Indexing"
                ],
                "y": -162.33342109786471,
                "sbg:toolkit": "SBGTools",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
                "sbg:latestRevision": 6,
                "x": 985.4770126664764,
                "sbg:createdOn": 1450911283,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "markop",
                    "bix-demo",
                    "nikola_jovanovic"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:modifiedOn": 1504530329,
                "sbg:id": "admin/sbg-public-data/sbg-fasta-indices/5",
                "sbg:project": "bix-demo/sbgtools-demo"
            },
            "label": "SBG FASTA Indices",
            "sbg:x": 985.4770126664764,
            "sbg:y": -162.33342109786471
        },
        {
            "id": "#SBG_Prepare_Intervals",
            "inputs": [
                {
                    "id": "#SBG_Prepare_Intervals.split_mode",
                    "default": "File per interval with alt contig in a single file"
                },
                {
                    "id": "#SBG_Prepare_Intervals.bed_file",
                    "source": [
                        "#intervals_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_Intervals.str_arr"
                },
                {
                    "id": "#SBG_Prepare_Intervals.names"
                },
                {
                    "id": "#SBG_Prepare_Intervals.intervals"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-prepare-intervals/88",
                "label": "SBG Prepare Intervals",
                "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:\n\n1. File per interval - The tool creates one interval file per line of the input BED(FAI) file.\nEach interval file contains a single line (one of the lines of BED(FAI) input file).\n\n2. File per chr with alt contig in a single file - For each contig(chromosome) a single file\nis created containing all the intervals corresponding to it .\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n3. Output original BED - BED file is required for execution of this mode. If mode 3 is applied input is passed to the output.\n\n4. File per interval with alt contig in a single file - For each chromosome a single file is created for each interval.\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n##### Common issues: \nDo not use option 1 (File per interval) with exome BED or a BED with a lot of GL contigs, as it will create a large number of files.",
                "baseCommand": [
                    "python",
                    "sbg_prepare_intervals.py"
                ],
                "inputs": [
                    {
                        "sbg:category": "Input",
                        "type": [
                            {
                                "type": "enum",
                                "symbols": [
                                    "File per interval",
                                    "File per chr with alt contig in a single file",
                                    "Output original BED",
                                    "File per interval with alt contig in a single file"
                                ],
                                "name": "split_mode"
                            }
                        ],
                        "inputBinding": {
                            "position": 3,
                            "prefix": "--mode",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  mode = $job.inputs.split_mode\n  switch (mode) \n  {\n    case \"File per interval\": \n      return 1\n    case \"File per chr with alt contig in a single file\": \n      return 2\n    case \"Output original BED\": \n      return 3\n    case \"File per interval with alt contig in a single file\": \n      return 4  \n  }\n  return 3\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Split mode",
                        "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:  1. File per interval - The tool creates one interval file per line of the input BED(FAI) file. Each interval file contains a single line (one of the lines of BED(FAI) input file).  2. File per chr with alt contig in a single file - For each contig(chromosome) a single file is created containing all the intervals corresponding to it . All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\").  3. Output original BED - BED file is required for execution of this mode. If mode 3 is applied input is passed to the output.  4. File per interval with alt contig in a single file - For each chromosome a single file is created for each interval. All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\"). NOTE: Do not use option 1 (File per interval) with exome BED or a BED with a lot of GL contigs, as it will create a large number of files.",
                        "id": "#split_mode"
                    },
                    {
                        "sbg:category": "Input",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "chr start end",
                                    "chr:start-end"
                                ],
                                "name": "format"
                            }
                        ],
                        "label": "Interval format",
                        "description": "Format of the intervals in the generated files.",
                        "id": "#format"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File Input",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 2,
                            "prefix": "--fai",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input FAI file",
                        "description": "FAI file is converted to BED format if BED file is not provided.",
                        "sbg:fileTypes": "FAI",
                        "id": "#fai_file"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File Input",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 1,
                            "prefix": "--bed",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input BED file",
                        "description": "Input BED file containing intervals. Required for modes 3 and 4.",
                        "sbg:fileTypes": "BED",
                        "id": "#bed_file"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ],
                        "label": "String output",
                        "description": "Outputs BED content as strings",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{ \n  if ($job.inputs.bed_file){\n    glob = $job.inputs.bed_file.path\n\tglob = glob.split('/').slice(-1)[0]\n  }\n  else if($job.inputs.fai_file){\n    glob = $job.inputs.fai_file.path\n\tglob = glob.split('/').slice(-1)[0].split('.').slice(0, -1).join('.') + '.bed'\n  }\n\n  return glob\n}",
                                "class": "Expression"
                            },
                            "outputEval": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  rows = $self[0].contents.split(/\\r?\\n/).slice(0,-1);\n  out_list = []\n  for (i=0; i<rows.length; i++)\n  {\n    row = rows[i];\n    chromosome = row.split(\"\\t\")[0];\n    start = row.split(\"\\t\")[1];\n    end = row.split(\"\\t\")[2];\n    if(typeof start !== \"undefined\"){\n    \tinterval = chromosome.concat(\":\", start, \"-\", end);\n    }\n    else{\n    \tinterval = chromosome\n    }    \n    out_list.push(interval);\n  }\n  return out_list;\n  \t\n}\n",
                                "class": "Expression"
                            }
                        },
                        "id": "#str_arr"
                    },
                    {
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Output file names",
                        "description": "File containing the names of created files.",
                        "outputBinding": {
                            "glob": "Intervals/names.txt",
                            "outputEval": {
                                "engine": "#cwl-js-engine",
                                "script": "{   \n content =  $self[0].contents.replace(/\\0/g, '')\n content = content.replace('[','')\n content = content.replace(']','')\n content = content.replace(/\\'/g, \"\")\n content = content.replace(/\\s/g, '')\n content_arr = content.split(\",\")\n\n return content_arr\n \n\n} ",
                                "class": "Expression"
                            }
                        },
                        "id": "#names"
                    },
                    {
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "Intervals",
                        "description": "Array of BED files genereted as per selected Split Mode.",
                        "sbg:fileTypes": "BED",
                        "outputBinding": {
                            "glob": "Intervals/*.bed",
                            "sbg:metadata": {
                                "sbg_scatter": "true"
                            }
                        },
                        "id": "#intervals"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    },
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "filename": "sbg_prepare_intervals.py",
                                "fileContent": "\"\"\"\nUsage:\n    sbg_prepare_intervals.py [options] [--fastq FILE --bed FILE --mode INT --format STR --others STR]\n\nDescription:\n    Purpose of this tool is to split BED file into files based on the selected mode.\n    If bed file is not provided fai(fasta index) file is converted to bed.\n\nOptions:\n\n    -h, --help            Show this message.\n\n    -v, -V, --version     Tool version.\n\n    -b, -B, --bed FILE    Path to input bed file.\n\n    --fai FILE            Path to input fai file.\n\n    --format STR          Output file format.\n\n    --mode INT            Select input mode.\n\n\"\"\"\n\n\nfrom docopt import docopt\nimport os\nimport shutil\nimport glob\n\ndefault_extension = '.bed'  # for output files\n\n\n\ndef create_file(contents, contig_name, extension=default_extension):\n    \"\"\"function for creating a file for all intervals in a contig\"\"\"\n\n    new_file = open(\"Intervals/\" + contig_name + extension, \"w\")\n    new_file.write(contents)\n    new_file.close()\n\n\ndef add_to_file(line, name, extension=default_extension):\n    \"\"\"function for adding a line to a file\"\"\"\n\n    new_file = open(\"Intervals/\" + name + extension, \"a\")\n    if lformat == formats[1]:\n        sep = line.split(\"\\t\")\n        line = sep[0] + \":\" + sep[1] + \"-\" + sep[2]\n    new_file.write(line)\n    new_file.close()\n\n\ndef fai2bed(fai):\n    \"\"\"function to create a bed file from fai file\"\"\"\n\n    region_thr = 10000000  # threshold used to determine starting point accounting for telomeres in chromosomes\n    basename = fai[0:fai.rfind(\".\")]\n    with open(fai, \"r\") as ins:\n        new_array = []\n        for line in ins:\n            len_reg = int(line.split()[1])\n            cutoff = 0 if (len_reg < region_thr) else 0  # sd\\\\telomeres or start with 1\n            new_line = line.split()[0] + '\\t' + str(cutoff) + '\\t' + str(len_reg + cutoff)\n            new_array.append(new_line)\n    new_file = open(basename + \".bed\", \"w\")\n    new_file.write(\"\\n\".join(new_array))\n    return basename + \".bed\"\n\ndef chr_intervals(no_of_chrms = 23):\n    \"\"\"returns all possible designations for chromosome intervals\"\"\"\n    \n    chrms = []\n    for i in range(1, no_of_chrms):\n        chrms.append(\"chr\" + str(i))\n        chrms.append(str(i))\n    chrms.extend([\"x\", \"y\", \"chrx\", \"chry\"])\n    return chrms\n\n\ndef mode_1(orig_file):\n    \"\"\"mode 1: every line is a new file\"\"\"\n\n    with open(orig_file, \"r\") as ins:\n        prev = \"\"\n        counter = 0\n        names = []\n        for line in ins:\n            if line.split()[0] == prev:\n                counter += 1\n            else:\n                counter = 0\n            suffix = \"\" if (counter == 0) else \"_\" + str(counter)\n            create_file(line, line.split()[0] + suffix)\n            names.append(line.split()[0] + suffix)\n            prev = line.split()[0]\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\ndef mode_2(orig_file, others_name):\n    \"\"\"mode 2: separate file is created for each chromosome, and one file is created for other intervals\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, 'r') as ins:\n        for line in ins:\n            name = line.split()[0]\n            if name.lower() in chrms:\n                name = name\n            else:\n                name = others_name\n            try:\n                add_to_file(line, name)\n                if not name in names:\n                    names.append(name)\n            except:\n                raise Exception(\"Couldn't create or write in the file in mode 2\")\n\n        create_file(str(names), \"names\", extension = \".txt\")\n\n\ndef mode_3(orig_file, extension=default_extension):\n    \"\"\"mode 3: input file is staged to output\"\"\"\n\n    orig_name = orig_file.split(\"/\")[len(orig_file.split(\"/\")) - 1]\n    output_file = r\"./Intervals/\" + orig_name[0:orig_name.rfind('.')] + extension\n\n    shutil.copyfile(orig_file, output_file)\n\n    names = [orig_name[0:orig_name.rfind('.')]]\n    create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_4(orig_file, others_name):\n    \"\"\"mode 4: every interval in chromosomes is in a separate file. Other intervals are in a single file\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, \"r\") as ins:\n        counter = {}\n        for line in ins:\n            name = line.split()[0].lower()\n            if name in chrms:\n                if name in counter:\n                    counter[name] += 1\n                else:\n                    counter[name] = 0\n                suffix = \"\" if (counter[name] == 0) else \"_\" + str(counter[name])\n                create_file(line, name + suffix)\n                names.append(name + suffix)\n                prev = name\n            else:\n                name = others_name\n                if not name in names:\n                    names.append(name)\n                try:\n                    add_to_file(line, name)\n                except:\n                    raise Exception(\"Couldn't create or write in the file in mode 4\")\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef prepare_intervals():\n    # reading input files and split mode from command line\n    args = docopt(__doc__, version='1.0')\n\n    bed_file = args['--bed']\n    fai_file = args['--fai']\n    split_mode = int(args['--mode'])\n\n    \n    # define file name for non-chromosomal contigs\n    others_name = 'others' \n\n    global formats, lformat\n    formats = [\"chr start end\", \"chr:start-end\"]\n    lformat = args['--format']\n    if lformat == None:\n        lformat = formats[0]\n    if not lformat in formats:\n        raise Exception('Unsuported interval format')\n\n    if not os.path.exists(r\"./Intervals\"):\n        os.mkdir(r\"./Intervals\")\n    else:\n        files = glob.glob(r\"./Intervals/*\")\n        for f in files:\n            os.remove(f)\n\n    # create variable input_file taking bed_file as priority\n    if bed_file:\n        input_file = bed_file\n    elif fai_file:\n        input_file = fai2bed(fai_file)\n    else:\n        raise Exception('No input files are provided')\n\n    # calling adequate split mode function\n    if split_mode == 1:\n        mode_1(input_file)\n    elif split_mode == 2:\n        mode_2(input_file, others_name)\n    elif split_mode == 3:\n        if bed_file:\n            mode_3(input_file)\n        else:\n            raise Exception('Bed file is required for mode 3')\n    elif split_mode == 4:\n        mode_4(input_file, others_name)\n    else:\n        raise Exception('Split mode value is not set')\n\n\nif __name__ == '__main__':\n    prepare_intervals()"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/bogdang/sbg_prepare_intervals:1.0"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\t\n  if ($job.inputs.format)\n  \treturn \"--format \" + \"\\\"\" + $job.inputs.format + \"\\\"\"\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "split_mode": "File per chr with alt contig in a single file",
                        "format": "chr start end",
                        "fai_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/fai_file.fasta.fai",
                            "class": "File",
                            "size": 0
                        },
                        "bed_file": null
                    },
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    }
                },
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/75",
                        "sbg:modifiedOn": 1473083821
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/76",
                        "sbg:modifiedOn": 1473084447
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1473928444
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "split_mode set to required",
                        "sbg:modifiedOn": 1474970272
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Fixed Toolkit name.",
                        "sbg:modifiedOn": 1478525360
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Description changed",
                        "sbg:modifiedOn": 1491904483
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Common issues added",
                        "sbg:modifiedOn": 1491905063
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Change the Javascript for adding the format argument into the command line",
                        "sbg:modifiedOn": 1500382475
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Removed lower() from mode_2",
                        "sbg:modifiedOn": 1503074487
                    },
                    {
                        "sbg:modifiedBy": "medjo",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "String output added",
                        "sbg:modifiedOn": 1503398050
                    },
                    {
                        "sbg:modifiedBy": "bogdang",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Glob fix for fai input",
                        "sbg:modifiedOn": 1504515792
                    }
                ],
                "sbg:modifiedBy": "bogdang",
                "sbg:cmdPreview": "python sbg_prepare_intervals.py  --format \"chr start end\" --mode 2",
                "sbg:revision": 10,
                "sbg:revisionNotes": "Glob fix for fai input",
                "sbg:categories": [
                    "Converters"
                ],
                "y": 1242.3836307413155,
                "sbg:toolkitVersion": "1.0",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:latestRevision": 10,
                "x": 944.1435756210566,
                "sbg:createdOn": 1473083821,
                "sbg:createdBy": "vladimirk",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo",
                    "nikola_jovanovic",
                    "teodora.aleksic",
                    "medjo",
                    "bogdang"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:modifiedOn": 1504515792,
                "sbg:toolkit": "SBGTools",
                "sbg:id": "admin/sbg-public-data/sbg-prepare-intervals/88",
                "sbg:project": "bix-demo/sbgtools-demo"
            },
            "label": "SBG Prepare Intervals",
            "sbg:x": 944.1435756210566,
            "sbg:y": 1242.3836307413155
        },
        {
            "id": "#INDEL_GATK_ApplyVQSR",
            "inputs": [
                {
                    "id": "#INDEL_GATK_ApplyVQSR.variants",
                    "source": [
                        "#SNP_GATK_ApplyVQSR.recalibrated_vcf"
                    ]
                },
                {
                    "id": "#INDEL_GATK_ApplyVQSR.ts_filter_level",
                    "default": 99
                },
                {
                    "id": "#INDEL_GATK_ApplyVQSR.tranches_file",
                    "source": [
                        "#INDEL_GATK_VariantRecalibrator.tranches_file"
                    ]
                },
                {
                    "id": "#INDEL_GATK_ApplyVQSR.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#INDEL_GATK_ApplyVQSR.recal_file",
                    "source": [
                        "#GATK_IndexFeatureFile_5.output_with_index"
                    ]
                },
                {
                    "id": "#INDEL_GATK_ApplyVQSR.mode",
                    "default": "INDEL"
                }
            ],
            "outputs": [
                {
                    "id": "#INDEL_GATK_ApplyVQSR.recalibrated_vcf"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-applyvqsr/8",
                "label": "INDEL GATK ApplyVQSR",
                "description": "Apply a score cutoff to filter variants based on a recalibration table.\n\n###**Overview**  \n\nThis tool performs the second pass in a two-stage process called Variant Quality Score Recalibration (VQSR). Specifically, it applies filtering to the input variants based on the recalibration table produced in the first step by VariantRecalibrator and a target sensitivity value, which the tool matches internally to a VQSLOD score cutoff based on the model's estimated sensitivity to a set of true variants.\n\nThe filter determination is not just a pass/fail process. The tool evaluates for each variant which \"tranche\", or slice of the dataset, it falls into in terms of sensitivity to the truthset. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This results in a callset that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded unless the option to do so is specified.\n\n####**Summary of the VQSR procedure** \n\nThe purpose of variant recalibration is to assign a well-calibrated probability to each variant call in a call set. These probabilities can then be used to filter the variants with a greater level of accuracy and flexibility than can typically be achieved by traditional hard-filter (filtering on individual annotation value thresholds). The first pass consists of building a model that describes how variant annotation values co-vary with the truthfulness of variant calls in a training set, and then scoring all input variants according to the model. The second pass simply consists of specifying a target sensitivity value (which corresponds to an empirical VQSLOD cutoff) and applying filters to each variant call according to their ranking. The result is a VCF file in which variants have been assigned a score and filter status.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools do and how to use them for best results on your own data.\n\n###**Inputs**  \n- The raw input variants to be filtered.\n- The recalibration table file that was generated by the VariantRecalibrator tool.\n- The tranches file that was generated by the VariantRecalibrator tool. \n\n###**Outputs**  \n- A recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level. \n\n###**Usage example**\n\n####**Applying rcelibration/filtering to SNPs**\n\n    ./gatk-launch ApplyVQSR \\\n      -R reference.fasta \\\n      -V input.vcf \\\n      -O output.vcf \\\n      --ts_filter_level 99.0 \\\n      -tranchesFile output.tranches \\\n      --recalFile output.recal \\\n      -mode SNP\n\n####**Allele-specific version of the SNP filtering (beta)**\n\n     ./gatk-launch ApplyVQSR \\\n       -R reference.fasta \\\n       -V input.vcf \\\n       -O output.vcf \\\n       -AS \\\n       --ts_filter_level 99.0 \\\n       -tranchesFile output.AS.tranches \\\n       --recalFile output.AS.recal \\\n       -mode SNP\n\nNote that the tranches and recalibration files must have been produced by an allele-specific run of VariantRecalibrator. Also note that the AS_culprit, AS_FilterStatus, and AS_VQSLOD fields will have placeholder values (NA or NaN) for alleles of a type that have not yet been processed by ApplyRecalibration. The spanning deletion allele (*) will not be recalibrated because it represents missing data. Its VQSLOD will remain NaN, and its culprit and FilterStatus will be NA.\n\nEach allele will be annotated by its corresponding entry in the AS_FilterStatus INFO field annotation. Allele-specific VQSLOD and culprit are also carried through from VariantRecalibrator, and stored in the AS_VQSLOD and AS_culprit INFO fields, respectively. The site-level filter is set to the most lenient of any of the allele filters. That is, if one allele passes, the whole site will be PASS. If no alleles pass, the site-level filter will be set to the lowest sensitivity tranche among all the alleles.\n\n###**Caveats**\n\n- The tranche values used in the example above are only meant to be a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\n- In order to create the tranche reporting plots (which are only generated for SNPs, not indels!) the Rscript executable needs to be in your environment PATH (this is the scripting version of R, not the interactive version).\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "ApplyVQSR"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--variant",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "One or more VCF files containing variants  This argument must be specified at least once",
                        "description": "One or more VCF files containing variants  This argument must be specified at least once.\n                              Required.",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-AS",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useAlleleSpecificAnnotations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the tool will attempt to apply a filter to each allele based on the input\n                              tranches and allele-specific ",
                        "description": "If specified, the tool will attempt to apply a filter to each allele based on the input\n                              tranches and allele-specific .recal file.  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#useAlleleSpecificAnnotations"
                    },
                    {
                        "sbg:altPrefix": "-ts_filter_level",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ts_filter_level",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The truth sensitivity level at which to start filtering  Default value: null",
                        "description": "The truth sensitivity level at which to start filtering  Default value: null.",
                        "id": "#ts_filter_level"
                    },
                    {
                        "sbg:altPrefix": "-tranchesFile",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--tranches_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "The input tranches file describing where to cut the data  Default value: null",
                        "description": "The input tranches file describing where to cut the data  Default value: null.",
                        "sbg:fileTypes": "TRANCHES",
                        "id": "#tranches_file"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Optional Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence  Default value: null",
                        "description": "Reference sequence  Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-recalFile",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--recal_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "The input recal file used by ApplyRecalibration  Required",
                        "description": "The input recal file used by ApplyRecalibration  Required.",
                        "sbg:fileTypes": "RECAL",
                        "id": "#recal_file"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-mode",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--mode",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Recalibration mode to employ: 1",
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels\n                              untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both\n                              SNPs and indels simultaneously.  Default value: SNP. Possible values: {SNP, INDEL, BOTH}.",
                        "id": "#mode"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-lodCutoff",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lodCutoff",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The VQSLOD score below which to start filtering  Default value: null",
                        "description": "The VQSLOD score below which to start filtering  Default value: null.",
                        "id": "#lodCutoff"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are including",
                        "description": "Amount of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "BAM/SAM/CRAM file containing reads  This argument may be specified 0 or more times",
                        "description": "BAM/SAM/CRAM file containing reads  This argument may be specified 0 or more times.\n                              Default value: null.",
                        "id": "#input"
                    },
                    {
                        "sbg:altPrefix": "-ignoreFilter",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_filter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the recalibration will be applied to variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times",
                        "description": "If specified, the recalibration will be applied to variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#ignore_filter"
                    },
                    {
                        "sbg:altPrefix": "-ignoreAllFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_all_filters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will ignore all input filters",
                        "description": "If specified, the variant recalibrator will ignore all input filters. Useful to rerun the\n                              VQSR from a filtered output file.  Default value: false. Possible values: {true, false}.",
                        "id": "#ignore_all_filters"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-ef",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeFiltered",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Don't output filtered loci after applying the recalibration  Default value: false",
                        "description": "Don't output filtered loci after applying the recalibration  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#excludeFiltered"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "CPU per job",
                        "description": "CPU per job",
                        "id": "#cpu_per_job"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "VCF",
                        "description": "File to which variants should be written.",
                        "sbg:fileTypes": "VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#recalibrated_vcf"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "variants": {
                            "secondaryFiles": [],
                            "path": "/path/to/variants.ext",
                            "class": "File",
                            "size": 0
                        },
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "useAlleleSpecificAnnotations": true,
                        "ts_filter_level": null,
                        "tranches_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/tranches_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "secondsBetweenProgressUpdates": null,
                        "sample": null,
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.ext"
                        },
                        "recal_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/recal_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "mode": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "memory_per_job": 6,
                        "memory_overhead_per_job": 10,
                        "maximumMappingQuality": null,
                        "maxReadLength": null,
                        "maxFragmentLength": null,
                        "lodCutoff": null,
                        "library": null,
                        "lenient": true,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "",
                        "intervals_file": null,
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "input": null,
                        "ignore_filter": null,
                        "ignore_all_filters": true,
                        "filterTooShort": null,
                        "exclude_intervals_string": "",
                        "exclude_intervals_file": null,
                        "excludeFiltered": true,
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cpu_per_job": 4,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 4,
                        "addOutputSAMProgramRecord": true,
                        "QUIET": true,
                        "PLFilterName": null,
                        "no_cmdline_in_header": true,
                        "lod_cutoff": 0,
                        "bqsr": {
                            "secondaryFiles": [],
                            "path": "/path/to/bqsr.ext",
                            "class": "File",
                            "size": 0
                        }
                    },
                    "allocatedResources": {
                        "mem": 16,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/26",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789557,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx6M\" ApplyVQSR --recal_file /path/to/recal_file.ext --variant /path/to/variants.ext --reference /path/to/reference.ext --output variants.recalibrated.vcf",
                "sbg:revision": 8,
                "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/26",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 304.52622670039415,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 8,
                "x": 3519.9068781497795,
                "sbg:createdOn": 1500296533,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-applyvqsr/8",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/17",
                        "sbg:modifiedOn": 1500296533
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/18",
                        "sbg:modifiedOn": 1500640325
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/19",
                        "sbg:modifiedOn": 1500888766
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/20",
                        "sbg:modifiedOn": 1502718022
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/21",
                        "sbg:modifiedOn": 1503405159
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/22",
                        "sbg:modifiedOn": 1504105692
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/23",
                        "sbg:modifiedOn": 1504272857
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/24",
                        "sbg:modifiedOn": 1504275131
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/26",
                        "sbg:modifiedOn": 1504789557
                    }
                ]
            },
            "label": "INDEL GATK ApplyVQSR",
            "sbg:x": 3519.9068781497795,
            "sbg:y": 304.52622670039415
        },
        {
            "id": "#SNP_GATK_ApplyVQSR",
            "inputs": [
                {
                    "id": "#SNP_GATK_ApplyVQSR.variants",
                    "source": [
                        "#VCFtools_Sort.output_file"
                    ]
                },
                {
                    "id": "#SNP_GATK_ApplyVQSR.ts_filter_level",
                    "default": 99.5
                },
                {
                    "id": "#SNP_GATK_ApplyVQSR.tranches_file",
                    "source": [
                        "#SNP_GATK_VariantRecalibrator.tranches_file"
                    ]
                },
                {
                    "id": "#SNP_GATK_ApplyVQSR.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#SNP_GATK_ApplyVQSR.recal_file",
                    "source": [
                        "#GATK_IndexFeatureFile_6.output_with_index"
                    ]
                },
                {
                    "id": "#SNP_GATK_ApplyVQSR.mode",
                    "default": "SNP"
                }
            ],
            "outputs": [
                {
                    "id": "#SNP_GATK_ApplyVQSR.recalibrated_vcf"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-applyvqsr/8",
                "label": "SNP GATK ApplyVQSR",
                "description": "Apply a score cutoff to filter variants based on a recalibration table.\n\n###**Overview**  \n\nThis tool performs the second pass in a two-stage process called Variant Quality Score Recalibration (VQSR). Specifically, it applies filtering to the input variants based on the recalibration table produced in the first step by VariantRecalibrator and a target sensitivity value, which the tool matches internally to a VQSLOD score cutoff based on the model's estimated sensitivity to a set of true variants.\n\nThe filter determination is not just a pass/fail process. The tool evaluates for each variant which \"tranche\", or slice of the dataset, it falls into in terms of sensitivity to the truthset. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This results in a callset that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded unless the option to do so is specified.\n\n####**Summary of the VQSR procedure** \n\nThe purpose of variant recalibration is to assign a well-calibrated probability to each variant call in a call set. These probabilities can then be used to filter the variants with a greater level of accuracy and flexibility than can typically be achieved by traditional hard-filter (filtering on individual annotation value thresholds). The first pass consists of building a model that describes how variant annotation values co-vary with the truthfulness of variant calls in a training set, and then scoring all input variants according to the model. The second pass simply consists of specifying a target sensitivity value (which corresponds to an empirical VQSLOD cutoff) and applying filters to each variant call according to their ranking. The result is a VCF file in which variants have been assigned a score and filter status.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools do and how to use them for best results on your own data.\n\n###**Inputs**  \n- The raw input variants to be filtered.\n- The recalibration table file that was generated by the VariantRecalibrator tool.\n- The tranches file that was generated by the VariantRecalibrator tool. \n\n###**Outputs**  \n- A recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level. \n\n###**Usage example**\n\n####**Applying rcelibration/filtering to SNPs**\n\n    ./gatk-launch ApplyVQSR \\\n      -R reference.fasta \\\n      -V input.vcf \\\n      -O output.vcf \\\n      --ts_filter_level 99.0 \\\n      -tranchesFile output.tranches \\\n      --recalFile output.recal \\\n      -mode SNP\n\n####**Allele-specific version of the SNP filtering (beta)**\n\n     ./gatk-launch ApplyVQSR \\\n       -R reference.fasta \\\n       -V input.vcf \\\n       -O output.vcf \\\n       -AS \\\n       --ts_filter_level 99.0 \\\n       -tranchesFile output.AS.tranches \\\n       --recalFile output.AS.recal \\\n       -mode SNP\n\nNote that the tranches and recalibration files must have been produced by an allele-specific run of VariantRecalibrator. Also note that the AS_culprit, AS_FilterStatus, and AS_VQSLOD fields will have placeholder values (NA or NaN) for alleles of a type that have not yet been processed by ApplyRecalibration. The spanning deletion allele (*) will not be recalibrated because it represents missing data. Its VQSLOD will remain NaN, and its culprit and FilterStatus will be NA.\n\nEach allele will be annotated by its corresponding entry in the AS_FilterStatus INFO field annotation. Allele-specific VQSLOD and culprit are also carried through from VariantRecalibrator, and stored in the AS_VQSLOD and AS_culprit INFO fields, respectively. The site-level filter is set to the most lenient of any of the allele filters. That is, if one allele passes, the whole site will be PASS. If no alleles pass, the site-level filter will be set to the lowest sensitivity tranche among all the alleles.\n\n###**Caveats**\n\n- The tranche values used in the example above are only meant to be a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\n- In order to create the tranche reporting plots (which are only generated for SNPs, not indels!) the Rscript executable needs to be in your environment PATH (this is the scripting version of R, not the interactive version).\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "ApplyVQSR"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--variant",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "One or more VCF files containing variants  This argument must be specified at least once",
                        "description": "One or more VCF files containing variants  This argument must be specified at least once.\n                              Required.",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-AS",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useAlleleSpecificAnnotations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the tool will attempt to apply a filter to each allele based on the input\n                              tranches and allele-specific ",
                        "description": "If specified, the tool will attempt to apply a filter to each allele based on the input\n                              tranches and allele-specific .recal file.  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#useAlleleSpecificAnnotations"
                    },
                    {
                        "sbg:altPrefix": "-ts_filter_level",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ts_filter_level",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The truth sensitivity level at which to start filtering  Default value: null",
                        "description": "The truth sensitivity level at which to start filtering  Default value: null.",
                        "id": "#ts_filter_level"
                    },
                    {
                        "sbg:altPrefix": "-tranchesFile",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--tranches_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "The input tranches file describing where to cut the data  Default value: null",
                        "description": "The input tranches file describing where to cut the data  Default value: null.",
                        "sbg:fileTypes": "TRANCHES",
                        "id": "#tranches_file"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Optional Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence  Default value: null",
                        "description": "Reference sequence  Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-recalFile",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--recal_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "The input recal file used by ApplyRecalibration  Required",
                        "description": "The input recal file used by ApplyRecalibration  Required.",
                        "sbg:fileTypes": "RECAL",
                        "id": "#recal_file"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-mode",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--mode",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Recalibration mode to employ: 1",
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels\n                              untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both\n                              SNPs and indels simultaneously.  Default value: SNP. Possible values: {SNP, INDEL, BOTH}.",
                        "id": "#mode"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-lodCutoff",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lodCutoff",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The VQSLOD score below which to start filtering  Default value: null",
                        "description": "The VQSLOD score below which to start filtering  Default value: null.",
                        "id": "#lodCutoff"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are including",
                        "description": "Amount of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "BAM/SAM/CRAM file containing reads  This argument may be specified 0 or more times",
                        "description": "BAM/SAM/CRAM file containing reads  This argument may be specified 0 or more times.\n                              Default value: null.",
                        "id": "#input"
                    },
                    {
                        "sbg:altPrefix": "-ignoreFilter",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_filter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the recalibration will be applied to variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times",
                        "description": "If specified, the recalibration will be applied to variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#ignore_filter"
                    },
                    {
                        "sbg:altPrefix": "-ignoreAllFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_all_filters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will ignore all input filters",
                        "description": "If specified, the variant recalibrator will ignore all input filters. Useful to rerun the\n                              VQSR from a filtered output file.  Default value: false. Possible values: {true, false}.",
                        "id": "#ignore_all_filters"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-ef",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeFiltered",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Don't output filtered loci after applying the recalibration  Default value: false",
                        "description": "Don't output filtered loci after applying the recalibration  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#excludeFiltered"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "CPU per job",
                        "description": "CPU per job",
                        "id": "#cpu_per_job"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "VCF",
                        "description": "File to which variants should be written.",
                        "sbg:fileTypes": "VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#recalibrated_vcf"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "variants": {
                            "secondaryFiles": [],
                            "path": "/path/to/variants.ext",
                            "class": "File",
                            "size": 0
                        },
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "useAlleleSpecificAnnotations": true,
                        "ts_filter_level": null,
                        "tranches_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/tranches_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "secondsBetweenProgressUpdates": null,
                        "sample": null,
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.ext"
                        },
                        "recal_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/recal_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "mode": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "memory_per_job": 6,
                        "memory_overhead_per_job": 10,
                        "maximumMappingQuality": null,
                        "maxReadLength": null,
                        "maxFragmentLength": null,
                        "lodCutoff": null,
                        "library": null,
                        "lenient": true,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "",
                        "intervals_file": null,
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "input": null,
                        "ignore_filter": null,
                        "ignore_all_filters": true,
                        "filterTooShort": null,
                        "exclude_intervals_string": "",
                        "exclude_intervals_file": null,
                        "excludeFiltered": true,
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cpu_per_job": 4,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 4,
                        "addOutputSAMProgramRecord": true,
                        "QUIET": true,
                        "PLFilterName": null,
                        "no_cmdline_in_header": true,
                        "lod_cutoff": 0,
                        "bqsr": {
                            "secondaryFiles": [],
                            "path": "/path/to/bqsr.ext",
                            "class": "File",
                            "size": 0
                        }
                    },
                    "allocatedResources": {
                        "mem": 16,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/26",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789557,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx6M\" ApplyVQSR --recal_file /path/to/recal_file.ext --variant /path/to/variants.ext --reference /path/to/reference.ext --output variants.recalibrated.vcf",
                "sbg:revision": 8,
                "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/26",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 155.43086860302546,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 8,
                "x": 3278.5252767612615,
                "sbg:createdOn": 1500296533,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-applyvqsr/8",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/17",
                        "sbg:modifiedOn": 1500296533
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/18",
                        "sbg:modifiedOn": 1500640325
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/19",
                        "sbg:modifiedOn": 1500888766
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/20",
                        "sbg:modifiedOn": 1502718022
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/21",
                        "sbg:modifiedOn": 1503405159
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/22",
                        "sbg:modifiedOn": 1504105692
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/23",
                        "sbg:modifiedOn": 1504272857
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/24",
                        "sbg:modifiedOn": 1504275131
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-applyrecalibration/26",
                        "sbg:modifiedOn": 1504789557
                    }
                ]
            },
            "label": "SNP GATK ApplyVQSR",
            "sbg:x": 3278.5252767612615,
            "sbg:y": 155.43086860302546
        },
        {
            "id": "#INDEL_GATK_VariantRecalibrator",
            "inputs": [
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.variants",
                    "source": [
                        "#VCFtools_Sort.output_file"
                    ]
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.use_annotation",
                    "default": [
                        "DP",
                        "FS",
                        "ReadPosRankSum",
                        "MQRankSum",
                        "QD",
                        "SOR"
                    ]
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.resource",
                    "source": [
                        "#GATK_IndexFeatureFile.output_with_index",
                        "#GATK_IndexFeatureFile_1.output_with_index"
                    ]
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.mode",
                    "default": "INDEL"
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.maxGaussians",
                    "default": 4
                }
            ],
            "outputs": [
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.tranches_file"
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.rscript_file"
                },
                {
                    "id": "#INDEL_GATK_VariantRecalibrator.recal_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-variantrecalibrator/8",
                "label": "INDEL GATK VariantRecalibrator",
                "description": "Build a recalibration model to score variant quality for filtering purposes.\n\n###**Overview**  \n\nThis tool performs the first pass in a two-stage process called Variant Quality Score Recalibration (VQSR). Specifically, it builds the model that will be used in the second step to actually filter variants. This model attempts to describe the relationship between variant annotations (such as QD, MQ and ReadPosRankSum, for example) and the probability that a variant is a true genetic variant versus a sequencing or data processing artifact. It is developed adaptively based on \"true sites\" provided as input, typically HapMap sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The result is a score called the VQSLOD that gets added to the INFO field of each variant. This score is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\n####**Summary of the VQSR procedure**\n\nThe purpose of variant recalibration is to assign a well-calibrated probability to each variant call in a call set. These probabilities can then be used to filter the variants with a greater level of accuracy and flexibility than can typically be achieved by traditional hard-filter (filtering on individual annotation value thresholds). The first pass consists of building a model that describes how variant annotation values co-vary with the truthfulness of variant calls in a training set, and then scoring all input variants according to the model. The second pass simply consists of specifying a target sensitivity value (which corresponds to an empirical VQSLOD cutoff) and applying filters to each variant call according to their ranking. The result is a VCF file in which variants have been assigned a score and filter status.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools do and how to use them for best results on your own data. \n\n###**Inputs**  \n- The input variants to be recalibrated. These variant calls must be annotated with the annotations that will be used for modeling. If the calls come from multiple samples, they must have been obtained by joint calling the samples, either directly (running HaplotypeCaller on all samples together) or via the GVCF workflow (HaplotypeCaller with -ERC GVCF per-sample then GenotypeGVCFs on the resulting gVCFs) which is more scalable.\n- Known, truth, and training sets to be used by the algorithm. See the method documentation linked above for more details. \n\n###**Outputs**  \n- A recalibration table file that will be used by the ApplyVQSR tool.\n- A tranches file that shows various metrics of the recalibration callset for slices of the data. \n  \n###**Usage example**  \n\n####**Recalibrating SNPs in exome data**\n\n    ./gatk-launch VariantRecalibrator \\\n       -R reference.fasta \\\n       -V input.vcf \\\n       --resource hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n       --resource omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n       --resource 1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf \\\n       --resource dbsnp,known=true,training=false,truth=false,prior=2.0 dbsnp_135.b37.vcf \\\n       -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n       -mode SNP \\\n       --recalFile output.recal \\\n       -tranchesFile output.tranches \\\n       --rscriptFile output.plots.R\n\n####**Allele-specific version of the SNP recalibration (beta)**\n\n     ./gatk-launch VariantRecalibrator \\\n       -R reference.fasta \\\n       -V input.vcf \\\n       -AS \\\n       --resource hapmap,known=false,training=true,truth=true,prior=15.0:hapmap_3.3.b37.sites.vcf \\\n       --resource omni,known=false,training=true,truth=false,prior=12.0:1000G_omni2.5.b37.sites.vcf \\\n       --resource 1000G,known=false,training=true,truth=false,prior=10.0:1000G_phase1.snps.high_confidence.vcf \\\n       --resource dbsnp,known=true,training=false,truth=false,prior=2.0 dbsnp_135.b37.vcf \\\n       -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n       -mode SNP \\\n       --recalFile output.AS.recal \\\n       --tranchesFile output.AS.tranches \\\n       --rscriptFile output.plots.AS.R\n\nNote that to use the allele-specific (AS) mode, the input VCF must have been produced using allele-specific annotations in HaplotypeCaller. Note also that each allele will have a separate line in the output recalibration file with its own VQSLOD and `culprit`, which will be transferred to the final VCF by the ApplyRecalibration tool.\n\n###**Caveats**  \n\n- The values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for your own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\n- Whole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\n- If you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\n- In order to create the model reporting plots, the Rscript executable needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more information on how to download and install R.\n\n###**Additional notes**\n\n- This tool only accepts a single input variant file unlike earlier version of GATK, which accepted multiple input variant files.\n- SNPs and indels must be recalibrated in separate runs, but it is not necessary to separate them into different files. See the tutorial linked above for an example workflow. Note that mixed records are treated as indels.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "VariantRecalibrator"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "One or more VCF files containing variants  This argument must be specified at least once",
                        "description": "One or more VCF files containing variants  This argument must be specified at least once.\n                              Required.",
                        "id": "#variants"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-an",
                        "sbg:stageInput": null,
                        "sbg:category": "Required Arguments",
                        "type": [
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ],
                        "label": "The names of the annotations which should used for calculations  This argument must be\n                              specified at least once",
                        "description": "The names of the annotations which should used for calculations  This argument must be\n                              specified at least once. Required.",
                        "id": "#use_annotation"
                    },
                    {
                        "sbg:altPrefix": "-AS",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useAlleleSpecificAnnotations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will attempt to use the allele-specific versions of\n                              the specified annotations",
                        "description": "If specified, the variant recalibrator will attempt to use the allele-specific versions of\n                              the specified annotations.  Default value: false. Possible values: {true, false}.",
                        "id": "#useAlleleSpecificAnnotations"
                    },
                    {
                        "sbg:altPrefix": "-allPoly",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--trustAllPolymorphic",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Trust that all the input training sets' unfiltered records contain only polymorphic sites\n                              to drastically speed up the computation",
                        "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites\n                              to drastically speed up the computation.  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#trustAllPolymorphic"
                    },
                    {
                        "sbg:altPrefix": "-titv",
                        "sbg:toolDefaultValue": "2",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--target_titv",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the\n                              optimization curve output figures",
                        "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the\n                              optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED\n                              FOR PLOTTING PURPOSES!  Default value: 2.15.",
                        "id": "#target_titv"
                    },
                    {
                        "sbg:altPrefix": "-std",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--stdThreshold",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Annotation value divergence threshold (number of standard deviations from the means)  \n                              Default value: 10",
                        "description": "Annotation value divergence threshold (number of standard deviations from the means)  \n                              Default value: 10.0.",
                        "id": "#stdThreshold"
                    },
                    {
                        "sbg:altPrefix": "-shrinkage",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--shrinkage",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The shrinkage parameter in the variational Bayes algorithm",
                        "description": "The shrinkage parameter in the variational Bayes algorithm.  Default value: 1.0.",
                        "id": "#shrinkage"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-scatterTranches",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--output_tranches_for_scatter",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output Tranches For Scatter",
                        "description": "Output tranches in a format appropriate to running VariantRecalibrator in scatter-gather",
                        "id": "#scatterTranches"
                    },
                    {
                        "sbg:altPrefix": "-sampleEvery",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample_every_Nth_variant",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Sample Every Nth Variant",
                        "description": "If specified, the variant recalibrator will use (and output) only a subset of variants consisting of every Nth variant where N is specified by this argument; for use with  -outputModel -- see argument details.",
                        "id": "#sample_every_Nth_variant"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-resource",
                        "sbg:stageInput": null,
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "A list of sites for which to apply a prior probability of being correct but which aren't\n                              used by the algorithm (training and truth sets are required to run)  This argument must be\n                              specified at least once",
                        "description": "A list of sites for which to apply a prior probability of being correct but which aren't\n                              used by the algorithm (training and truth sets are required to run)  This argument must be\n                              specified at least once. Required.",
                        "id": "#resource"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence  Default value: null",
                        "description": "Reference sequence  Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:toolDefaultValue": "SILENT",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-priorCounts",
                        "sbg:toolDefaultValue": "20",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--priorCounts",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The number of prior counts to use in the variational Bayes algorithm",
                        "description": "The number of prior counts to use in the variational Bayes algorithm.  Default value:\n                              20.0.",
                        "id": "#priorCounts"
                    },
                    {
                        "sbg:altPrefix": "-outputModel",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--output_model",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output Model",
                        "description": "If specified, the variant recalibrator will output the VQSR model to this file path.",
                        "id": "#output_model"
                    },
                    {
                        "sbg:altPrefix": "-nKM",
                        "sbg:toolDefaultValue": "100",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--numKMeans",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of k-means iterations  Default value: 100",
                        "description": "Number of k-means iterations  Default value: 100.",
                        "id": "#numKMeans"
                    },
                    {
                        "sbg:altPrefix": "-mode",
                        "sbg:toolDefaultValue": "SNP",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--mode",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Recalibration mode to employ  Default value: SNP",
                        "description": "Recalibration mode to employ  Default value: SNP. Possible values: {SNP, INDEL, BOTH}.",
                        "id": "#mode"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "sbg:altPrefix": "-minNumBad",
                        "sbg:toolDefaultValue": "1000",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minNumBadVariants",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum number of bad variants  Default value: 1000",
                        "description": "Minimum number of bad variants  Default value: 1000.",
                        "id": "#minNumBadVariants"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-max_attempts",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--max_attempts",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of attempts to build a model before failing  Default value: 1",
                        "description": "Number of attempts to build a model before failing  Default value: 1.",
                        "id": "#max_attempts"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxNumTrainingData",
                        "sbg:toolDefaultValue": "2500000",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxNumTrainingData",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of training data  Default value: 2500000",
                        "description": "Maximum number of training data  Default value: 2500000.",
                        "id": "#maxNumTrainingData"
                    },
                    {
                        "sbg:altPrefix": "-mNG",
                        "sbg:toolDefaultValue": "2",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxNegativeGaussians",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Max number of Gaussians for the negative model  Default value: 2",
                        "description": "Max number of Gaussians for the negative model  Default value: 2.",
                        "id": "#maxNegativeGaussians"
                    },
                    {
                        "sbg:altPrefix": "-mI",
                        "sbg:toolDefaultValue": "150",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxIterations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of VBEM iterations  Default value: 150",
                        "description": "Maximum number of VBEM iterations  Default value: 150.",
                        "id": "#maxIterations"
                    },
                    {
                        "sbg:altPrefix": "-mG",
                        "sbg:toolDefaultValue": "8",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxGaussians",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Max number of Gaussians for the positive model  Default value: 8",
                        "description": "Max number of Gaussians for the positive model  Default value: 8.",
                        "id": "#maxGaussians"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:toolDefaultValue": "1000000",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:toolDefaultValue": "UNION",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Of padding (in bp) to add to each interval you are including",
                        "description": "Of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-inputModel",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input_model",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input Model",
                        "description": "If specified, the variant recalibrator will read the VQSR model from this file path.",
                        "id": "#inputModel"
                    },
                    {
                        "sbg:altPrefix": "-ignoreFilter",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_filter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will also use variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times",
                        "description": "If specified, the variant recalibrator will also use variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#ignore_filter"
                    },
                    {
                        "sbg:altPrefix": "-ignoreAllFilters",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_all_filters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will ignore all input filters",
                        "description": "If specified, the variant recalibrator will ignore all input filters. Useful to rerun the\n                              VQSR from a filtered output file.  Default value: false. Possible values: {true, false}.",
                        "id": "#ignore_all_filters"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:toolDefaultValue": "30",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-dirichlet",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dirichlet",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The dirichlet parameter in the variational Bayes algorithm",
                        "description": "The dirichlet parameter in the variational Bayes algorithm.  Default value: 0.001.",
                        "id": "#dirichlet"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "CPU per job",
                        "description": "CPU per job",
                        "id": "#cpu_per_job"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:toolDefaultValue": "40",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:toolDefaultValue": "-1",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-badLodCutoff",
                        "sbg:toolDefaultValue": "-5",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--badLodCutoff",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "LOD score cutoff for selecting bad variants  Default value: -5",
                        "description": "LOD score cutoff for selecting bad variants  Default value: -5.0.",
                        "id": "#badLodCutoff"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-aggregate",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--aggregate",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Additional raw input variants to be used in building the model  This argument may be\n                              specified 0 or more times",
                        "description": "Additional raw input variants to be used in building the model  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#aggregate"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:altPrefix": "-tranche",
                        "sbg:toolDefaultValue": "[100",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--TStranche",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The levels of truth sensitivity at which to slice the data",
                        "description": "The levels of truth sensitivity at which to slice the data. (in percent, that is 1.0 for 1\n                              percent)  This argument may be specified 0 or more times. Default value: [100.0, 99.9,\n                              99.0, 90.0].",
                        "id": "#TStranche"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    },
                    {
                        "sbg:altPrefix": "-MQCap",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--MQCapForLogitJitterTransform",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Apply logit transform and jitter to MQ values  Default value: 0",
                        "description": "Apply logit transform and jitter to MQ values  Default value: 0.",
                        "id": "#MQCapForLogitJitterTransform"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tranches File",
                        "description": "The output tranches file used by ApplyRecalibration.",
                        "sbg:fileTypes": "TRANCHES",
                        "outputBinding": {
                            "glob": "*.tranches",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#tranches_file"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Rscript File",
                        "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
                        "sbg:fileTypes": "R",
                        "outputBinding": {
                            "glob": "*.recal.R",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#rscript_file"
                    },
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Recalibration File",
                        "description": "The output recal file used by ApplyRecalibration.",
                        "sbg:fileTypes": "RECAL",
                        "outputBinding": {
                            "glob": "*.recal",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#recal_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--rscript_file",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.split('/').slice(-1)[0]\n  variant_name = variant_name.replace('.gz', '')\n  variant_name = variant_name.replace('.vcf', '')\n  \n  return variant_name.concat('.recal.R')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "prefix": "--tranches_file",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.split('/').slice(-1)[0]\n  variant_name = variant_name.replace('.gz', '')\n  variant_name = variant_name.replace('.vcf', '')\n  \n  return variant_name.concat('.tranches')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.split('/').slice(-1)[0]\n  variant_name = variant_name.replace('.gz', '')\n  variant_name = variant_name.replace('.vcf', '')\n  \n  return variant_name.concat('.recal')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": false,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  annotations = $job.inputs.use_annotation\n\n  cmd = []\n\n  for (i = 0; i < annotations.length; i++) {\n    cmd.push('--use_annotation', annotations[i])\n  }\n\n  return cmd.join(' ')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant = [].concat($job.inputs.variants)\n\n  cmd = []\n\n  for (i = 0; i < variant.length; i++) {\n    cmd.push('--variant', variant[i].path)\n  }\n\n  return cmd.join(' ')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  res = []\n  resources = [].concat($job.inputs.resource)\n  \n  for(i=0; i<resources.length; i++){\n    file_path = resources[i].path\n    file_name = file_path.split('/').slice(-1)[0]\n\n    if(file_name.includes('1000G_omni2')){\n      res.push(['--resource omni,prior=12,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n   \tif(file_name.includes('hapmap')){\n      res.push(['--resource hapmap,prior=15,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n    if(file_name.includes('1000G_phase1.snps')){\n      res.push(['--resource 1000G,prior=10,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n    if(file_name.includes('Mills_and_1000G')){\n      res.push(['--resource mills,prior=12,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n    if(file_name.includes('dbsnp')){\n      res.push(['--resource dbsnp,prior=2,truth=false,training=false,known=true',\n                 file_path].join(':'))\n    }\n  }\n  \n  return res.join(' ');\n\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "variants": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/variant-1.vcf",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "use_annotation": [
                            "use_annotation-string-value-1",
                            "use_annotation-string-value-2"
                        ],
                        "useAlleleSpecificAnnotations": true,
                        "trustAllPolymorphic": true,
                        "target_titv": null,
                        "stdThreshold": null,
                        "shrinkage": null,
                        "secondsBetweenProgressUpdates": null,
                        "scatterTranches": true,
                        "sample_every_Nth_variant": 8,
                        "sample": null,
                        "resource": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/hapmap_3.3.b37.vcf",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/dbsnp_137.b37.vcf",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.ext",
                            "class": "File",
                            "size": 0
                        },
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "priorCounts": null,
                        "output_model": "output_model-string-value",
                        "numKMeans": null,
                        "mode": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "minNumBadVariants": null,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "maximumMappingQuality": null,
                        "max_attempts": null,
                        "maxReadLength": null,
                        "maxNumTrainingData": null,
                        "maxNegativeGaussians": null,
                        "maxIterations": null,
                        "maxGaussians": null,
                        "maxFragmentLength": null,
                        "library": null,
                        "lenient": true,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "",
                        "intervals_file": null,
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "inputModel": {
                            "secondaryFiles": [],
                            "path": "/path/to/inputModel.ext",
                            "class": "File",
                            "size": 0
                        },
                        "ignore_filter": null,
                        "ignore_all_filters": true,
                        "filterTooShort": null,
                        "exclude_intervals_string": "",
                        "exclude_intervals_file": null,
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "dirichlet": null,
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cpu_per_job": 4,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "badLodCutoff": null,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 2,
                        "aggregate": null,
                        "addOutputSAMProgramRecord": true,
                        "TStranche": null,
                        "QUIET": true,
                        "PLFilterName": null,
                        "MQCapForLogitJitterTransform": null,
                        "no_cmdline_in_header": true,
                        "resources_files": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/1000G_omni2.5.b37.vcf",
                                "metadata": {
                                    "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2",
                                    "some": "value"
                                }
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/hapmap_3.3.b37.vcf",
                                "metadata": {
                                    "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                                }
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/1000G_phase1.snps.high_confidence.vcf",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/Mills_and_1000G_gold_standard.indels.vcf",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/dbsnp.vcf",
                                "class": "File",
                                "size": 0
                            }
                        ]
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/37",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789617,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" VariantRecalibrator --rscript_file variant-1.recal.R --tranches_file variant-1.tranches --output variant-1.recal --use_annotation use_annotation-string-value-1 --use_annotation use_annotation-string-value-2  --variant /path/to/variant-1.vcf  --resource hapmap,prior=15,truth=true,training=true,known=false:/path/to/hapmap_3.3.b37.vcf --resource dbsnp,prior=2,truth=false,training=false,known=true:/path/to/dbsnp_137.b37.vcf",
                "sbg:revision": 8,
                "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/37",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 347.6215754332105,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 8,
                "x": 2828.7156883762527,
                "sbg:createdOn": 1500296441,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-variantrecalibrator/8",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/27",
                        "sbg:modifiedOn": 1500296441
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/29",
                        "sbg:modifiedOn": 1500640370
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/30",
                        "sbg:modifiedOn": 1500888778
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/31",
                        "sbg:modifiedOn": 1502718067
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/33",
                        "sbg:modifiedOn": 1503405215
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/34",
                        "sbg:modifiedOn": 1504105752
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/35",
                        "sbg:modifiedOn": 1504273092
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/36",
                        "sbg:modifiedOn": 1504275180
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/37",
                        "sbg:modifiedOn": 1504789617
                    }
                ]
            },
            "label": "INDEL GATK VariantRecalibrator",
            "sbg:x": 2828.7156883762527,
            "sbg:y": 347.6215754332105
        },
        {
            "id": "#SNP_GATK_VariantRecalibrator",
            "inputs": [
                {
                    "id": "#SNP_GATK_VariantRecalibrator.variants",
                    "source": [
                        "#VCFtools_Sort.output_file"
                    ]
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.use_annotation",
                    "default": [
                        "QD",
                        "MQRankSum",
                        "FS",
                        "DP",
                        "ReadPosRankSum",
                        "SOR"
                    ]
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.resource",
                    "source": [
                        "#GATK_IndexFeatureFile_2.output_with_index",
                        "#GATK_IndexFeatureFile_4.output_with_index",
                        "#GATK_IndexFeatureFile.output_with_index",
                        "#GATK_IndexFeatureFile_3.output_with_index"
                    ]
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.mode",
                    "default": "SNP"
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.maxGaussians",
                    "default": 4
                }
            ],
            "outputs": [
                {
                    "id": "#SNP_GATK_VariantRecalibrator.tranches_file"
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.rscript_file"
                },
                {
                    "id": "#SNP_GATK_VariantRecalibrator.recal_file"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-variantrecalibrator/8",
                "label": "SNP GATK VariantRecalibrator",
                "description": "Build a recalibration model to score variant quality for filtering purposes.\n\n###**Overview**  \n\nThis tool performs the first pass in a two-stage process called Variant Quality Score Recalibration (VQSR). Specifically, it builds the model that will be used in the second step to actually filter variants. This model attempts to describe the relationship between variant annotations (such as QD, MQ and ReadPosRankSum, for example) and the probability that a variant is a true genetic variant versus a sequencing or data processing artifact. It is developed adaptively based on \"true sites\" provided as input, typically HapMap sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The result is a score called the VQSLOD that gets added to the INFO field of each variant. This score is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\n####**Summary of the VQSR procedure**\n\nThe purpose of variant recalibration is to assign a well-calibrated probability to each variant call in a call set. These probabilities can then be used to filter the variants with a greater level of accuracy and flexibility than can typically be achieved by traditional hard-filter (filtering on individual annotation value thresholds). The first pass consists of building a model that describes how variant annotation values co-vary with the truthfulness of variant calls in a training set, and then scoring all input variants according to the model. The second pass simply consists of specifying a target sensitivity value (which corresponds to an empirical VQSLOD cutoff) and applying filters to each variant call according to their ranking. The result is a VCF file in which variants have been assigned a score and filter status.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools do and how to use them for best results on your own data. \n\n###**Inputs**  \n- The input variants to be recalibrated. These variant calls must be annotated with the annotations that will be used for modeling. If the calls come from multiple samples, they must have been obtained by joint calling the samples, either directly (running HaplotypeCaller on all samples together) or via the GVCF workflow (HaplotypeCaller with -ERC GVCF per-sample then GenotypeGVCFs on the resulting gVCFs) which is more scalable.\n- Known, truth, and training sets to be used by the algorithm. See the method documentation linked above for more details. \n\n###**Outputs**  \n- A recalibration table file that will be used by the ApplyVQSR tool.\n- A tranches file that shows various metrics of the recalibration callset for slices of the data. \n  \n###**Usage example**  \n\n####**Recalibrating SNPs in exome data**\n\n    ./gatk-launch VariantRecalibrator \\\n       -R reference.fasta \\\n       -V input.vcf \\\n       --resource hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n       --resource omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n       --resource 1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf \\\n       --resource dbsnp,known=true,training=false,truth=false,prior=2.0 dbsnp_135.b37.vcf \\\n       -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n       -mode SNP \\\n       --recalFile output.recal \\\n       -tranchesFile output.tranches \\\n       --rscriptFile output.plots.R\n\n####**Allele-specific version of the SNP recalibration (beta)**\n\n     ./gatk-launch VariantRecalibrator \\\n       -R reference.fasta \\\n       -V input.vcf \\\n       -AS \\\n       --resource hapmap,known=false,training=true,truth=true,prior=15.0:hapmap_3.3.b37.sites.vcf \\\n       --resource omni,known=false,training=true,truth=false,prior=12.0:1000G_omni2.5.b37.sites.vcf \\\n       --resource 1000G,known=false,training=true,truth=false,prior=10.0:1000G_phase1.snps.high_confidence.vcf \\\n       --resource dbsnp,known=true,training=false,truth=false,prior=2.0 dbsnp_135.b37.vcf \\\n       -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n       -mode SNP \\\n       --recalFile output.AS.recal \\\n       --tranchesFile output.AS.tranches \\\n       --rscriptFile output.plots.AS.R\n\nNote that to use the allele-specific (AS) mode, the input VCF must have been produced using allele-specific annotations in HaplotypeCaller. Note also that each allele will have a separate line in the output recalibration file with its own VQSLOD and `culprit`, which will be transferred to the final VCF by the ApplyRecalibration tool.\n\n###**Caveats**  \n\n- The values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for your own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\n- Whole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\n- If you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\n- In order to create the model reporting plots, the Rscript executable needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more information on how to download and install R.\n\n###**Additional notes**\n\n- This tool only accepts a single input variant file unlike earlier version of GATK, which accepted multiple input variant files.\n- SNPs and indels must be recalibrated in separate runs, but it is not necessary to separate them into different files. See the tutorial linked above for an example workflow. Note that mixed records are treated as indels.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "VariantRecalibrator"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "One or more VCF files containing variants  This argument must be specified at least once",
                        "description": "One or more VCF files containing variants  This argument must be specified at least once.\n                              Required.",
                        "id": "#variants"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-an",
                        "sbg:stageInput": null,
                        "sbg:category": "Required Arguments",
                        "type": [
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ],
                        "label": "The names of the annotations which should used for calculations  This argument must be\n                              specified at least once",
                        "description": "The names of the annotations which should used for calculations  This argument must be\n                              specified at least once. Required.",
                        "id": "#use_annotation"
                    },
                    {
                        "sbg:altPrefix": "-AS",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useAlleleSpecificAnnotations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will attempt to use the allele-specific versions of\n                              the specified annotations",
                        "description": "If specified, the variant recalibrator will attempt to use the allele-specific versions of\n                              the specified annotations.  Default value: false. Possible values: {true, false}.",
                        "id": "#useAlleleSpecificAnnotations"
                    },
                    {
                        "sbg:altPrefix": "-allPoly",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--trustAllPolymorphic",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Trust that all the input training sets' unfiltered records contain only polymorphic sites\n                              to drastically speed up the computation",
                        "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites\n                              to drastically speed up the computation.  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#trustAllPolymorphic"
                    },
                    {
                        "sbg:altPrefix": "-titv",
                        "sbg:toolDefaultValue": "2",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--target_titv",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the\n                              optimization curve output figures",
                        "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the\n                              optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED\n                              FOR PLOTTING PURPOSES!  Default value: 2.15.",
                        "id": "#target_titv"
                    },
                    {
                        "sbg:altPrefix": "-std",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--stdThreshold",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Annotation value divergence threshold (number of standard deviations from the means)  \n                              Default value: 10",
                        "description": "Annotation value divergence threshold (number of standard deviations from the means)  \n                              Default value: 10.0.",
                        "id": "#stdThreshold"
                    },
                    {
                        "sbg:altPrefix": "-shrinkage",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--shrinkage",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The shrinkage parameter in the variational Bayes algorithm",
                        "description": "The shrinkage parameter in the variational Bayes algorithm.  Default value: 1.0.",
                        "id": "#shrinkage"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-scatterTranches",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--output_tranches_for_scatter",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output Tranches For Scatter",
                        "description": "Output tranches in a format appropriate to running VariantRecalibrator in scatter-gather",
                        "id": "#scatterTranches"
                    },
                    {
                        "sbg:altPrefix": "-sampleEvery",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample_every_Nth_variant",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Sample Every Nth Variant",
                        "description": "If specified, the variant recalibrator will use (and output) only a subset of variants consisting of every Nth variant where N is specified by this argument; for use with  -outputModel -- see argument details.",
                        "id": "#sample_every_Nth_variant"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-resource",
                        "sbg:stageInput": null,
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "A list of sites for which to apply a prior probability of being correct but which aren't\n                              used by the algorithm (training and truth sets are required to run)  This argument must be\n                              specified at least once",
                        "description": "A list of sites for which to apply a prior probability of being correct but which aren't\n                              used by the algorithm (training and truth sets are required to run)  This argument must be\n                              specified at least once. Required.",
                        "id": "#resource"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence  Default value: null",
                        "description": "Reference sequence  Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:toolDefaultValue": "SILENT",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-priorCounts",
                        "sbg:toolDefaultValue": "20",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--priorCounts",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The number of prior counts to use in the variational Bayes algorithm",
                        "description": "The number of prior counts to use in the variational Bayes algorithm.  Default value:\n                              20.0.",
                        "id": "#priorCounts"
                    },
                    {
                        "sbg:altPrefix": "-outputModel",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--output_model",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output Model",
                        "description": "If specified, the variant recalibrator will output the VQSR model to this file path.",
                        "id": "#output_model"
                    },
                    {
                        "sbg:altPrefix": "-nKM",
                        "sbg:toolDefaultValue": "100",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--numKMeans",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of k-means iterations  Default value: 100",
                        "description": "Number of k-means iterations  Default value: 100.",
                        "id": "#numKMeans"
                    },
                    {
                        "sbg:altPrefix": "-mode",
                        "sbg:toolDefaultValue": "SNP",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--mode",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Recalibration mode to employ  Default value: SNP",
                        "description": "Recalibration mode to employ  Default value: SNP. Possible values: {SNP, INDEL, BOTH}.",
                        "id": "#mode"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "sbg:altPrefix": "-minNumBad",
                        "sbg:toolDefaultValue": "1000",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minNumBadVariants",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum number of bad variants  Default value: 1000",
                        "description": "Minimum number of bad variants  Default value: 1000.",
                        "id": "#minNumBadVariants"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-max_attempts",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--max_attempts",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of attempts to build a model before failing  Default value: 1",
                        "description": "Number of attempts to build a model before failing  Default value: 1.",
                        "id": "#max_attempts"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxNumTrainingData",
                        "sbg:toolDefaultValue": "2500000",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxNumTrainingData",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of training data  Default value: 2500000",
                        "description": "Maximum number of training data  Default value: 2500000.",
                        "id": "#maxNumTrainingData"
                    },
                    {
                        "sbg:altPrefix": "-mNG",
                        "sbg:toolDefaultValue": "2",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxNegativeGaussians",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Max number of Gaussians for the negative model  Default value: 2",
                        "description": "Max number of Gaussians for the negative model  Default value: 2.",
                        "id": "#maxNegativeGaussians"
                    },
                    {
                        "sbg:altPrefix": "-mI",
                        "sbg:toolDefaultValue": "150",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxIterations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of VBEM iterations  Default value: 150",
                        "description": "Maximum number of VBEM iterations  Default value: 150.",
                        "id": "#maxIterations"
                    },
                    {
                        "sbg:altPrefix": "-mG",
                        "sbg:toolDefaultValue": "8",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxGaussians",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Max number of Gaussians for the positive model  Default value: 8",
                        "description": "Max number of Gaussians for the positive model  Default value: 8.",
                        "id": "#maxGaussians"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:toolDefaultValue": "1000000",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:toolDefaultValue": "UNION",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Of padding (in bp) to add to each interval you are including",
                        "description": "Of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-inputModel",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input_model",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input Model",
                        "description": "If specified, the variant recalibrator will read the VQSR model from this file path.",
                        "id": "#inputModel"
                    },
                    {
                        "sbg:altPrefix": "-ignoreFilter",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_filter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will also use variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times",
                        "description": "If specified, the variant recalibrator will also use variants marked as filtered by the\n                              specified filter name in the input VCF file  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#ignore_filter"
                    },
                    {
                        "sbg:altPrefix": "-ignoreAllFilters",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ignore_all_filters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, the variant recalibrator will ignore all input filters",
                        "description": "If specified, the variant recalibrator will ignore all input filters. Useful to rerun the\n                              VQSR from a filtered output file.  Default value: false. Possible values: {true, false}.",
                        "id": "#ignore_all_filters"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:toolDefaultValue": "30",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-dirichlet",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dirichlet",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The dirichlet parameter in the variational Bayes algorithm",
                        "description": "The dirichlet parameter in the variational Bayes algorithm.  Default value: 0.001.",
                        "id": "#dirichlet"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "CPU per job",
                        "description": "CPU per job",
                        "id": "#cpu_per_job"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:toolDefaultValue": "40",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:toolDefaultValue": "-1",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-badLodCutoff",
                        "sbg:toolDefaultValue": "-5",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--badLodCutoff",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "LOD score cutoff for selecting bad variants  Default value: -5",
                        "description": "LOD score cutoff for selecting bad variants  Default value: -5.0.",
                        "id": "#badLodCutoff"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-aggregate",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--aggregate",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Additional raw input variants to be used in building the model  This argument may be\n                              specified 0 or more times",
                        "description": "Additional raw input variants to be used in building the model  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#aggregate"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:altPrefix": "-tranche",
                        "sbg:toolDefaultValue": "[100",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--TStranche",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The levels of truth sensitivity at which to slice the data",
                        "description": "The levels of truth sensitivity at which to slice the data. (in percent, that is 1.0 for 1\n                              percent)  This argument may be specified 0 or more times. Default value: [100.0, 99.9,\n                              99.0, 90.0].",
                        "id": "#TStranche"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    },
                    {
                        "sbg:altPrefix": "-MQCap",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--MQCapForLogitJitterTransform",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Apply logit transform and jitter to MQ values  Default value: 0",
                        "description": "Apply logit transform and jitter to MQ values  Default value: 0.",
                        "id": "#MQCapForLogitJitterTransform"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tranches File",
                        "description": "The output tranches file used by ApplyRecalibration.",
                        "sbg:fileTypes": "TRANCHES",
                        "outputBinding": {
                            "glob": "*.tranches",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#tranches_file"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Rscript File",
                        "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
                        "sbg:fileTypes": "R",
                        "outputBinding": {
                            "glob": "*.recal.R",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#rscript_file"
                    },
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Recalibration File",
                        "description": "The output recal file used by ApplyRecalibration.",
                        "sbg:fileTypes": "RECAL",
                        "outputBinding": {
                            "glob": "*.recal",
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "id": "#recal_file"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--rscript_file",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.split('/').slice(-1)[0]\n  variant_name = variant_name.replace('.gz', '')\n  variant_name = variant_name.replace('.vcf', '')\n  \n  return variant_name.concat('.recal.R')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "prefix": "--tranches_file",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.split('/').slice(-1)[0]\n  variant_name = variant_name.replace('.gz', '')\n  variant_name = variant_name.replace('.vcf', '')\n  \n  return variant_name.concat('.tranches')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.split('/').slice(-1)[0]\n  variant_name = variant_name.replace('.gz', '')\n  variant_name = variant_name.replace('.vcf', '')\n  \n  return variant_name.concat('.recal')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": false,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  annotations = $job.inputs.use_annotation\n\n  cmd = []\n\n  for (i = 0; i < annotations.length; i++) {\n    cmd.push('--use_annotation', annotations[i])\n  }\n\n  return cmd.join(' ')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant = [].concat($job.inputs.variants)\n\n  cmd = []\n\n  for (i = 0; i < variant.length; i++) {\n    cmd.push('--variant', variant[i].path)\n  }\n\n  return cmd.join(' ')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  res = []\n  resources = [].concat($job.inputs.resource)\n  \n  for(i=0; i<resources.length; i++){\n    file_path = resources[i].path\n    file_name = file_path.split('/').slice(-1)[0]\n\n    if(file_name.includes('1000G_omni2')){\n      res.push(['--resource omni,prior=12,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n   \tif(file_name.includes('hapmap')){\n      res.push(['--resource hapmap,prior=15,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n    if(file_name.includes('1000G_phase1.snps')){\n      res.push(['--resource 1000G,prior=10,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n    if(file_name.includes('Mills_and_1000G')){\n      res.push(['--resource mills,prior=12,truth=true,training=true,known=false',\n                 file_path].join(':'))\n    }\n    \n    if(file_name.includes('dbsnp')){\n      res.push(['--resource dbsnp,prior=2,truth=false,training=false,known=true',\n                 file_path].join(':'))\n    }\n  }\n  \n  return res.join(' ');\n\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "variants": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/variant-1.vcf",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "use_annotation": [
                            "use_annotation-string-value-1",
                            "use_annotation-string-value-2"
                        ],
                        "useAlleleSpecificAnnotations": true,
                        "trustAllPolymorphic": true,
                        "target_titv": null,
                        "stdThreshold": null,
                        "shrinkage": null,
                        "secondsBetweenProgressUpdates": null,
                        "scatterTranches": true,
                        "sample_every_Nth_variant": 8,
                        "sample": null,
                        "resource": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/hapmap_3.3.b37.vcf",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/dbsnp_137.b37.vcf",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.ext",
                            "class": "File",
                            "size": 0
                        },
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "priorCounts": null,
                        "output_model": "output_model-string-value",
                        "numKMeans": null,
                        "mode": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "minNumBadVariants": null,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "maximumMappingQuality": null,
                        "max_attempts": null,
                        "maxReadLength": null,
                        "maxNumTrainingData": null,
                        "maxNegativeGaussians": null,
                        "maxIterations": null,
                        "maxGaussians": null,
                        "maxFragmentLength": null,
                        "library": null,
                        "lenient": true,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "",
                        "intervals_file": null,
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "inputModel": {
                            "secondaryFiles": [],
                            "path": "/path/to/inputModel.ext",
                            "class": "File",
                            "size": 0
                        },
                        "ignore_filter": null,
                        "ignore_all_filters": true,
                        "filterTooShort": null,
                        "exclude_intervals_string": "",
                        "exclude_intervals_file": null,
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "dirichlet": null,
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cpu_per_job": 4,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "badLodCutoff": null,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 2,
                        "aggregate": null,
                        "addOutputSAMProgramRecord": true,
                        "TStranche": null,
                        "QUIET": true,
                        "PLFilterName": null,
                        "MQCapForLogitJitterTransform": null,
                        "no_cmdline_in_header": true,
                        "resources_files": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/1000G_omni2.5.b37.vcf",
                                "metadata": {
                                    "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2",
                                    "some": "value"
                                }
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/hapmap_3.3.b37.vcf",
                                "metadata": {
                                    "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                                }
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/1000G_phase1.snps.high_confidence.vcf",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/Mills_and_1000G_gold_standard.indels.vcf",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/dbsnp.vcf",
                                "class": "File",
                                "size": 0
                            }
                        ]
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/37",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789617,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" VariantRecalibrator --rscript_file variant-1.recal.R --tranches_file variant-1.tranches --output variant-1.recal --use_annotation use_annotation-string-value-1 --use_annotation use_annotation-string-value-2  --variant /path/to/variant-1.vcf  --resource hapmap,prior=15,truth=true,training=true,known=false:/path/to/hapmap_3.3.b37.vcf --resource dbsnp,prior=2,truth=false,training=false,known=true:/path/to/dbsnp_137.b37.vcf",
                "sbg:revision": 8,
                "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/37",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 147.85946252052486,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 8,
                "x": 2822.6677630742797,
                "sbg:createdOn": 1500296441,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-variantrecalibrator/8",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/27",
                        "sbg:modifiedOn": 1500296441
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/29",
                        "sbg:modifiedOn": 1500640370
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/30",
                        "sbg:modifiedOn": 1500888778
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/31",
                        "sbg:modifiedOn": 1502718067
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/33",
                        "sbg:modifiedOn": 1503405215
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/34",
                        "sbg:modifiedOn": 1504105752
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/35",
                        "sbg:modifiedOn": 1504273092
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/36",
                        "sbg:modifiedOn": 1504275180
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-variantrecalibrator/37",
                        "sbg:modifiedOn": 1504789617
                    }
                ]
            },
            "label": "SNP GATK VariantRecalibrator",
            "sbg:x": 2822.6677630742797,
            "sbg:y": 147.85946252052486
        },
        {
            "id": "#GATK_GenotypeGVCFs",
            "inputs": [
                {
                    "id": "#GATK_GenotypeGVCFs.variants",
                    "source": [
                        "#GATK_HaplotypeCaller.vcf_output"
                    ]
                },
                {
                    "id": "#GATK_GenotypeGVCFs.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_GenotypeGVCFs.memory_per_job",
                    "default": 2000
                },
                {
                    "id": "#GATK_GenotypeGVCFs.memory_overhead_per_job",
                    "default": 60
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_GenotypeGVCFs.vcf"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-genotypegvcfs/9",
                "label": "GATK GenotypeGVCFs",
                "description": "Perform joint genotyping on one or more samples pre-called with HaplotypeCaller.\n\n###**Overview**  \nThis tool is designed to perform joint genotyping on multiple samples pre-called with HaplotypeCaller to produce a multi-sample callset in a highly scalable manner. However it can also be run on a single sample at a time to produce a single-sample callset. In any case, the input samples must possess genotype likelihoods produced by HaplotypeCaller with `-ERC GVCF` or `-ERC BP_RESOLUTION`.re-genotype the newly merged record, and then re-annotate it.\n\n###**Input**  \nOne or more GVCFs produced by in HaplotypeCaller with the `-ERC GVCF` or `-ERC BP_RESOLUTION` settings, containing the samples to joint-genotype. \n\n###**Output**  \nA final VCF in which all samples have been jointly genotyped. \n\n###**Usage example**   \n\n####**Perform joint genotyping on a set of GVCFs enumerated in the command line**\n\n     gatk-launch --javaOptions \"-Xmx4g\" GenotypeGVCFs \\\n       -R reference.fasta \\\n       -V input1.g.vcf \\\n       -V input2.g.vcf \\\n       -V input3.g.vcf \\\n       -O output.vcf\n\n####**Perform joint genotyping on a set of GVCFs listed in a text file, one per line**\n\n     gatk-launch --javaOptions \"-Xmx4g\" GenotypeGVCFs \\\n       -R reference.fasta \\\n       -V input_gvcfs.list \\\n       -O output.vcf\n \n###**Caveat**  \nOnly GVCF files produced by HaplotypeCaller (or CombineGVCFs) can be used as input for this tool. Some other programs produce files that they call GVCFs but those lack some important information (accurate genotype likelihoods for every position) that GenotypeGVCFs requires for its operation. \n\n###**Special note on ploidy**  \nThis tool is able to handle any ploidy (or mix of ploidies) intelligently; there is no need to specify ploidy for non-diploid organisms.  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "GenotypeGVCFs"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "A VCF file containing variants  Required",
                        "description": "A VCF file containing variants  Required.",
                        "id": "#variants"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-newQual",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useNewAFCalculator",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If provided, we will use the new AF model instead of the so-called exact model  Default\n                              value: false",
                        "description": "If provided, we will use the new AF model instead of the so-called exact model  Default\n                              value: false. Possible values: {true, false}.",
                        "id": "#useNewAFCalculator"
                    },
                    {
                        "sbg:altPrefix": "-stand_call_conf",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--standard_min_confidence_threshold_for_calling",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The minimum phred-scaled confidence threshold at which variants should be called  Default\n                              value: 10",
                        "description": "The minimum phred-scaled confidence threshold at which variants should be called  Default\n                              value: 10.0.",
                        "id": "#standard_min_confidence_threshold_for_calling"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-ploidy",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample_ploidy",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ploidy (number of chromosomes) per sample",
                        "description": "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in\n                              each pool * Sample Ploidy).  Default value: 2.",
                        "id": "#sample_ploidy"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence file  Required",
                        "description": "Reference sequence file  Required.",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory in MB",
                        "description": "Memory per job in MB.",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:toolDefaultValue": "64",
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "description": "Memory overhead per job.",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-maxGT",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--max_genotype_count",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of genotypes to consider at any site  Default value: 1024",
                        "description": "Maximum number of genotypes to consider at any site  Default value: 1024.",
                        "id": "#max_genotype_count"
                    },
                    {
                        "sbg:altPrefix": "-maxAltAlleles",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--max_alternate_alleles",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of alternate alleles to genotype  Default value: 6",
                        "description": "Maximum number of alternate alleles to genotype  Default value: 6.",
                        "id": "#max_alternate_alleles"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are including",
                        "description": "Amount of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-inputPrior",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input_prior",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input prior for calls  This argument may be specified 0 or more times",
                        "description": "Input prior for calls  This argument may be specified 0 or more times. Default value:\n                              null.",
                        "id": "#input_prior"
                    },
                    {
                        "sbg:altPrefix": "-indelHeterozygosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--indel_heterozygosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Heterozygosity for indel calling",
                        "description": "Heterozygosity for indel calling.  See the GATKDocs for heterozygosity for full details on\n                              the meaning of this population genetics concept  Default value: 1.25E-4.",
                        "id": "#indel_heterozygosity"
                    },
                    {
                        "sbg:altPrefix": "-heterozygosityStandardDeviation",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--heterozygosity_stdev",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Standard deviation of eterozygosity for SNP and indel calling",
                        "description": "Standard deviation of eterozygosity for SNP and indel calling.  Default value: 0.01.",
                        "id": "#heterozygosity_stdev"
                    },
                    {
                        "sbg:altPrefix": "-hets",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--heterozygosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Heterozygosity value used to compute prior likelihoods for any locus",
                        "description": "Heterozygosity value used to compute prior likelihoods for any locus.  See the GATKDocs\n                              for full details on the meaning of this population genetics concept  Default value: 0.001.",
                        "id": "#heterozygosity"
                    },
                    {
                        "sbg:altPrefix": "-G",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--group",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "One or more classes/groups of annotations to apply to variant calls  This argument may be\n                              specified 0 or more times",
                        "description": "One or more classes/groups of annotations to apply to variant calls  This argument may be\n                              specified 0 or more times. Default value: [StandardAnnotation].",
                        "id": "#group"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-D",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dbsnp",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "DbSNP file  Default value: null",
                        "description": "DbSNP file  Default value: null.",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "id": "#dbsnp"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-AX",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annotationsToExclude",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "One or more specific annotations to exclude from recomputation",
                        "description": "One or more specific annotations to exclude from recomputation.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#annotationsToExclude"
                    },
                    {
                        "sbg:altPrefix": "-A",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annotation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "One or more specific annotations to recompute",
                        "description": "One or more specific annotations to recompute.  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#annotation"
                    },
                    {
                        "sbg:altPrefix": "-nda",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annotateNDA",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If provided, we will annotate records with the number of alternate alleles that were\n                              discovered (but not necessarily genotyped) at a given site  Default value: false",
                        "description": "If provided, we will annotate records with the number of alternate alleles that were\n                              discovered (but not necessarily genotyped) at a given site  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#annotateNDA"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Output VCF",
                        "description": "Output VCF.",
                        "sbg:fileTypes": "VCF",
                        "outputBinding": {
                            "glob": "*.vcf"
                        },
                        "id": "#vcf"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return '--output ' + variant_namebase.concat('.vcf')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  variants = [].concat($job.inputs.variants)\n\n  cmd = []\n\n  for (i = 0; i < variants.length; i++) {\n    cmd.push('--variant', variants[i].path)\n  }\n\n  return cmd.join(' ')\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "variants": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/variant-1.ext",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/variant-2.ext",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "useNewAFCalculator": true,
                        "standard_min_confidence_threshold_for_calling": null,
                        "secondsBetweenProgressUpdates": null,
                        "sample_ploidy": null,
                        "sample": null,
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.ext",
                            "class": "File",
                            "size": 0
                        },
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "maximumMappingQuality": null,
                        "max_genotype_count": null,
                        "max_alternate_alleles": null,
                        "maxReadLength": null,
                        "maxFragmentLength": null,
                        "library": null,
                        "lenient": true,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "",
                        "intervals_file": null,
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "input_prior": null,
                        "indel_heterozygosity": null,
                        "heterozygosity_stdev": null,
                        "heterozygosity": null,
                        "group": null,
                        "filterTooShort": null,
                        "exclude_intervals_string": "",
                        "exclude_intervals_file": null,
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "dbsnp": null,
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "annotationsToExclude": null,
                        "annotation": null,
                        "annotateNDA": true,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 2,
                        "addOutputSAMProgramRecord": true,
                        "QUIET": true,
                        "PLFilterName": null
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:copyOf": "vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/22",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789598,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/22",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" GenotypeGVCFs --reference /path/to/reference.ext  --output variant-1.vcf  --variant /path/to/variant-1.ext --variant /path/to/variant-2.ext",
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 168.50049022173164,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:wrapperAuthor": "filip_tubic",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-genotypegvcfs/9",
                "sbg:latestRevision": 9,
                "x": 2007.8604319437497,
                "sbg:createdOn": 1500296429,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/12",
                        "sbg:modifiedOn": 1500296429
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/13",
                        "sbg:modifiedOn": 1500640346
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/14",
                        "sbg:modifiedOn": 1500888771
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/15",
                        "sbg:modifiedOn": 1502718039
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/16",
                        "sbg:modifiedOn": 1503405179
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/17",
                        "sbg:modifiedOn": 1504105716
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/18",
                        "sbg:modifiedOn": 1504273013
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/19",
                        "sbg:modifiedOn": 1504275157
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/20",
                        "sbg:modifiedOn": 1504539153
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/22",
                        "sbg:modifiedOn": 1504789598
                    }
                ]
            },
            "label": "GATK GenotypeGVCFs",
            "scatter": "#GATK_GenotypeGVCFs.variants",
            "sbg:y": 168.50049022173164,
            "sbg:x": 2007.8604319437497
        },
        {
            "id": "#GATK_HaplotypeCaller",
            "inputs": [
                {
                    "id": "#GATK_HaplotypeCaller.standard_min_confidence_threshold_for_calling",
                    "default": 30
                },
                {
                    "id": "#GATK_HaplotypeCaller.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_HaplotypeCaller.reads",
                    "source": [
                        "#GATK_ApplyBQSR.output"
                    ]
                },
                {
                    "id": "#GATK_HaplotypeCaller.memory_per_job",
                    "source": [
                        "#memory_per_job"
                    ]
                },
                {
                    "id": "#GATK_HaplotypeCaller.memory_overhead_per_job",
                    "default": 64
                },
                {
                    "id": "#GATK_HaplotypeCaller.intervals_file",
                    "source": [
                        "#intervals_file"
                    ]
                },
                {
                    "id": "#GATK_HaplotypeCaller.interval_set_rule",
                    "default": "UNION"
                },
                {
                    "id": "#GATK_HaplotypeCaller.genotyping_mode",
                    "default": "DISCOVERY"
                },
                {
                    "id": "#GATK_HaplotypeCaller.emitRefConfidence",
                    "default": "GVCF"
                },
                {
                    "id": "#GATK_HaplotypeCaller.db_snp",
                    "source": [
                        "#GATK_IndexFeatureFile.output_with_index"
                    ]
                },
                {
                    "id": "#GATK_HaplotypeCaller.createOutputVariantIndex",
                    "default": true
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_HaplotypeCaller.vcf_output"
                },
                {
                    "id": "#GATK_HaplotypeCaller.bam_output"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-haplotypecaller/14",
                "label": "GATK HaplotypeCaller",
                "description": "Call germline SNPs and indels via local re-assembly of haplotypes.\n\n###**Overview**  \n\nThe HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.\n\nIn the GVCF workflow used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate GVCF (not to be used in final analysis), which can then be used in GenotypeGVCFs for joint genotyping of multiple samples in a very efficient way. The GVCF workflow enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).\n\nIn addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use Mutect2 instead.\n\nFinally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers, on the condition that the input read data has previously been processed according to our recommendations as documented here. \n\n###**Input**  \nInput bam file(s) from which to make variant calls\n\n###**Output**  \nEither a VCF or GVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant recalibration (Best Practice) or hard-filtering before use in downstream analyses. If using the GVCF workflow, the output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.\n\n###**Usage examples**  \nThese are example commands that show how to run HaplotypeCaller for typical use cases. Have a look at the method documentation for the basic GVCF workflow.\n\n####**Single-sample GVCF calling (outputs intermediate GVCF)**\n\n     gatk-launch --javaOptions \"-Xmx4g\" HaplotypeCaller  \\\n       -R reference.fasta \\\n       -I input.bam \\\n       -O output.g.vcf \\\n       -ERC GVCF\n\n####**Single-sample GVCF calling with allele-specific annotations**\n\n     gatk-launch --javaOptions \"-Xmx4g\" HaplotypeCaller  \\\n       -R reference.fasta \\\n       -I input.bam \\\n       -O output.g.vcf \\\n       -ERC GVCF \\\n       -G Standard \\\n       -G AS_Standard\n\n####**Variant calling with bamout to show realigned reads**\n\n     gatk-launch --javaOptions \"-Xmx4g\" HaplotypeCaller  \\\n       -R reference.fasta \\\n       -I input.bam \\\n       -O output.vcf \\\n       -bamout bamout.bam\n\n###**Caveats**\n\n- We have not yet fully tested the interaction between the GVCF-based calling or the multisample calling and the RNAseq-specific functionalities. Use those in combination at your own risk.\n\n###**Special note on ploidy**\n\nThis tool is able to handle many non-diploid use cases; the desired ploidy can be specified using the -ploidy argument. Note however that very high ploidies (such as are encountered in large pooled experiments) may cause performance challenges including excessive slowness. We are working on resolving these limitations.\n\n###**Additional Notes**\n- When working with PCR-free data, be sure to set `-pcr_indel_model NONE` (see argument below).\n- When running in `-ERC GVCF` or `-ERC BP_RESOLUTION` modes, the confidence threshold is automatically set to 0. This cannot be overridden by the command line. The threshold can be set manually to the desired level in the next step of the workflow (GenotypeGVCFs)\n- We recommend using a list of intervals to speed up analysis. See this document for details.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "HaplotypeCaller"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-newQual",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useNewAFCalculator",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If provided, we will use the new AF model instead of the so-called exact model  Default\n                              value: false",
                        "description": "If provided, we will use the new AF model instead of the so-called exact model  Default\n                              value: false. Possible values: {true, false}.",
                        "id": "#useNewAFCalculator"
                    },
                    {
                        "sbg:altPrefix": "-useFilteredReadsForAnnotations",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useFilteredReadsForAnnotations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use the contamination-filtered read maps for the purposes of annotating variants  Default\n                              value: false",
                        "description": "Use the contamination-filtered read maps for the purposes of annotating variants  Default\n                              value: false. Possible values: {true, false}.",
                        "id": "#useFilteredReadsForAnnotations"
                    },
                    {
                        "sbg:altPrefix": "-useDoublePrecision",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useDoublePrecision",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use double precision in the native pairHmm",
                        "description": "Use double precision in the native pairHmm. This is slower but matches the java\n                              implementation better  Default value: false. Possible values: {true, false}.",
                        "id": "#useDoublePrecision"
                    },
                    {
                        "sbg:altPrefix": "-allelesTrigger",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useAllelesTrigger",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use additional trigger on variants found in an external alleles file  Default value:\n                              false",
                        "description": "Use additional trigger on variants found in an external alleles file  Default value:\n                              false. Possible values: {true, false}.",
                        "id": "#useAllelesTrigger"
                    },
                    {
                        "sbg:altPrefix": "-stand_call_conf",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--standard_min_confidence_threshold_for_calling",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The minimum phred-scaled confidence threshold at which variants should be called  Default\n                              value: 10",
                        "description": "The minimum phred-scaled confidence threshold at which variants should be called  Default\n                              value: 10.0.",
                        "id": "#standard_min_confidence_threshold_for_calling"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-ploidy",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample_ploidy",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ploidy (number of chromosomes) per sample",
                        "description": "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in\n                              each pool * Sample Ploidy).  Default value: 2.",
                        "id": "#sample_ploidy"
                    },
                    {
                        "sbg:altPrefix": "-sn",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample_name",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Name of single sample to use from a multi-sample bam  Default value: null",
                        "description": "Name of single sample to use from a multi-sample bam  Default value: null.",
                        "id": "#sample_name"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence file  Required",
                        "description": "Reference sequence file  Required.",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-recoverDanglingHeads",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--recoverDanglingHeads",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument is deprecated since version 3",
                        "description": "This argument is deprecated since version 3.3  Default value: false. Possible values:\n                              {true, false}.",
                        "id": "#recoverDanglingHeads"
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".bai"
                            ]
                        },
                        "label": "BAM/SAM/CRAM file containing reads  This argument must be specified at least once",
                        "description": "BAM/SAM/CRAM file containing reads  This argument must be specified at least once.\n                              Required.",
                        "sbg:fileTypes": "BAM",
                        "id": "#reads"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readShardSize",
                        "sbg:toolDefaultValue": "-1",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readShardSize",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read Shard Size",
                        "description": "Maximum size of each read shard, in bases. Set to -1 for one shard per interval (or one shard per contig, if intervals are not explicitly specified). For good performance, this should typically be much larger than the maximum assembly region size.",
                        "id": "#readShardSize"
                    },
                    {
                        "sbg:altPrefix": "-readShardPadding",
                        "sbg:toolDefaultValue": "100",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readShardPadding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read Shard Padding",
                        "description": "Each read shard has this many bases of extra context on each side. Read shards must have as much or more padding than assembly regions.",
                        "id": "#readShardPadding"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-globalMAPQ",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--phredScaledGlobalReadMismappingRate",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The global assumed mismapping rate for reads  Default value: 45",
                        "description": "The global assumed mismapping rate for reads  Default value: 45.",
                        "id": "#phredScaledGlobalReadMismappingRate"
                    },
                    {
                        "sbg:altPrefix": "-pcrModel",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NONE",
                                    "HOSTILE",
                                    "AGGRESSIVE",
                                    "CONSERVATIVE"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--pcr_indel_model",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The PCR indel model to use  Default value: CONSERVATIVE",
                        "description": "The PCR indel model to use  Default value: CONSERVATIVE. Possible values: {NONE, HOSTILE,\n                              AGGRESSIVE, CONSERVATIVE}.",
                        "id": "#pcr_indel_model"
                    },
                    {
                        "sbg:altPrefix": "-out_mode",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "EMIT_VARIANTS_ONLY",
                                    "EMIT_ALL_CONFIDENT_SITES",
                                    "EMIT_ALL_SITES"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--output_mode",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Specifies which type of calls we should output  Default value: EMIT_VARIANTS_ONLY",
                        "description": "Specifies which type of calls we should output  Default value: EMIT_VARIANTS_ONLY.\n                              Possible values: {EMIT_VARIANTS_ONLY, EMIT_ALL_CONFIDENT_SITES, EMIT_ALL_SITES}.",
                        "id": "#output_mode"
                    },
                    {
                        "sbg:altPrefix": "-numPruningSamples",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--numPruningSamples",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of samples that must pass the minPruning threshold  Default value: 1",
                        "description": "Number of samples that must pass the minPruning threshold  Default value: 1.",
                        "id": "#numPruningSamples"
                    },
                    {
                        "sbg:altPrefix": "-threads",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--nativePairHmmThreads",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "How many threads should a native pairHMM implementation use  Default value: 1",
                        "description": "How many threads should a native pairHMM implementation use  Default value: 1.",
                        "id": "#nativePairHmmThreads"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 20",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 20.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-mbq",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--min_base_quality_score",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum base quality required to consider a base for calling  Default value: 10",
                        "description": "Minimum base quality required to consider a base for calling  Default value: 10.",
                        "id": "#min_base_quality_score"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "sbg:altPrefix": "-minPruning",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minPruning",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum support to not prune paths in the graph  Default value: 2",
                        "description": "Minimum support to not prune paths in the graph  Default value: 2.",
                        "id": "#minPruning"
                    },
                    {
                        "sbg:altPrefix": "-minDanglingBranchLength",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minDanglingBranchLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum length of a dangling branch to attempt recovery  Default value: 4",
                        "description": "Minimum length of a dangling branch to attempt recovery  Default value: 4.",
                        "id": "#minDanglingBranchLength"
                    },
                    {
                        "sbg:altPrefix": "-minAssemblyRegionSize",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minAssemblyRegionSize",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum size of an assembly region  Default value: 50",
                        "description": "Minimum size of an assembly region  Default value: 50.",
                        "id": "#minAssemblyRegionSize"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "HaplotypeCaller Memory Per Job",
                        "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs.",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "HaplotypeCaller Memory Overhead Per Job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-maxGT",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--max_genotype_count",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of genotypes to consider at any site  Default value: 1024",
                        "description": "Maximum number of genotypes to consider at any site  Default value: 1024.",
                        "id": "#max_genotype_count"
                    },
                    {
                        "sbg:altPrefix": "-maxAltAlleles",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--max_alternate_alleles",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of alternate alleles to genotype  Default value: 6",
                        "description": "Maximum number of alternate alleles to genotype  Default value: 6.",
                        "id": "#max_alternate_alleles"
                    },
                    {
                        "sbg:altPrefix": "-maxReadsPerAlignmentStart",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadsPerAlignmentStart",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of reads to retain per alignment start position",
                        "description": "Maximum number of reads to retain per alignment start position. Reads above this threshold\n                              will be downsampled. Set to 0 to disable.  Default value: 50.",
                        "id": "#maxReadsPerAlignmentStart"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxProbPropagationDistance",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxProbPropagationDistance",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Upper limit on how many bases away probability mass can be moved around when calculating\n                              the boundaries between active and inactive assembly regions  Default value: 50",
                        "description": "Upper limit on how many bases away probability mass can be moved around when calculating\n                              the boundaries between active and inactive assembly regions  Default value: 50.",
                        "id": "#maxProbPropagationDistance"
                    },
                    {
                        "sbg:altPrefix": "-maxNumHaplotypesInPopulation",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxNumHaplotypesInPopulation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum number of haplotypes to consider for your population  Default value: 128",
                        "description": "Maximum number of haplotypes to consider for your population  Default value: 128.",
                        "id": "#maxNumHaplotypesInPopulation"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-maxAssemblyRegionSize",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxAssemblyRegionSize",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum size of an assembly region  Default value: 300",
                        "description": "Maximum size of an assembly region  Default value: 300.",
                        "id": "#maxAssemblyRegionSize"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-kmerSize",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--kmerSize",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Kmer size to use in the read threading assembler  This argument may be specified 0 or more\n                              times",
                        "description": "Kmer size to use in the read threading assembler  This argument may be specified 0 or more\n                              times. Default value: [10, 25].",
                        "id": "#kmerSize"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are including",
                        "description": "Amount of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-inputPrior",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input_prior",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input prior for calls  This argument may be specified 0 or more times",
                        "description": "Input prior for calls  This argument may be specified 0 or more times. Default value:\n                              null.",
                        "id": "#input_prior"
                    },
                    {
                        "sbg:altPrefix": "-indelHeterozygosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--indel_heterozygosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Heterozygosity for indel calling",
                        "description": "Heterozygosity for indel calling.  See the GATKDocs for heterozygosity for full details on\n                              the meaning of this population genetics concept  Default value: 1.25E-4.",
                        "id": "#indel_heterozygosity"
                    },
                    {
                        "sbg:altPrefix": "-ERCIS",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--indelSizeToEliminateInRefModel",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The size of an indel to check for in the reference model  Default value: 10",
                        "description": "The size of an indel to check for in the reference model  Default value: 10.",
                        "id": "#indelSizeToEliminateInRefModel"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Include interval name in output name",
                        "description": "Include interval name in output name.",
                        "id": "#include_interval_name_in_output_name"
                    },
                    {
                        "sbg:altPrefix": "-heterozygosityStandardDeviation",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--heterozygosity_stdev",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Standard deviation of eterozygosity for SNP and indel calling",
                        "description": "Standard deviation of eterozygosity for SNP and indel calling.  Default value: 0.01.",
                        "id": "#heterozygosity_stdev"
                    },
                    {
                        "sbg:altPrefix": "-hets",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--heterozygosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Heterozygosity value used to compute prior likelihoods for any locus",
                        "description": "Heterozygosity value used to compute prior likelihoods for any locus.  See the GATKDocs\n                              for full details on the meaning of this population genetics concept  Default value: 0.001.",
                        "id": "#heterozygosity"
                    },
                    {
                        "sbg:altPrefix": "-G",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--group",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "One or more classes/groups of annotations to apply to variant calls  This argument may be\n                              specified 0 or more times",
                        "description": "One or more classes/groups of annotations to apply to variant calls  This argument may be\n                              specified 0 or more times. Default value: [StandardAnnotation, StandardHCAnnotation].",
                        "id": "#group"
                    },
                    {
                        "sbg:altPrefix": "-graph",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--graphOutput",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Write debug assembly graph information to this file  Default value: null",
                        "description": "Write debug assembly graph information to this file  Default value: null.",
                        "id": "#graphOutput"
                    },
                    {
                        "sbg:altPrefix": "-gt_mode",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "DISCOVERY",
                                    "GENOTYPE_GIVEN_ALLELES"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--genotyping_mode",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Specifies how to determine the alternate alleles to use for genotyping  Default value:\n                              DISCOVERY",
                        "description": "Specifies how to determine the alternate alleles to use for genotyping  Default value:\n                              DISCOVERY. Possible values: {DISCOVERY, GENOTYPE_GIVEN_ALLELES}.",
                        "id": "#genotyping_mode"
                    },
                    {
                        "sbg:altPrefix": "-gcpHMM",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--gcpHMM",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Flat gap continuation penalty for use in the Pair HMM  Default value: 10",
                        "description": "Flat gap continuation penalty for use in the Pair HMM  Default value: 10.",
                        "id": "#gcpHMM"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-XA",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeAnnotation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "One or more specific annotations to exclude  This argument may be specified 0 or more\n                              times",
                        "description": "One or more specific annotations to exclude  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#excludeAnnotation"
                    },
                    {
                        "sbg:altPrefix": "-ERC",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NONE",
                                    "BP_RESOLUTION",
                                    "GVCF"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--emitRefConfidence",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mode for emitting reference confidence scores  Default value: NONE",
                        "description": "Mode for emitting reference confidence scores  Default value: NONE. Possible values:\n                              {NONE, BP_RESOLUTION, GVCF}.",
                        "id": "#emitRefConfidence"
                    },
                    {
                        "sbg:altPrefix": "-dontUseSoftClippedBases",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontUseSoftClippedBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not analyze soft clipped bases in the reads  Default value: false",
                        "description": "Do not analyze soft clipped bases in the reads  Default value: false. Possible values:\n                              {true, false}.",
                        "id": "#dontUseSoftClippedBases"
                    },
                    {
                        "sbg:altPrefix": "-dontTrimActiveRegions",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontTrimActiveRegions",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, we will not trim down the active region from the full region (active +\n                              extension) to just the active interval for genotyping  Default value: false",
                        "description": "If specified, we will not trim down the active region from the full region (active +\n                              extension) to just the active interval for genotyping  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#dontTrimActiveRegions"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-dontIncreaseKmerSizesForCycles",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontIncreaseKmerSizesForCycles",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable iterating over kmer sizes when graph cycles are detected  Default value: false",
                        "description": "Disable iterating over kmer sizes when graph cycles are detected  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#dontIncreaseKmerSizesForCycles"
                    },
                    {
                        "sbg:altPrefix": "-doNotRunPhysicalPhasing",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--doNotRunPhysicalPhasing",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable physical phasing  Default value: false",
                        "description": "Disable physical phasing  Default value: false. Possible values: {true, false}.",
                        "id": "#doNotRunPhysicalPhasing"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-disableOptimizations",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableOptimizations",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Don't skip calculations in ActiveRegions with no variants  Default value: false",
                        "description": "Don't skip calculations in ActiveRegions with no variants  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#disableOptimizations"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-debug",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--debug",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Print out very verbose debug information about each triggering active region  Default\n                              value: false",
                        "description": "Print out very verbose debug information about each triggering active region  Default\n                              value: false. Possible values: {true, false}.",
                        "id": "#debug"
                    },
                    {
                        "sbg:altPrefix": "-D",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if($job.inputs.db_snp)\n    return '--dbsnp ' + [].concat($job.inputs.db_snp)[0].path\n  else return ''\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "label": "DbSNP file  Default value: null",
                        "description": "DbSNP file  Default value: null.",
                        "sbg:fileTypes": "VCF",
                        "id": "#db_snp"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Threads per job (nct)",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases).",
                        "id": "#cpus_per_job"
                    },
                    {
                        "sbg:altPrefix": "-contamination",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--contamination_fraction_to_filter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Fraction of contamination in sequencing data (for all samples) to aggressively remove \n                              Default value: 0",
                        "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove \n                              Default value: 0.0.",
                        "id": "#contamination_fraction_to_filter"
                    },
                    {
                        "sbg:altPrefix": "-contaminationFile",
                        "sbg:category": "Advanced Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--contamination_fraction_per_sample_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Tab-separated File containing fraction of contamination in sequencing data (per sample) to\n                              aggressively remove",
                        "description": "Tab-separated File containing fraction of contamination in sequencing data (per sample) to\n                              aggressively remove. Format should be \"<SampleID><TAB><Contamination>\" (Contamination is\n                              double) per line; No header.  Default value: null.",
                        "id": "#contamination_fraction_per_sample_file"
                    },
                    {
                        "sbg:altPrefix": "-consensus",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--consensus",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Consensus mode  Default value: false",
                        "description": "Consensus mode  Default value: false. Possible values: {true, false}.",
                        "id": "#consensus"
                    },
                    {
                        "sbg:altPrefix": "-comp",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--comp",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Comparison VCF file(s)  This argument may be specified 0 or more times",
                        "description": "Comparison VCF file(s)  This argument may be specified 0 or more times. Default value:\n                              null.",
                        "id": "#comp"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-bqst",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--base_quality_score_threshold",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Base qualities below this threshold will be reduced to the minimum (6)  Default value: 18",
                        "description": "Base qualities below this threshold will be reduced to the minimum (6)  Default value: 18.",
                        "id": "#base_quality_score_threshold"
                    },
                    {
                        "sbg:altPrefix": "-bamWriterType",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL_POSSIBLE_HAPLOTYPES",
                                    "CALLED_HAPLOTYPES"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--bamWriterType",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Which haplotypes should be written to the BAM  Default value: CALLED_HAPLOTYPES",
                        "description": "Which haplotypes should be written to the BAM  Default value: CALLED_HAPLOTYPES. Possible\n                              values: {ALL_POSSIBLE_HAPLOTYPES, CALLED_HAPLOTYPES}.",
                        "id": "#bamWriterType"
                    },
                    {
                        "sbg:altPrefix": "-bamout",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "File to which assembled haplotypes should be written  Default value: null",
                        "description": "File to which assembled haplotypes should be written  Default value: null.",
                        "id": "#bamOutput"
                    },
                    {
                        "sbg:altPrefix": "-assemblyRegionPadding",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--assemblyRegionPadding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of additional bases of context to include around each assembly region  Default\n                              value: 100",
                        "description": "Number of additional bases of context to include around each assembly region  Default\n                              value: 100.",
                        "id": "#assemblyRegionPadding"
                    },
                    {
                        "sbg:altPrefix": "-A",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annotation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "One or more specific annotations to apply to variant calls  This argument may be specified\n                              0 or more times",
                        "description": "One or more specific annotations to apply to variant calls  This argument may be specified\n                              0 or more times. Default value: null.",
                        "id": "#annotation"
                    },
                    {
                        "sbg:altPrefix": "-nda",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annotateNDA",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If provided, we will annotate records with the number of alternate alleles that were\n                              discovered (but not necessarily genotyped) at a given site  Default value: false",
                        "description": "If provided, we will annotate records with the number of alternate alleles that were\n                              discovered (but not necessarily genotyped) at a given site  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#annotateNDA"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-allowNonUniqueKmersInRef",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--allowNonUniqueKmersInRef",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow graphs that have non-unique kmers in the reference  Default value: false",
                        "description": "Allow graphs that have non-unique kmers in the reference  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#allowNonUniqueKmersInRef"
                    },
                    {
                        "sbg:altPrefix": "-alleles",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--alleles",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES \n                              Default value: null",
                        "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES \n                              Default value: null.",
                        "id": "#alleles"
                    },
                    {
                        "sbg:altPrefix": "-allSitePLs",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--allSitePLs",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Annotate all sites with PLs  Default value: false",
                        "description": "Annotate all sites with PLs  Default value: false. Possible values: {true, false}.",
                        "id": "#allSitePLs"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:altPrefix": "-activeProbabilityThreshold",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--activeProbabilityThreshold",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum probability for a locus to be considered active",
                        "description": "Minimum probability for a locus to be considered active.  Default value: 0.002.",
                        "id": "#activeProbabilityThreshold"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    },
                    {
                        "sbg:altPrefix": "-GQB",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--GVCFGQBands",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "GQ thresholds for reference confidence bands  This argument may be specified 0 or more\n                              times",
                        "description": "GQ thresholds for reference confidence bands  This argument may be specified 0 or more\n                              times. Default value: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n                              20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n                              42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 80, 90,\n                              99].",
                        "id": "#GVCFGQBands"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "VCF",
                        "description": "A raw, unfiltered, highly specific callset in VCF format.",
                        "sbg:fileTypes": "VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "id": "#vcf_output"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Output BAM",
                        "description": "Reassembled BAM outputted if the appropriate flag is set.",
                        "sbg:fileTypes": "BAM",
                        "outputBinding": {
                            "glob": "*.bam",
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".bai"
                            ]
                        },
                        "id": "#bam_output"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\t\n  interval_name = \"\"\n  if ($job.inputs.include_interval_name_in_output_name){\n    if($job.inputs.intervals_file){\n      interval_path = [].concat($job.inputs.intervals_file)[0].path\n      interval_name = interval_path.split('/')[interval_path.split('/').length - 1].split('.')\n      interval_name.pop()\n      interval_name = interval_name.join('')\n    }\n  }\n   \n  if($job.inputs.emitRefConfidence == 'GVCF')\n  {\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \tread_namebase = read_name.slice(0, read_name.length-1).join('.')\n  \treturn read_namebase + '_' + interval_name + '.g.vcf'\n  }\n  else\n  \tread_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \tread_namebase = read_name.slice(0, read_name.length-1).join('.')\n  \treturn read_namebase + '_' + interval_name +  '.vcf'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 100,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reads = [].concat($job.inputs.reads)\n  \n  if ($job.inputs.bamOutput) {\n    \n    return '-bamout ' + reads[0].path.split('/').pop().split('.').slice(0,-1).join('.') + '.reassembled.bam'\n    \n  } else {\n    \n    return ''\n    \n  }\n  \n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "useNewAFCalculator": false,
                        "useFilteredReadsForAnnotations": true,
                        "useDoublePrecision": true,
                        "useAllelesTrigger": true,
                        "standard_min_confidence_threshold_for_calling": null,
                        "secondsBetweenProgressUpdates": null,
                        "sample_ploidy": null,
                        "sample_name": "",
                        "sample": null,
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.fa",
                            "class": "File",
                            "size": 0
                        },
                        "recoverDanglingHeads": true,
                        "reads": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/input-1.ext",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/input-2.ext",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "readValidationStringency": null,
                        "readShardSize": 9,
                        "readShardPadding": 3,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "phredScaledGlobalReadMismappingRate": null,
                        "pcr_indel_model": null,
                        "output_mode": null,
                        "numPruningSamples": null,
                        "nativePairHmmThreads": null,
                        "minimumMappingQuality": null,
                        "min_base_quality_score": null,
                        "minReadLength": null,
                        "minPruning": null,
                        "minDanglingBranchLength": null,
                        "minAssemblyRegionSize": null,
                        "memory_per_job": 0,
                        "memory_overhead_per_job": 4,
                        "maximumMappingQuality": null,
                        "max_genotype_count": null,
                        "max_alternate_alleles": null,
                        "maxReadsPerAlignmentStart": null,
                        "maxReadLength": null,
                        "maxProbPropagationDistance": null,
                        "maxNumHaplotypesInPopulation": null,
                        "maxFragmentLength": null,
                        "maxAssemblyRegionSize": null,
                        "library": null,
                        "lenient": true,
                        "kmerSize": null,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "intervals_string-string-value",
                        "intervals_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/intervals_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "input_prior": null,
                        "indel_heterozygosity": null,
                        "indelSizeToEliminateInRefModel": null,
                        "include_interval_name_in_output_name": true,
                        "heterozygosity_stdev": null,
                        "heterozygosity": null,
                        "group": null,
                        "graphOutput": null,
                        "genotyping_mode": null,
                        "gcpHMM": null,
                        "filterTooShort": null,
                        "exclude_intervals_string": "exclude_intervals_string-string-value",
                        "exclude_intervals_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/exclude_intervals_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "excludeAnnotation": null,
                        "emitRefConfidence": "GVCF",
                        "dontUseSoftClippedBases": true,
                        "dontTrimActiveRegions": true,
                        "dontRequireSoftClipsBothEnds": true,
                        "dontIncreaseKmerSizesForCycles": true,
                        "doNotRunPhysicalPhasing": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": false,
                        "disableReadFilter": null,
                        "disableOptimizations": true,
                        "disableBamIndexCaching": true,
                        "debug": false,
                        "db_snp": {
                            "secondaryFiles": [
                                {
                                    "path": ".idx"
                                }
                            ],
                            "path": "/path/to/db_snp.vcf",
                            "class": "File",
                            "size": 0
                        },
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cpus_per_job": 1,
                        "contamination_fraction_to_filter": null,
                        "contamination_fraction_per_sample_file": null,
                        "consensus": true,
                        "comp": null,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "base_quality_score_threshold": null,
                        "bamWriterType": null,
                        "bamOutput": false,
                        "assemblyRegionPadding": null,
                        "annotation": null,
                        "annotateNDA": true,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 3,
                        "allowNonUniqueKmersInRef": true,
                        "alleles": null,
                        "allSitePLs": true,
                        "addOutputSAMProgramRecord": true,
                        "activeProbabilityThreshold": null,
                        "QUIET": true,
                        "PLFilterName": null,
                        "GVCFGQBands": null,
                        "gq_threshold": [
                            null
                        ],
                        "no_soft_clipped": false,
                        "no_active_region_trim": false,
                        "gap_penalty": null,
                        "prob_threshold": null,
                        "kmer_size": null,
                        "disable_phasing": false,
                        "use_filtered_reads": false,
                        "heterozygosityStandardDeviation": null,
                        "bqsr": {
                            "secondaryFiles": [],
                            "path": "/path/to/bqsr.ext",
                            "class": "File",
                            "size": 0
                        },
                        "no_cmdline_in_header": false,
                        "min_pruning_threshold": "",
                        "allow_non_unique_kmers": false,
                        "min_base_q_scores": null,
                        "min_length": null,
                        "max_reads_active_reg": null,
                        "active_reg_ext": "",
                        "maxTotalReadsInMemory": null,
                        "annotation_groups": [
                            ""
                        ],
                        "force_active": false,
                        "out_mode": null,
                        "emit_ref_confidence": null,
                        "dont_increase_kmers": false,
                        "band_pass": "",
                        "max_haplotypes": null,
                        "disable_opt": false,
                        "emitDroppedReads": false,
                        "use_allele_trigger": false,
                        "consensus_mode": false,
                        "mismapping_rate": null,
                        "max_active_region_size": null,
                        "graph_file": "",
                        "contamination_fraction": null,
                        "min_reads_per_algn": null,
                        "active_reg_output_file_name": "",
                        "exclude_ann": [
                            ""
                        ],
                        "bamout": false,
                        "output_raw_activity": "",
                        "annotate_all_sites_PLs": false,
                        "bam_out": "",
                        "write_to_bam": null,
                        "maxReadsInMemoryPerSample": null,
                        "min_graph_pruning": "",
                        "indel_size": null
                    },
                    "allocatedResources": {
                        "mem": 2052,
                        "cpu": 1
                    }
                },
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/45",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789607,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" HaplotypeCaller --input /path/to/input-1.ext --input /path/to/input-2.ext --reference /path/to/reference.fa --output input-1_intervals_file.g.vcf",
                "sbg:revision": 14,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/45",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 361.34847417202786,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:latestRevision": 14,
                "x": 1752.43207647133,
                "sbg:createdOn": 1500296570,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-haplotypecaller/14",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/24",
                        "sbg:modifiedOn": 1500296570
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/25",
                        "sbg:modifiedOn": 1500640351
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/26",
                        "sbg:modifiedOn": 1500887426
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/27",
                        "sbg:modifiedOn": 1502111506
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/28",
                        "sbg:modifiedOn": 1502190447
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/29",
                        "sbg:modifiedOn": 1502718044
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/33",
                        "sbg:modifiedOn": 1503405184
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/34",
                        "sbg:modifiedOn": 1504105725
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/35",
                        "sbg:modifiedOn": 1504190940
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/38",
                        "sbg:modifiedOn": 1504264072
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/39",
                        "sbg:modifiedOn": 1504264485
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/40",
                        "sbg:modifiedOn": 1504264657
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/41",
                        "sbg:modifiedOn": 1504273058
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 13,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/42",
                        "sbg:modifiedOn": 1504275166
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 14,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/45",
                        "sbg:modifiedOn": 1504789607
                    }
                ]
            },
            "label": "GATK HaplotypeCaller",
            "scatter": "#GATK_HaplotypeCaller.reads",
            "sbg:y": 361.34847417202786,
            "sbg:x": 1752.43207647133
        },
        {
            "id": "#GATK_ApplyBQSR",
            "inputs": [
                {
                    "id": "#GATK_ApplyBQSR.memory_per_job",
                    "default": 2000
                },
                {
                    "id": "#GATK_ApplyBQSR.memory_overhead_per_job",
                    "default": 60
                },
                {
                    "id": "#GATK_ApplyBQSR.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals.intervals"
                    ]
                },
                {
                    "id": "#GATK_ApplyBQSR.input",
                    "source": [
                        "#BWA_MEM_Bundle.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_ApplyBQSR.include_interval_name_in_output_name",
                    "default": true
                },
                {
                    "id": "#GATK_ApplyBQSR.bqsr_recal_file",
                    "source": [
                        "#GATK_BaseRecalibrator.recalibration_file"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_ApplyBQSR.output"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-applybqsr/15",
                "label": "GATK ApplyBQSR",
                "description": "Apply base quality score recalibration.\n\n###**Overview**  \n\nThis tool performs the second pass in a two-stage process called Base Quality Score Recalibration (BQSR). Specifically, it recalibrates the base qualities of the input reads based on the recalibration table produced by the BaseRecalibrator tool, and outputs a recalibrated BAM or CRAM file.\n\n####**Summary of the BQSR procedure**\n\nThe goal of this procedure is to correct for systematic bias that affect the assignment of base quality scores by the sequencer. The first pass consists of calculating error empirically and finding patterns in how error varies with basecall features over all bases. The relevant observations are written to a recalibration table. The second pass consists of applying numerical corrections to each individual basecall based on the patterns identified in the first step (recorded in the recalibration table) and write out the recalibrated data to a new BAM or CRAM file.\n\n###**Inputs**  \n\n- A BAM or CRAM file containing input read data\n- The covariates table (= recalibration file) generated by BaseRecalibrator on the input BAM or CRAM file\n\n###**Output**  \n\nA BAM or CRAM file containing the recalibrated read data\n\n###**Usage example**  \n\n    ./gatk-launch ApplyBQSR \\   \n         -R reference.fasta \\ \n         -I input.bam \\  \n         -BQSR recalibration.table \\  \n         -O output.bam  \n\n###**Notes**\n\n- This tool replaces the use of PrintReads for the application of base quality score recalibration as practiced in earlier versions of GATK (2.x and 3.x).\n- You should only run ApplyBQSR with the covariates table created from the input BAM or CRAM file(s).\n- Original qualities can be retained in the output file under the \"OQ\" tag if desired. See the `--emit_original_quals` argument for details.  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "ApplyBQSR"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-OQ",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useOriginalQualities",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use the base quality scores from the OQ tag  Default value: false",
                        "description": "Use the base quality scores from the OQ tag  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#useOriginalQualities"
                    },
                    {
                        "sbg:altPrefix": "-SQQ",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--static_quantized_quals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use static quantized quality scores to a given number of levels (with -bqsr)  This\n                              argument may be specified 0 or more times",
                        "description": "Use static quantized quality scores to a given number of levels (with -bqsr)  This\n                              argument may be specified 0 or more times. Default value: null.  Cannot be used in\n                              conjuction with argument(s) quantizationLevels (qq).",
                        "id": "#static_quantized_quals"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-RDQ",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Advanced Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--round_down_quantized",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Round quals down to nearest quantized qual  Default value: false",
                        "description": "Round quals down to nearest quantized qual  Default value: false. Possible values: {true,\n                              false}  Cannot be used in conjuction with argument(s) quantizationLevels (qq).",
                        "id": "#round_down_quantized"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Reference sequence  Default value: null",
                        "description": "Reference sequence  Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:toolDefaultValue": "SILENT",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-qq",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--quantize_quals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Quantize quality scores to a given number of levels  Default value: 0",
                        "description": "Quantize quality scores to a given number of levels  Default value: 0.  Cannot be used in\n                              conjuction with argument(s) staticQuantizationQuals (SQQ) roundDown (RDQ).",
                        "id": "#quantize_quals"
                    },
                    {
                        "sbg:altPrefix": "-preserveQ",
                        "sbg:toolDefaultValue": "6",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--preserve_qscores_less_than",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Don't recalibrate bases with quality scores less than this threshold  Default value: 6",
                        "description": "Don't recalibrate bases with quality scores less than this threshold  Default value: 6.",
                        "id": "#preserve_qscores_less_than"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:toolDefaultValue": "10",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:toolDefaultValue": "1",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:stageInput": null,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:stageInput": null,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:toolDefaultValue": "1000000",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:toolDefaultValue": "UNION",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Of padding (in bp) to add to each interval you are including",
                        "description": "Of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "BAM/SAM/CRAM file containing reads  This argument must be specified at least once",
                        "description": "BAM/SAM/CRAM file containing reads  This argument must be specified at least once.\n                              Required.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "id": "#input"
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "sbg:stageInput": null,
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Include interval name in output name",
                        "description": "Include interval name in output name.",
                        "id": "#include_interval_name_in_output_name"
                    },
                    {
                        "sbg:altPrefix": "-globalQScorePrior",
                        "sbg:toolDefaultValue": "-1",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--globalQScorePrior",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Global Qscore Bayesian prior to use for BQSR  Default value: -1",
                        "description": "Global Qscore Bayesian prior to use for BQSR  Default value: -1.0.",
                        "id": "#globalQScorePrior"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:toolDefaultValue": "30",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervas_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-EOQ",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--emit_original_quals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Emit original base qualities under the OQ tag  Default value: false",
                        "description": "Emit original base qualities under the OQ tag  Default value: false. Possible values:\n                              {true, false}.",
                        "id": "#emit_original_quals"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:toolDefaultValue": "null",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:toolDefaultValue": "40",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:toolDefaultValue": "-1",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-bqsr",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--bqsr_recal_file",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Input recalibration table for BQSR  Required",
                        "description": "Input recalibration table for BQSR  Required.",
                        "id": "#bqsr_recal_file"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": null,
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of ambiguous bases  Default value: 0",
                        "description": "Threshold fraction of ambiguous bases  Default value: 0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-addOutputVCFCommandLine",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputVCFCommandLine",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a command line header line to created VCF files",
                        "description": "If true, adds a command line header line to created VCF files.  Default value: true.\n                              Possible values: {true, false}.",
                        "id": "#addOutputVCFCommandLine"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:toolDefaultValue": "true",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:toolDefaultValue": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Output",
                        "description": "Recalibrated BAM/SAM/CRAM file",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "outputBinding": {
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  input = [].concat($job.inputs.input)[0].path.split('/').slice(-1)[0]\n  input = input.split('.').slice(-1)[0]\n  \n  return '*.' + input\n}",
                                "class": "Expression"
                            },
                            "sbg:inheritMetadataFrom": "#input",
                            "secondaryFiles": [
                                ".bai"
                            ]
                        },
                        "id": "#output"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "--output",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  interval_name = ''\n  \n  if ($job.inputs.include_interval_name_in_output_name){\n    if($job.inputs.intervals_file){\n      interval_path = [].concat($job.inputs.intervals_file)[0].path\n      interval_name = interval_path.split('/')[interval_path.split('/').length - 1].split('.')\n      interval_name.pop()\n      interval_name = '_' + interval_name.join('')\n    }\n  }\n  \n  input = [].concat($job.inputs.input)[0].path.split('/').slice(-1)[0]\n  input = input.split('.')\n  input = input.slice(0, -1).join('.') + interval_name + '.recalibrated.' + input.slice(-1)\n  \n  return input\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": "--createOutputBamIndex"
                    },
                    {
                        "position": 100,
                        "separate": false,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  interval_name = ''\n  \n  if ($job.inputs.include_interval_name_in_output_name){\n    if($job.inputs.intervals_file){\n      interval_path = [].concat($job.inputs.intervals_file)[0].path\n      interval_name = interval_path.split('/')[interval_path.split('/').length - 1].split('.')\n      interval_name.pop()\n      interval_name = '_' + interval_name.join('')\n    }\n  }\n  \n  input = [].concat($job.inputs.input)[0].path.split('/').slice(-1)[0]\n  input = input.split('.')\n  input_bai = input.slice(0, -1).join('.') + interval_name + '.recalibrated.bai'\n  input_bam_bai = input.slice(0, -1).join('.') + interval_name + '.recalibrated.bam.bai'\n  \n  return ' && mv ' + input_bai + ' ' + input_bam_bai\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "useOriginalQualities": true,
                        "static_quantized_quals": null,
                        "secondsBetweenProgressUpdates": null,
                        "sample": null,
                        "round_down_quantized": true,
                        "reference": {
                            "secondaryFiles": [],
                            "path": "/path/to/reference.ext",
                            "class": "File",
                            "size": 0
                        },
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "quantize_quals": null,
                        "preserve_qscores_less_than": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "memory_per_job": 2048,
                        "memory_overhead_per_job": 0,
                        "maximumMappingQuality": null,
                        "maxReadLength": null,
                        "maxFragmentLength": null,
                        "library": null,
                        "lenient": true,
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "",
                        "intervals_file": null,
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "input": {
                            "secondaryFiles": [],
                            "path": "/path/to/input.bam",
                            "class": "File",
                            "size": 0
                        },
                        "include_interval_name_in_output_name": false,
                        "globalQScorePrior": null,
                        "filterTooShort": null,
                        "exclude_intervas_string": "",
                        "exclude_intervals_file": null,
                        "emit_original_quals": true,
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "createOutputVariantMD5": true,
                        "createOutputVariantIndex": true,
                        "createOutputBamMD5": true,
                        "createOutputBamIndex": true,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "bqsr_recal_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/bqsr.grp",
                            "class": "File",
                            "size": 0
                        },
                        "blackListedLanes": null,
                        "blackList": null,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 4,
                        "addOutputVCFCommandLine": true,
                        "addOutputSAMProgramRecord": true,
                        "QUIET": true,
                        "PLFilterName": null
                    },
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    }
                },
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/30",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789528,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:revision": 15,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/30",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" ApplyBQSR --bqsr_recal_file /path/to/bqsr.grp --input /path/to/input.bam --output input.recalibrated.bam  --createOutputBamIndex  && mv input.recalibrated.bai input.recalibrated.bam.bai",
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "y": 230.48011902226793,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:wrapperAuthor": "filip_tubic",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-applybqsr/15",
                "sbg:latestRevision": 15,
                "x": 1537.2388724316029,
                "sbg:createdOn": 1500296630,
                "sbg:createdBy": "teodora.aleksic",
                "sbg:contributors": [
                    "teodora.aleksic",
                    "vladimirk"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/14",
                        "sbg:modifiedOn": 1500296630
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/15",
                        "sbg:modifiedOn": 1500640320
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/16",
                        "sbg:modifiedOn": 1500887412
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/17",
                        "sbg:modifiedOn": 1501605489
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/18",
                        "sbg:modifiedOn": 1501610676
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/19",
                        "sbg:modifiedOn": 1502190441
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/21",
                        "sbg:modifiedOn": 1502283422
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/22",
                        "sbg:modifiedOn": 1502287200
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/23",
                        "sbg:modifiedOn": 1502287213
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/24",
                        "sbg:modifiedOn": 1502288276
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/25",
                        "sbg:modifiedOn": 1502718016
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/26",
                        "sbg:modifiedOn": 1503405145
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/27",
                        "sbg:modifiedOn": 1504105684
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 13,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/28",
                        "sbg:modifiedOn": 1504272777
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 14,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/29",
                        "sbg:modifiedOn": 1504275123
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 15,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/30",
                        "sbg:modifiedOn": 1504789528
                    }
                ]
            },
            "label": "GATK ApplyBQSR",
            "scatter": "#GATK_ApplyBQSR.intervals_file",
            "sbg:y": 230.48011902226793,
            "sbg:x": 1537.2388724316029
        },
        {
            "id": "#GATK_BaseRecalibrator",
            "inputs": [
                {
                    "id": "#GATK_BaseRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.reads",
                    "source": [
                        "#BWA_MEM_Bundle.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.known_sites",
                    "source": [
                        "#GATK_IndexFeatureFile_1.output_with_index",
                        "#GATK_IndexFeatureFile.output_with_index",
                        "#GATK_IndexFeatureFile_7.output_with_index"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals_string",
                    "source": [
                        "#bqsr_interval"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_BaseRecalibrator.recalibration_file"
                },
                {
                    "id": "#GATK_BaseRecalibrator.performance_summary"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/gatk-4-0-baserecalibrator/12",
                "label": "GATK BaseRecalibrator",
                "description": "First pass of the base quality score recalibration -- Generates recalibration table based on various covariates (such as read group, reported quality score, machine cycle, and nucleotide context).\n\n###**Overview**  \n\nThis walker is designed to work as the first pass in a two-pass processing step. It does a by-locus traversal operating only at sites that are not in dbSNP. We assume that all reference mismatches we see are therefore errors and indicative of poor base quality. This walker generates tables based on various user-specified covariates (such as read group, reported quality score, cycle, and context). Since there is a large amount of data one can then calculate an empirical probability of error given the particular covariates seen at this site, where p(error) = num mismatches / num observations. The output file is a table (of the several covariate values, num observations, num mismatches, empirical quality score).\n\nNote: ReadGroupCovariate and QualityScoreCovariate are required covariates and will be added for the user regardless of whether or not they were specified.\n\n###**Inputs**  \n\nThe input read data whose base quality scores need to be assessed.\nA database of known polymorphic sites to skip over.\n\n###**Output**  \n\nA GATK Report file with many tables:\n\n- The list of arguments\n- The quantized qualities table\n- The recalibration table by read group\n- The recalibration table by quality score\n- The recalibration table for all the optional covariates\n\nThe GATK Report is intended to be easy to read by humans or computers. Check out the documentation of the GATKReport to learn how to manipulate this table.\n\n###**Usage example**  \n\n     ./gatk-launch BaseRecalibrator \\ \n     \t -R reference.fasta \\ \n         -I input.bam \\   \n         --knownSites latest_dbsnp.vcf \\  \n         -O recalibration.table \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "baseCommand": [
                    "/opt/gatk-launch",
                    "--javaOptions",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
                        "class": "Expression"
                    },
                    "BaseRecalibrator"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--verbosity",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Control verbosity of logging",
                        "description": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}.",
                        "id": "#verbosity"
                    },
                    {
                        "sbg:altPrefix": "-jdk_inflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_inflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false",
                        "description": "Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_inflater"
                    },
                    {
                        "sbg:altPrefix": "-jdk_deflater",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--use_jdk_deflater",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false",
                        "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#use_jdk_deflater"
                    },
                    {
                        "sbg:altPrefix": "-OQ",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--useOriginalQualities",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use the base quality scores from the OQ tag  Default value: false",
                        "description": "Use the base quality scores from the OQ tag  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#useOriginalQualities"
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--secondsBetweenProgressUpdates",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output traversal statistics every time this many seconds elapse  Default value: 10",
                        "description": "Output traversal statistics every time this many seconds elapse  Default value: 10.0.",
                        "id": "#secondsBetweenProgressUpdates"
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once",
                        "description": "The name of the sample(s) to keep, filtering out all others  This argument must be\n                              specified at least once. Required.",
                        "id": "#sample"
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--reference",
                            "separate": true,
                            "loadContents": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ]
                        },
                        "label": "Reference sequence file  Required",
                        "description": "Reference sequence file  Required.",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference"
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:stageInput": null,
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".bai"
                            ]
                        },
                        "label": "BAM/SAM/CRAM file containing reads  This argument must be specified at least once",
                        "description": "BAM/SAM/CRAM file containing reads  This argument must be specified at least once.\n                              Required.",
                        "sbg:fileTypes": "CRAM, BAM",
                        "id": "#reads"
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readValidationStringency",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program",
                        "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
                        "id": "#readValidationStringency"
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with this read name  Required",
                        "description": "Keep only reads with this read name  Required.",
                        "id": "#readName"
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Indices to use for the read inputs",
                        "description": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null.",
                        "id": "#readIndex"
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--readFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#readFilter"
                    },
                    {
                        "sbg:altPrefix": "-ql",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--quantizing_levels",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Number of distinct quality scores in the quantized output  Default value: 16",
                        "description": "Number of distinct quality scores in the quantized output  Default value: 16.",
                        "id": "#quantizing_levels"
                    },
                    {
                        "sbg:altPrefix": "-preserveQ",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--preserve_qscores_less_than",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Don't recalibrate bases with quality scores less than this threshold (with -bqsr)  Default\n                              value: 6",
                        "description": "Don't recalibrate bases with quality scores less than this threshold (with -bqsr)  Default\n                              value: 6.",
                        "id": "#preserve_qscores_less_than"
                    },
                    {
                        "sbg:altPrefix": "-mdq",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--mismatches_default_quality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Default quality for the base mismatches covariate  Default value: -1",
                        "description": "Default quality for the base mismatches covariate  Default value: -1.",
                        "id": "#mismatches_default_quality"
                    },
                    {
                        "sbg:altPrefix": "-mcs",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--mismatches_context_size",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the k-mer context to be used for base mismatches  Default value: 2",
                        "description": "Size of the k-mer context to be used for base mismatches  Default value: 2.",
                        "id": "#mismatches_context_size"
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minimumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum mapping quality to keep (inclusive)  Default value: 10",
                        "description": "Minimum mapping quality to keep (inclusive)  Default value: 10.",
                        "id": "#minimumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--minReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at least equal to the specified value  Default value: 1",
                        "description": "Keep only reads with length at least equal to the specified value  Default value: 1.",
                        "id": "#minReadLength"
                    },
                    {
                        "sbg:stageInput": null,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory Per Job",
                        "description": "Memory per job",
                        "id": "#memory_per_job"
                    },
                    {
                        "sbg:stageInput": null,
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory Overhead Per Job",
                        "description": "Memory Overhead Per Job",
                        "id": "#memory_overhead_per_job"
                    },
                    {
                        "sbg:altPrefix": "-maxCycle",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximum_cycle_value",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The maximum cycle value permitted for the Cycle covariate  Default value: 500",
                        "description": "The maximum cycle value permitted for the Cycle covariate  Default value: 500.",
                        "id": "#maximum_cycle_value"
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maximumMappingQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Maximum mapping quality to keep (inclusive)  Default value: null",
                        "description": "Maximum mapping quality to keep (inclusive)  Default value: null.",
                        "id": "#maximumMappingQuality"
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxReadLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads with length at most equal to the specified value  Required",
                        "description": "Keep only reads with length at most equal to the specified value  Required.",
                        "id": "#maxReadLength"
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--maxFragmentLength",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000",
                        "description": "Keep only read pairs with fragment length at most equal to the given value  Default value:\n                              1000000.",
                        "id": "#maxFragmentLength"
                    },
                    {
                        "sbg:altPrefix": "-lqt",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--low_quality_tail",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum quality for the bases in the tail of the reads to be considered  Default value: 2",
                        "description": "Minimum quality for the bases in the tail of the reads to be considered  Default value: 2.",
                        "id": "#low_quality_tail"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--library",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the library to keep  Required",
                        "description": "The name of the library to keep  Required.",
                        "id": "#library"
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--lenient",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Lenient processing of VCF files  Default value: false",
                        "description": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}.",
                        "id": "#lenient"
                    },
                    {
                        "sbg:altPrefix": "-knownSites",
                        "sbg:category": "Required Arguments",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n\treturn ''\n}",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true,
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "label": "One or more databases of known polymorphic sites used to exclude regions around known\n                              polymorphisms from analysis",
                        "description": "One or more databases of known polymorphic sites used to exclude regions around known\n                              polymorphisms from analysis.  This argument must be specified at least once. Required.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#known_sites"
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReverse",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep only reads on the reverse strand  Required",
                        "description": "Keep only reads on the reverse strand  Required. Possible values: {true, false}.",
                        "id": "#keepReverse"
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--keepReadGroup",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The name of the read group to keep  Required",
                        "description": "The name of the read group to keep  Required.",
                        "id": "#keepReadGroup"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "sbg:includeInPorts": true,
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n    if ($job.inputs.reference && $job.inputs.intervals_string){\n        fasta = $job.inputs.reference.contents\n        interval = $job.inputs.intervals_string\n        // fasta - UCSC format\n        if (fasta.indexOf(\">chr\") != -1){\n            // INTERVAL - UCSC format, all w/ chr\n            if (interval.indexOf(\"chr\") != -1){\n                return interval\n            }// if (interval.indexOf(\"chr\") == -1)\n            // interval - 1000G format, convert to UCSC\n            else{\n                if (Number(interval) || interval == \"X\" || interval == \"Y\"){\n                    return \"chr\".concat(interval)\n                }// if (Number(interval)|| interval == \"X\" || interval == \"Y\")\n                else{\n                    if (interval == \"MT\"){\n                        return \"chrM\"\n                    }//if (interval == \"MT\")\n                    else{\n                        if(Number(interval.substr(2,6))<211){\n                            n = Number(interval.substr(2,6)) - 190;\n                            s = \"chr\";\n                            s = s.concat(n.toString());\n                            s = s.concat(\"_gl\");\n                            s = s.concat(interval.substr(2,6));\n                            s = s.concat(\"_random\");\n                            return s\n                        }// if(Number(interval.substr(2,interval.length-2))<211)\n                        else{\n                            if(Number(interval.substr(2,6))<250) {\n                                s = \"chrUn_gl\";\n                                s = s.concat(interval.substr(2,6));\n                                return s\n                            }//if(Number(interval.substr(2,interval.length-2))<250)\n                            else {\n                                return interval\n                            }//if(Number(interval.substr(2,interval.length-2))<250) - else\n                        }// if(Number(interval.substr(2,interval.length-2))<211) - else\n                    }//if (interval == \"MT\") - else\n                }//if (Number(interval)|| interval == \"X\" || interval == \"Y\") - else\n            }//if (interval.indexOf(\"chr\") == -1) - else\n        }//if (fasta.indexOf(\">chr\") == -1)\n        // fasta - 1000G format\n        else{\n            //interval - USCS format, all w/ chr, convert to 1000G\n            if(interval.indexOf(\"chr\") != -1){\n                if(Number(interval.substr(3,2)) && interval.length<6 || interval == \"chrX\" || interval == \"chrY\"){\n                    return interval.substr(3,2)\n                }//if(Number(interval.substr(3,interval.length)) != NaN || interval == \"chrX\" || bsqr == \"chrY\")\n                else{\n                    if (interval == \"chrM\") {\n                        return \"MT\"\n                    }//if (interval == \"chrM\")\n                    else{\n                        s = \"GL\";\n                        s = s.concat(interval.substr(8,6));\n                        s = s.concat(\".1\");\n                        return s\n                    }//if (interval == \"chrM\") - else\n                }//if(Number(interval.substr(3,interval.length)) != NaN || interval == \"chrX\" || bsqr == \"chrY\") - else\n            }//if($job.inputs.interval.indexOf(\"chr\") == -1)\n            // interval - 1000G format\n            else{\n                return interval\n            }//(interval.indexOf(\"chr\") == -1) - else\n        }//if (fasta.indexOf(\">chr\") == -1) - else\n    }//if ($job.inputs.fasta && $job.inputs.interval)\n}\n",
                                "class": "Expression"
                            },
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or                              more times. Default value: null.",
                        "id": "#intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--intervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to include",
                        "description": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "null"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_set_rule",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set merging approach to use for combining interval inputs  Default value: UNION",
                        "description": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}.",
                        "id": "#interval_set_rule"
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are including",
                        "description": "Amount of padding (in bp) to add to each interval you are including.  Default value: 0.",
                        "id": "#interval_padding"
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--interval_exclusion_padding",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Amount of padding (in bp) to add to each interval you are excluding",
                        "description": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0.",
                        "id": "#interval_exclusion_padding"
                    },
                    {
                        "sbg:altPrefix": "-idq",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--insertions_default_quality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Default quality for the base insertions covariate  Default value: 45",
                        "description": "Default quality for the base insertions covariate  Default value: 45.",
                        "id": "#insertions_default_quality"
                    },
                    {
                        "sbg:altPrefix": "-ics",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--indels_context_size",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the k-mer context to be used for base insertions and deletions  Default value: 3",
                        "description": "Size of the k-mer context to be used for base insertions and deletions  Default value: 3.",
                        "id": "#indels_context_size"
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--filterTooShort",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30",
                        "description": "Value for which reads with less than this number of aligned bases is considered too short \n                              Default value: 30.",
                        "id": "#filterTooShort"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Genomic interval strings to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0                              or more times. Default value: null.",
                        "id": "#exclude_intervals_string"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "required": false,
                        "type": [
                            "null",
                            "File"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--excludeIntervals",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "secondaryFiles": []
                        },
                        "label": "Genomic interval files to exclude",
                        "description": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED",
                        "id": "#exclude_intervals_file"
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Allow a read to be filtered out based on having only 1 soft-clipped block",
                        "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default,\n                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped\n                              block.  Default value: false. Possible values: {true, false}.",
                        "id": "#dontRequireSoftClipsBothEnds"
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableToolDefaultReadFilters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Disable all tool default read filters  Default value: false",
                        "description": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}.",
                        "id": "#disableToolDefaultReadFilters"
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableSequenceDictionaryValidation",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If specified, do not check the sequence dictionaries from our inputs for compatibility",
                        "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}.",
                        "id": "#disableSequenceDictionaryValidation"
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableReadFilter",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times",
                        "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null.",
                        "id": "#disableReadFilter"
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--disableBamIndexCaching",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified",
                        "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}.",
                        "id": "#disableBamIndexCaching"
                    },
                    {
                        "sbg:altPrefix": "-ddq",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--deletions_default_quality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Default quality for the base deletions covariate  Default value: 45",
                        "description": "Default quality for the base deletions covariate  Default value: 45.",
                        "id": "#deletions_default_quality"
                    },
                    {
                        "sbg:altPrefix": "-DBQ",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--defaultBaseQualities",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Assign a default base quality  Default value: -1",
                        "description": "Assign a default base quality  Default value: -1.",
                        "id": "#defaultBaseQualities"
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a a MD5 digest any VCF file created",
                        "description": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#createOutputVariantMD5"
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputVariantIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a VCF index when writing a coordinate-sorted VCF file",
                        "description": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}.",
                        "id": "#createOutputVariantIndex"
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamMD5",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false",
                        "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}.",
                        "id": "#createOutputBamMD5"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--createOutputBamIndex",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file",
                        "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}.",
                        "id": "#createOutputBamIndex"
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40.",
                        "id": "#cloudPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Size of the cloud-only prefetch buffer (in MB; 0 to disable)",
                        "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1.",
                        "id": "#cloudIndexPrefetchBuffer"
                    },
                    {
                        "sbg:altPrefix": "-bqsrBAQGOP",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--bqsrBAQGapOpenPenalty",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "BQSR BAQ gap open penalty (Phred Scaled)",
                        "description": "BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for\n                              whole genome call sets  Default value: 40.0.",
                        "id": "#bqsrBAQGapOpenPenalty"
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackListedLanes",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once",
                        "description": "Keep reads with platform units not on the list  This argument must be specified at least\n                              once. Required.",
                        "id": "#blackListedLanes"
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--blackList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "This argument must be specified at least once",
                        "description": "This argument must be specified at least once. Required.",
                        "id": "#blackList"
                    },
                    {
                        "sbg:altPrefix": "-bintag",
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--binary_tag_name",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "The binary tag covariate name if using it  Default value: null",
                        "description": "The binary tag covariate name if using it  Default value: null.",
                        "id": "#binary_tag_name"
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "float"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterFrac",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Threshold fraction of non-regular bases (e",
                        "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter  Default value:\n                              0.05.",
                        "id": "#ambigFilterFrac"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "int"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--ambigFilterBases",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ambig Filter Bases",
                        "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
                        "id": "#ambigFilterBases"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--addOutputSAMProgramRecord",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "If true, adds a PG tag to created SAM/BAM/CRAM files",
                        "description": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}.",
                        "id": "#addOutputSAMProgramRecord"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Optional Arguments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--QUIET",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Whether to suppress job-summary info on System",
                        "description": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}.",
                        "id": "#QUIET"
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--PLFilterName",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once",
                        "description": "Keep reads with RG:PL attribute containing this string  This argument must be specified at\n                              least once. Required.",
                        "id": "#PLFilterName"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "BQSR Table",
                        "description": "The output recalibration table file to create.",
                        "sbg:fileTypes": "GRP",
                        "outputBinding": {
                            "glob": "*.recal_data.grp",
                            "sbg:inheritMetadataFrom": "#reads"
                        },
                        "id": "#recalibration_file"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Performance Summary",
                        "description": "Test",
                        "outputBinding": {
                            "glob": "*.txt"
                        },
                        "id": "#performance_summary"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
                    }
                ],
                "arguments": [
                    {
                        "position": 0,
                        "prefix": "",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return '--output ' + read_namebase + '.recal_data.grp'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": "--createOutputBamIndex"
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  known_sites = $job.inputs.known_sites\n\n  cmd = []\n\n  for (i = 0; i < known_sites.length; i++) {\n    cmd.push('--knownSites', known_sites[i].path)\n  }\n\n  return cmd.join(' ')\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 100,
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n\treturn '> baserecalibrator.4.beta.4.performance.summary.txt'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "verbosity": null,
                        "use_jdk_inflater": true,
                        "use_jdk_deflater": true,
                        "useOriginalQualities": true,
                        "secondsBetweenProgressUpdates": 1,
                        "sample": null,
                        "reference": {
                            "secondaryFiles": [
                                {
                                    "path": ".fai"
                                },
                                {
                                    "path": "^.dict"
                                }
                            ],
                            "path": "/path/to/reference.ext",
                            "class": "File",
                            "size": 0
                        },
                        "reads": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/reads-1.ext",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/reads-2.ext",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "readValidationStringency": null,
                        "readName": null,
                        "readIndex": null,
                        "readFilter": null,
                        "quantizing_levels": null,
                        "preserve_qscores_less_than": null,
                        "mismatches_default_quality": null,
                        "mismatches_context_size": null,
                        "minimumMappingQuality": null,
                        "minReadLength": null,
                        "memory_per_job": 4,
                        "memory_overhead_per_job": 1,
                        "maximum_cycle_value": null,
                        "maximumMappingQuality": null,
                        "maxReadLength": null,
                        "maxFragmentLength": null,
                        "low_quality_tail": null,
                        "library": null,
                        "lenient": true,
                        "known_sites": [
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/known_sites-1.ext",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "secondaryFiles": [],
                                "path": "/path/to/known_sites-2.ext",
                                "class": "File",
                                "size": 0
                            }
                        ],
                        "keepReverse": true,
                        "keepReadGroup": null,
                        "intervals_string": "intervals_string-string-value",
                        "intervals_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/intervals_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "interval_set_rule": null,
                        "interval_padding": null,
                        "interval_exclusion_padding": null,
                        "insertions_default_quality": null,
                        "indels_context_size": null,
                        "filterTooShort": null,
                        "exclude_intervals_string": "exclude_intervals_string-string-value",
                        "exclude_intervals_file": {
                            "secondaryFiles": [],
                            "path": "/path/to/exclude_intervals_file.ext",
                            "class": "File",
                            "size": 0
                        },
                        "dontRequireSoftClipsBothEnds": true,
                        "disableToolDefaultReadFilters": true,
                        "disableSequenceDictionaryValidation": true,
                        "disableReadFilter": null,
                        "disableBamIndexCaching": true,
                        "deletions_default_quality": null,
                        "defaultBaseQualities": null,
                        "createOutputVariantMD5": 0.6317428673703886,
                        "createOutputVariantIndex": 5.081587263149359,
                        "createOutputBamMD5": 1.7560880637573613,
                        "createOutputBamIndex": 6.802465483383213,
                        "cloudPrefetchBuffer": null,
                        "cloudIndexPrefetchBuffer": null,
                        "bqsrBAQGapOpenPenalty": null,
                        "blackListedLanes": null,
                        "blackList": null,
                        "binary_tag_name": null,
                        "ambigFilterFrac": null,
                        "ambigFilterBases": 2,
                        "addOutputSAMProgramRecord": true,
                        "QUIET": true,
                        "PLFilterName": null,
                        "no_cmdline_in_header": true,
                        "cpu_per_job": 2,
                        "threads_per_job": 2
                    },
                    "allocatedResources": {
                        "mem": 5,
                        "cpu": 1
                    }
                },
                "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/48",
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
                        "label": "Download"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.2/",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "appUrl": "/u/vladimirk/gatk-3-7/apps/#vladimirk/gatk-3-7/gatk-3-7-baserecalibrator/5",
                "sbg:sbgMaintained": false,
                "sbg:modifiedOn": 1504789585,
                "sbg:modifiedBy": "teodora.aleksic",
                "sbg:revision": 12,
                "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/48",
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx4M\" BaseRecalibrator --input /path/to/reads-1.ext --input /path/to/reads-2.ext --reference /path/to/reference.ext  --output reads-1.recal_data.grp  --createOutputBamIndex  --knownSites /path/to/known_sites-1.ext --knownSites /path/to/known_sites-2.ext  > baserecalibrator.4.beta.4.performance.summary.txt",
                "sbg:project": "vladimirk/gatk-4-0-demo-1",
                "sbg:validationErrors": [],
                "y": 347.8573645561545,
                "sbg:toolkitVersion": "Beta 2",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Broad Institute",
                "sbg:createdBy": "teodora.aleksic",
                "sbg:id": "admin/sbg-public-data/gatk-4-0-baserecalibrator/12",
                "sbg:latestRevision": 12,
                "x": 1372.3270808985649,
                "sbg:createdOn": 1500296554,
                "sbg:contributors": [
                    "teodora.aleksic",
                    "vladimirk"
                ],
                "sbg:projectName": "GATK 4.0 - Demo",
                "sbg:toolkit": "GATK 4.0",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/16",
                        "sbg:modifiedOn": 1500296554
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/17",
                        "sbg:modifiedOn": 1500640330
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/20",
                        "sbg:modifiedOn": 1500887417
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/23",
                        "sbg:modifiedOn": 1502111498
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/24",
                        "sbg:modifiedOn": 1502718029
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/31",
                        "sbg:modifiedOn": 1503064609
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/32",
                        "sbg:modifiedOn": 1503064951
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/34",
                        "sbg:modifiedOn": 1503405166
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/42",
                        "sbg:modifiedOn": 1504105701
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/44",
                        "sbg:modifiedOn": 1504272902
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/45",
                        "sbg:modifiedOn": 1504275139
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/46",
                        "sbg:modifiedOn": 1504280144
                    },
                    {
                        "sbg:modifiedBy": "teodora.aleksic",
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/48",
                        "sbg:modifiedOn": 1504789585
                    }
                ]
            },
            "label": "GATK BaseRecalibrator",
            "sbg:x": 1372.3270808985649,
            "sbg:y": 347.8573645561545
        },
        {
            "id": "#SBG_Pair_FASTQs_by_Metadata",
            "inputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.fastq_list",
                    "source": [
                        "#SBG_FASTQ_Quality_Adjuster.result"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                }
            ],
            "run": {
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "id": "admin/sbg-public-data/sbg-pair-fastqs-by-metadata/9",
                "label": "SBG Pair FASTQs by Metadata",
                "description": "Tool accepts list of FASTQ files groups them into separate lists. This grouping is done using metadata values and their hierarchy (Sample ID > Library ID > Platform unit ID > File segment number) which should create unique combinations for each pair of FASTQ files. Important metadata fields are Sample ID, Library ID, Platform unit ID and File segment number. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files. Files with no paired end metadata are grouped in the same way as the ones with paired end metadata, generally they should be alone in a separate list. Files with no metadata set will be grouped together, and there will be an error raised if there are more than 2 of these files together. \n\nIf there are more than two files in a group, this is considered an error, and the user should check if the metadata fields for those files are set properly. Also if there is a file that has paired end metadata set and is grouped with another with no paired end metadata, the tool will return an error. If there is only one file with paired end metadata set and it doesn't have a pair provided, it will be grouped into a separate list.\n\nCheck for metadata errors in job.err.log, they will point to the files whose metadata should be checked.",
                "baseCommand": [
                    "python",
                    "pair_fastqs_by_metadata.py"
                ],
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "required": true,
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--fastq_list",
                            "separate": true,
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true
                        },
                        "label": "List of FASTQ files",
                        "description": "List of the FASTQ files with properly set metadata fileds.",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
                        "id": "#fastq_list"
                    }
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "id": "#tuple_list"
                    }
                ],
                "requirements": [
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "filename": "pair_fastqs_by_metadata.py",
                                "fileContent": "import functools\nimport json\nimport itertools\nimport docopt\nimport sys\nUSAGE = \"\"\"\n    Usage:\n        sbg_pair_fastqs_by_metadata.py --fastq_list FILE... --in_metafile FILE --out_metafile FILE [options]\n\n    Description:\n        Tool accepts list of FASTQ files for one sample as the input and groups them into pairs\n        (two files for each paired end). This grouping is done using metadata values that are creating\n        unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining\n        one FASTQ pair are Sample ID, Library ID, Platform Unit ID and File Segment Number.\n        Listed order of metadata fields is also representing their hierarchy in the metadata structure.\n        Not all of these four metadata fields are required, but the present set has to be sufficient to create\n        unique combinations for each pair of FASTQ files. If multiple files have the same metadata and they can't\n        be paired in the list of 2 elements, the tool will return a metadata error so the metadata can be properly set.\n\n    Options:\n\n        --help                                Show help dialog.\n\n        --version                             Tool version.\n\n        --fastq_list FILE...                  List of the FASTQ files with properly set metadata fields.\n\n        --in_metafile FILE                    File from which necessary metadata information will be extracted.\n                                              Expected value for the SBG platform is job.json. [Default: job.json]\n\n        --out_metafile FILE                   File into which necessary file structure is going to be written.\n                                              Expected value for the SBG platform is cwl.output.json.\n                                              [Default: cwl.output.json]\n\n\n\"\"\"\n\n\nclass MetadataError(Exception):\n    # Class for handling groups where one file has paired end metadata set and other doesn't\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)\n\n\ndef make_rg_id(metadata_key, input1):\n\n    # Function that gets all the metadata fields that are set for a file, so it can\n    # sort the files based on this metadata for grouping\n\n    input_meta = input1['metadata']\n    s = '__!__'\n    rg = list()\n    for key in ['sample_group', 'sample_id', 'library_id', 'platform_unit_id']:\n        if key in input_meta:\n            rg.append(input_meta[key])\n        else:\n            rg.append('')\n    if 'file_segment_number' in input_meta and input_meta['file_segment_number'] is not None:\n        rg.append(str(input_meta['file_segment_number']))\n    else:\n        rg.append('')\n\n    # Metadata hierarchy: Sample_ID > Library_ID > Platform_Unit_ID > File_Segment_Number\n    # By default files will be split using file segment number, which is the lowest in\n    # The metadata hierarchy, if they have the same Sample ID or any of the higher tiers, they will be grouped by this\n    rg_map = {\n        'sample_id': rg[:2],\n        'library_id': rg[:3],\n        'platform_unit_id': rg[:4],\n        'file_segment_number': rg[:5],\n    }\n\n    return s.join(rg_map[metadata_key]) if metadata_key in rg_map else getattr(input_meta, metadata_key)\n\n\ndef group_inputs(inp):\n\n    metadata_key = 'file_segment_number'\n    key_getter = functools.partial(make_rg_id, metadata_key)\n    files = sorted([x for x in inp], key=key_getter)\n    # Files are split into lists of same metadata hierarchies\n    tuple_list_temp = [[f for f in val] for key, val in itertools.groupby(files, key_getter)]\n    tuple_list = list()\n    # Grouping files based on metadata\n    for elem in tuple_list_temp:\n        # Check for multiple files with same metadata - shouldn't be more than 2 grouped\n        if len(elem) > 2:\n            error_msg = 'Metadata error:'\n            error_msg += 'More than two files are grouped! Check if you have set the metadata for these files: '\n            for i in elem:\n                error_msg += i['path'].split(\"/\")[-1]\n                error_msg += ' '\n            raise MetadataError(error_msg)\n            # break\n        if len(elem) == 2:\n            if 'paired_end' in elem[0]['metadata']:\n                if 'paired_end' in elem[1]['metadata']:\n                    if elem[0]['metadata']['paired_end'] == \"2\":\n                        tuple_list.append([elem[0], elem[1]])\n                        continue\n                    else:\n                        tuple_list.append([elem[0], elem[1]])\n                        continue\n                # If second doesn't have paired_end and first does - fail and raise an exception\n                error_msg = 'Metadata error:'\n                error_msg += 'paired_end metadata not set for one of two files. Check metadata for file: '\n                error_msg += elem[1]['path'].split(\"/\")[-1]\n                raise MetadataError(error_msg)\n                # break\n            else:\n                # if first file doesn't have paired_end - fail and raise an exception\n                error_msg = 'Metadata error:'\n                error_msg += 'paired_end metadata not set for one of two files. Check metadata for file: '\n                error_msg += elem[0]['path'].split(\"/\")[-1]\n                raise MetadataError(error_msg)\n            # group together singular files, with no paired_end set (single pair sequencing)\n        if len(elem) == 1:\n            tuple_list.append([elem[0]])\n\n    return tuple_list\n\n\ndef main():\n\n    args = docopt.docopt(USAGE, version=1.0)\n\n    job_json = args[\"--in_metafile\"]\n    job_json_file = open(job_json)\n    job_json_str = job_json_file.read()\n    job_json_dict = json.loads(job_json_str)\n    file_list = [elem for elem in job_json_dict['inputs'][\"fastq_list\"]]\n    tuple_list = {}\n    try:\n        tuple_list = group_inputs(file_list)\n    except MetadataError as err:\n        sys.stderr.write(str(err))\n        exit(1)\n\n    tuple_list_dict = {\"tuple_list\": tuple_list}\n    with open(args[\"--out_metafile\"], 'w') as p:\n        json.dump(tuple_list_dict, p)\n    exit(0)\n\nif __name__ == '__main__':\n    main()"
                            }
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1024
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "d41a0837ab81",
                        "dockerPull": "images.sbgenomics.com/nikola_jovanovic/sbg-pair-fastqs-by-metadata:v1"
                    }
                ],
                "arguments": [
                    {
                        "position": 1,
                        "prefix": "--in_metafile",
                        "separate": true,
                        "valueFrom": "job.json"
                    },
                    {
                        "position": 2,
                        "prefix": "--out_metafile",
                        "separate": true,
                        "valueFrom": "cwl.output.json"
                    }
                ],
                "sbg:job": {
                    "inputs": {
                        "fastq_list": [
                            {
                                "secondaryFiles": [],
                                "path": "/asda/dsa/sda/sda/fasta1.fastq",
                                "class": "File",
                                "size": 0
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta2.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta3.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta4.fastq"
                            }
                        ]
                    },
                    "allocatedResources": {
                        "mem": 1024,
                        "cpu": 1
                    }
                },
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "sbg:validationErrors": [],
                "sbg:sbgMaintained": false,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911289
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911290
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911290
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1463403276
                    },
                    {
                        "sbg:modifiedBy": "markop",
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Link fastq_list",
                        "sbg:modifiedOn": 1469015151
                    },
                    {
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Added support for single file.",
                        "sbg:modifiedOn": 1472059795
                    },
                    {
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1489510320
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1489665046
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Fixed a typo.",
                        "sbg:modifiedOn": 1498052477
                    },
                    {
                        "sbg:modifiedBy": "nikola_jovanovic",
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Fix - error message will appear if files are grouped but have no metadata.",
                        "sbg:modifiedOn": 1504713791
                    }
                ],
                "sbg:modifiedBy": "nikola_jovanovic",
                "sbg:cmdPreview": "python pair_fastqs_by_metadata.py --fastq_list /asda/dsa/sda/sda/fasta1.fastq,/asda/dsa/sda/sda/fasta2.fastq,/asda/dsa/sda/sda/fasta3.fastq,/asda/dsa/sda/sda/fasta4.fastq --in_metafile job.json --out_metafile cwl.output.json",
                "sbg:revision": 9,
                "sbg:revisionNotes": "Fix - error message will appear if files are grouped but have no metadata.",
                "sbg:categories": [
                    "Converters",
                    "Other"
                ],
                "y": 176.50462021241339,
                "sbg:toolkit": "SBGTools",
                "sbg:image_url": null,
                "sbg:toolAuthor": "Djordje Klisic, Seven Bridges Genomics, <djordje.klisic@sbgenomics.com>",
                "sbg:latestRevision": 9,
                "x": 648.0000503893261,
                "sbg:createdOn": 1450911289,
                "sbg:createdBy": "bix-demo",
                "sbg:contributors": [
                    "vladimirk",
                    "markop",
                    "bix-demo",
                    "nikola_jovanovic"
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:modifiedOn": 1504713791,
                "sbg:id": "admin/sbg-public-data/sbg-pair-fastqs-by-metadata/9",
                "sbg:project": "bix-demo/sbgtools-demo"
            },
            "label": "SBG Pair FASTQs by Metadata",
            "sbg:x": 648.0000503893261,
            "sbg:y": 176.50462021241339
        }
    ],
    "hints": [
        {
            "class": "sbg:AWSInstanceType",
            "value": "c4.8xlarge;ebs-gp2;700"
        },
        {
            "class": "sbg:GoogleInstanceType",
            "value": "n1-standard-32"
        }
    ],
    "sbg:canvas_zoom": 0.5999999999999996,
    "sbg:latestRevision": 10,
    "sbg:categories": [
        "WGS",
        "GATK-4.0"
    ],
    "sbg:createdOn": 1501857763,
    "sbg:validationErrors": [],
    "sbg:toolkitVersion": "Beta 2",
    "sbg:createdBy": "admin",
    "sbg:id": "admin/sbg-public-data/whole-genome-sequencing-bwa-gatk-4-0/10",
    "sbg:canvas_y": 201,
    "sbg:toolAuthor": "Broad Institute",
    "sbg:appVersion": [
        "sbg:draft-2"
    ],
    "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/whole-genome-pipeline-bwa-gatk-4-0-with-metrics/160",
    "sbg:publisher": "sbg",
    "sbg:revision": 10,
    "sbg:sbgMaintained": false,
    "sbg:modifiedOn": 1505228668,
    "sbg:toolkit": "GATK 4.0",
    "sbg:image_url": "https://pgc-brood.sbgenomics.com/workflow-images/admin/sbg-public-data/whole-genome-sequencing-bwa-gatk-4-0/10.png",
    "sbg:modifiedBy": "admin",
    "sbg:canvas_x": -329,
    "sbg:license": "Open source BSD (3-clause) license",
    "sbg:contributors": [
        "admin"
    ],
    "sbg:projectName": "SBG Public Data",
    "sbg:revisionsInfo": [
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Fix Javascript in SBG Prepare Intervals for the formats arguments (CWL 1.0 support)",
            "sbg:modifiedOn": 1501857763
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 1,
            "sbg:revisionNotes": "WF Description - added titles",
            "sbg:modifiedOn": 1501857763
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 2,
            "sbg:revisionNotes": "description best practices link",
            "sbg:modifiedOn": 1501857764
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 3,
            "sbg:revisionNotes": "Update GATK tools descriptions",
            "sbg:modifiedOn": 1501857764
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 4,
            "sbg:revisionNotes": "Exposed parameters removed. Still GATK4 Beta2",
            "sbg:modifiedOn": 1501857764
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 5,
            "sbg:revisionNotes": "Suggested files set to HG38",
            "sbg:modifiedOn": 1501857764
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 6,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/whole-genome-pipeline-bwa-gatk-4-0-with-metrics/123",
            "sbg:modifiedOn": 1501857764
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 7,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/whole-genome-pipeline-bwa-gatk-4-0-with-metrics/130",
            "sbg:modifiedOn": 1501928052
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 8,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/whole-genome-pipeline-bwa-gatk-4-0-with-metrics/131",
            "sbg:modifiedOn": 1505228668
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 9,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/whole-genome-pipeline-bwa-gatk-4-0-with-metrics/159",
            "sbg:modifiedOn": 1505228668
        },
        {
            "sbg:modifiedBy": "admin",
            "sbg:revision": 10,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/whole-genome-pipeline-bwa-gatk-4-0-with-metrics/160",
            "sbg:modifiedOn": 1505228668
        }
    ],
    "requirements": [],
    "sbg:project": "admin/sbg-public-data"
}