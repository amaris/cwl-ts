{
    "description": "WES pipeline analyzes all protein-coding genes in a genome (known as Exome). The exome is estimated to comprise ~1\u20132% of the genome, yet contains ~85% of recognized disease-causing mutations. Exome sequencing is limited to variations affecting coding regions of the genes, thus leaving potential effects on regulatory regions and various control mechanisms undetected. This characteristic determines the applicability of the pipeline to areas where changes in proteins are expected with greater probability or are of higher significance. For example, WES can be used for detecting variants (i.e. mutations) in known disease-causing genes as well as for detection of novel gene-disease associations (H L Rehm, S J Bale et al. ACMG clinical laboratory standards for next-generation sequencing, Genet Med. 2013 September ; 15(9): 733\u2013747. doi:10.1038/gim.2013.92.).\u00a0\nThe pipeline is constructed following the Broad Institute best practice and utilizing Broad Institute's GATK tools. A separate step is undertaken to assess the quality of sequenced reads using Babraham Institute's tool FastQC.\u00a0\nSequenced reads are aligned with the BWA tool after which duplicates are removed. The next step uses algorithms developed by the Broad Institute to improve alignment around indels followed by the re-evaluation of the qualities of sequenced bases. Generated SAM files are pooled together and joint variant calling is performed. Detected variants are subjected to additional analysis resulting in refined, high quality set of identified variants (for more information on how variant calling is performed, please refer to the [Broad Institute's web site](https://www.broadinstitute.org/gatk/guide/topic?name=methods)).\u00a0\nThe pipeline utilizes human reference genome hg19 as well as several public databases (dbSNP v142 and database of known indels generated by Seven Bridges).",
    "outputs": [
        {
            "sbg:includeInPorts": true,
            "required": false,
            "sbg:y": 893.5716319311305,
            "label": "FastQC report",
            "sbg:x": 123.09532338097301,
            "id": "#b64html",
            "type": [
                "null",
                "File"
            ],
            "source": [
                "#SBG_Html2b64.b64html"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": false,
            "sbg:y": 555.7143926425906,
            "label": "BaseRecalibrator plot PDF",
            "sbg:x": 1601.4288503296646,
            "id": "#plot_pdf",
            "type": [
                "null",
                "File"
            ],
            "source": [
                "#GATK_BaseRecalibrator.plot_pdf"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": true,
            "sbg:y": 1055.7145405983574,
            "label": "Alignment summary metrics",
            "sbg:x": 2192.8577925818645,
            "id": "#summary_metrics",
            "type": [
                "File"
            ],
            "source": [
                "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": false,
            "sbg:y": 558.5715628254237,
            "label": "Raw VCF",
            "sbg:x": 2374.2863990822984,
            "id": "#raw_vcf",
            "type": [
                "null",
                "File"
            ],
            "source": [
                "#GATK_UnifiedGenotyper.raw_vcf"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": false,
            "sbg:y": 654.0104045474683,
            "label": "SnpEff summary text",
            "sbg:x": 3731.6668152809166,
            "id": "#summary_text",
            "type": [
                "null",
                "File"
            ],
            "source": [
                "#SnpEff_adjusted.summary_text"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": false,
            "sbg:y": 1032.343913091973,
            "label": "SnpEff Annotated VCF",
            "sbg:x": 3731.667221519701,
            "id": "#annotated",
            "type": [
                "null",
                "File"
            ],
            "source": [
                "#SnpEff_adjusted.annotated"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": true,
            "sbg:y": 1258.7500833954389,
            "label": "Processed BAM",
            "sbg:x": 2206.2501216811015,
            "id": "#recalibrated_bam",
            "type": [
                "File"
            ],
            "source": [
                "#GATK_PrintReads.recalibrated_bam"
            ]
        },
        {
            "sbg:includeInPorts": true,
            "required": false,
            "sbg:y": 841.4286637208927,
            "label": "SnpEff summary",
            "sbg:x": 3921.428704300697,
            "id": "#b64html_1",
            "type": [
                "null",
                "File"
            ],
            "source": [
                "#SBG_Html2b64_1.b64html"
            ]
        }
    ],
    "sbg:revisionsInfo": [
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799556,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 0
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799557,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 1
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799559,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 2
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799560,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 3
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799563,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 4
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799565,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 5
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799567,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 6
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799568,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 7
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799571,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 8
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799573,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 9
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799574,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 10
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799576,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 11
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799579,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 12
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799581,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 13
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799584,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 14
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799586,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 15
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799589,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 16
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799591,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 17
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799593,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 18
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799596,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 19
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799598,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 20
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799601,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 21
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799603,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 22
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799605,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 23
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799608,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 24
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799610,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 25
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799612,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 26
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1453799614,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 27
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1455019463,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 28
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1455109053,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 29
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1458574297,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 30
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163408,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 31
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163408,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 32
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459852872,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 33
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459957383,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 34
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459977542,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 35
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1460640041,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 36
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1461762650,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 37
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1462443251,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 38
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465231637,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 39
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465231638,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 40
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465231638,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 41
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173969,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 42
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173970,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 43
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173971,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 44
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173972,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 45
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173973,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 46
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173974,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 47
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173974,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 48
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173975,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 49
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173976,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 50
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466173977,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 51
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1467884290,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:revision": 52
        }
    ],
    "sbg:modifiedOn": 1467884290,
    "label": "Whole Exome Sequencing GATK 2.3.9.-lite",
    "requirements": [],
    "sbg:categories": [
        "WES-(WXS)"
    ],
    "sbg:createdBy": "sevenbridges",
    "sbg:revision": 52,
    "steps": [
        {
            "outputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Converter.result"
                }
            ],
            "scatter": "#SBG_FASTQ_Quality_Converter.fastq",
            "sbg:y": 670.201641302833,
            "id": "#SBG_FASTQ_Quality_Converter",
            "sbg:x": -16.46150514232518,
            "inputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Converter.source",
                    "default": "Auto"
                },
                {
                    "id": "#SBG_FASTQ_Quality_Converter.fastq",
                    "source": [
                        "#SBG_FASTQ_Quality_Detector.result"
                    ]
                }
            ],
            "run": {
                "y": 670.201641302833,
                "stdin": "",
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "successCodes": [],
                "label": "SBG FASTQ Quality Converter",
                "x": -16.46150514232518,
                "sbg:categories": [
                    "FASTQ-Processing",
                    "Converters"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911310,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 3,
                "description": "This app converts FASTQ quality scores from a given, source format, to standard Sanger quality scores. Supported source formats are: Solexa, Illumina 1.3, Illumina 1.5 and Illumina 1.8.",
                "class": "CommandLineTool",
                "outputs": [
                    {
                        "sbg:fileTypes": "FASTQ",
                        "description": "Resulting file in FASTQ format.",
                        "label": "Result",
                        "id": "#result",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:metadata": {},
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n\tfile = $job.inputs.fastq.path\n\tfile_split = file.split('.')\n\tbasename = file_split\n\tif (file_split.length > 1)\n\t{\n\t\tbasename = file_split.slice(0, file_split.length-1)\n\t}\n  \tif (basename.length > 1)\n    {\n      l_ext = basename.splice(basename.length-1)\n      if (l_ext == 'fastq' || l_ext == 'fq')\n      {\n        basename = basename.slice(0, basename.length)\n      }\n    }\n \tretval = basename.concat('std.fastq')\n\treturn retval.join('.').replace(/^.*[\\\\\\/]/, '')\n}",
                                "class": "Expression"
                            }
                        }
                    }
                ],
                "sbg:latestRevision": 3,
                "sbg:id": "sevenbridges/public-apps/sbg-fastq-quality-converter/3",
                "sbg:toolkit": "SBGTools",
                "sbg:modifiedOn": 1450911311,
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "fastq": {
                            "path": "test.fastq.gz",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        },
                        "source": "sol"
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911311,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911311,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911310,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911310,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/sbgtools-demo/sbg-fastq-quality-converter/3",
                "baseCommand": [
                    "python",
                    "/opt/sbg_fastq_quality_converter.py"
                ],
                "temporaryFailCodes": [],
                "arguments": [],
                "sbg:modifiedBy": "bix-demo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/tziotas/sbg_fastq_quality_converter:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "Choose the source quality scale format to convert from.",
                        "id": "#source",
                        "label": "Source",
                        "inputBinding": {
                            "prefix": "-s",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.source == 'Illumina 1.3') return 'il13'\n  if ($job.inputs.source == 'Illumina 1.5') return 'il15'\n  if ($job.inputs.source == 'Illumina 1.8') return 'il18'\n  if ($job.inputs.source == 'Solexa') return 'sol'\n  if ($job.inputs.source == 'Auto') return 'auto'\n  return 'auto'\n}",
                                "class": "Expression"
                            }
                        },
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "Solexa",
                                    "Illumina 1.3",
                                    "Illumina 1.5",
                                    "Illumina 1.8",
                                    "Auto"
                                ],
                                "type": "enum",
                                "name": "source"
                            }
                        ]
                    },
                    {
                        "description": "A FASTQ file with Solexa, Illumina 1.3+, Illumina 1.5+ pr Illumina 1.8+ quality scores that shall be converted to standard Sanger scores.",
                        "inputBinding": {
                            "prefix": "-f",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Fastq",
                        "id": "#fastq",
                        "type": [
                            "File"
                        ],
                        "required": true
                    }
                ],
                "sbg:cmdPreview": "python /opt/sbg_fastq_quality_converter.py -f test.fastq.gz -s auto test.fastq.gz",
                "sbg:toolAuthor": "Seven Bridges Genomics"
            }
        },
        {
            "outputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Detector.result"
                }
            ],
            "scatter": "#SBG_FASTQ_Quality_Detector.fastq",
            "sbg:y": 670.7692307692311,
            "id": "#SBG_FASTQ_Quality_Detector",
            "sbg:x": -233.84615384615395,
            "inputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Detector.fastq",
                    "source": [
                        "#FASTQ"
                    ]
                }
            ],
            "run": {
                "y": 670.7692307692311,
                "stdin": "",
                "requirements": [],
                "sbg:license": "Apache License 2.0",
                "successCodes": [],
                "label": "SBG FASTQ Quality Detector",
                "x": -233.84615384615395,
                "sbg:categories": [
                    "FASTQ-Processing"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911312,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 3,
                "description": "FASTQ Quality Scale Detector detects which quality encoding scheme was used in your reads and automatically enters the proper value in the \"Quality Scale\" metadata field.",
                "class": "CommandLineTool",
                "outputs": [
                    {
                        "sbg:fileTypes": "FASTQ",
                        "description": "Source FASTQ file with updated metadata.",
                        "label": "Result",
                        "id": "#result",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:metadata": {},
                            "glob": "*.fastq"
                        }
                    }
                ],
                "sbg:latestRevision": 3,
                "sbg:id": "sevenbridges/public-apps/sbg-fastq-quality-detector/5",
                "sbg:toolkit": "SBGTools",
                "sbg:modifiedOn": 1450911314,
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "fastq": {
                            "path": "/path/to/fastq.ext",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911312,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911314,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911313,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911313,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/sbgtools-demo/sbg-fastq-quality-detector/3",
                "baseCommand": [
                    "python",
                    "/opt/sbg_fastq_quality_scale_detector.py"
                ],
                "temporaryFailCodes": [],
                "arguments": [],
                "sbg:modifiedBy": "bix-demo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/tziotas/sbg_fastq_quality_scale_detector:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "FASTQ file.",
                        "inputBinding": {
                            "prefix": "--fastq",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Fastq",
                        "id": "#fastq",
                        "type": [
                            "File"
                        ],
                        "required": true
                    }
                ],
                "sbg:cmdPreview": "python /opt/sbg_fastq_quality_scale_detector.py --fastq /path/to/fastq.ext /path/to/fastq.ext",
                "sbg:toolAuthor": "Seven Bridges Genomics"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
                }
            ],
            "sbg:y": 768.5718472344787,
            "id": "#GATK_RealignerTargetCreator",
            "sbg:x": 744.2861477599116,
            "inputs": [
                {
                    "id": "#GATK_RealignerTargetCreator.window_size"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.validation_strictness"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.use_original_qualities"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.unsafe"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_RealignerTargetCreator.tag"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.remove_program_records"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.reads",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.read_group_black_list"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.read_filter"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.phone_home"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.pedigree_string"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.mismatch_fraction"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.min_reads_at_locus"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_RealignerTargetCreator.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_runtime_units"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_runtime"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_interval_size"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.known",
                    "source": [
                        "#Known_Indels"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.keep_program_records"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.intervals_file",
                    "source": [
                        "#Target_BED"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.intervals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_set_rule"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_padding"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_merging"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.gatk_key"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.exclude_intervals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.emit_original_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsampling_type"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.disable_radnomization"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.disable_indel_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.default_base_qualities"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_RealignerTargetCreator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.baq"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "y": 768.5718472344787,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "ttps://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_RealignerTargetCreator.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "INTERVALS",
                        "description": "An output file created by the walker.",
                        "label": "Intervals",
                        "id": "#indel_realigner_intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "glob": "*.intervals",
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "GATK RealignerTargetCreator",
                "x": 744.2861477599116,
                "sbg:categories": [
                    "Analysis"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911384,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 4,
                "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such that mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this tool uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists.\n\nThere are 2 steps to the realignment process:\nDetermining (small) suspicious intervals which are likely in need of realignment (RealignerTargetCreator)\nRunning the realigner over those intervals (see the IndelRealigner tool)\nFor more details, see the indel realignment method documentation.\n\nInputs\nOne or more aligned BAM files and optionally, one or more lists of known indels.\n\nOutput\nA list of target intervals to pass to the IndelRealigner.\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T RealignerTargetCreator \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -o forIndelRealigner.intervals\n \nNotes\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nWhen multiple potential indels are found by the tool in the same general region, the tool will choose the most likely one for realignment to the exclusion of the others. This is a known limitation of the tool.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "sbg:latestRevision": 4,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-realignertargetcreator/5",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "RealignerTargetCreator",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{ \n  if(!$job.inputs.threads_per_job){\n    return '-nt '.concat(4)\n  }\n  else{\n  \treturn '-nt '.concat($job.inputs.threads_per_job)\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "sbg:modifiedOn": 1450911387,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1,
                        "cpu": 1
                    },
                    "inputs": {
                        "intervals": "",
                        "threads_per_job": 2,
                        "cpu_per_job": 1,
                        "memory_overhead_per_job": 0,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "known": [
                            {
                                "path": "/folder/indels.vcf"
                            }
                        ],
                        "memory_per_job": 1,
                        "intervals_file": {
                            "path": null
                        },
                        "reads": [
                            {
                                "path": "input.bam"
                            }
                        ]
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911384,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911384,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911385,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911386,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911387,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-realignertargetcreator/4",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.intervals'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "Window size for calculating entropy or SNP clusters. Any two SNP calls and/or high entropy positions are considered clustered when they occur no more than this many base pairs apart.",
                        "inputBinding": {
                            "prefix": "--windowSize",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Window size",
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-window",
                        "id": "#window_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "10"
                    },
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "description": "Read sequences in BAM format.",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read sequences",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-I",
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Fraction of base qualities needing to mismatch for a position to have high entropy. To disable this behavior, set this value to <= 0 or > 1. This feature is really only necessary when using an ungapped aligner (e.g. MAQ in the case of single-end read data) and should be used in conjunction with USE_SW' option.",
                        "inputBinding": {
                            "prefix": "--mismatchFraction",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mismatch fraction",
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-mismatch",
                        "id": "#mismatch_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "Minimum reads at a locus to enable using the entropy calculation.",
                        "inputBinding": {
                            "prefix": "--minReadsAtLocus",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Minimum reads at locus",
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-minReads",
                        "id": "#min_reads_at_locus",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Maximum interval size. Because the realignment algorithm is N^2, allowing too large an interval might take too long to completely realign.",
                        "inputBinding": {
                            "prefix": "--maxIntervalSize",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Maximum interval size",
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-maxInterval",
                        "id": "#max_interval_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "500"
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "VCF file with known indels.",
                        "inputBinding": {
                            "prefix": "--known",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Known indels",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#known",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "sample"
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx1M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type RealignerTargetCreator -nt 2 --reference_sequence /folder/reference.fasta --input_file input.bam --out input.intervals",
                "sbg:toolAuthor": "Broad Institute"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_BaseRecalibrator.plot_pdf"
                },
                {
                    "id": "#GATK_BaseRecalibrator.bqsr"
                }
            ],
            "sbg:y": 790.0002193840298,
            "id": "#GATK_BaseRecalibrator",
            "sbg:x": 1370.000216756557,
            "inputs": [
                {
                    "id": "#GATK_BaseRecalibrator.validation_strictness"
                },
                {
                    "id": "#GATK_BaseRecalibrator.use_original_qualities"
                },
                {
                    "id": "#GATK_BaseRecalibrator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_BaseRecalibrator.unsafe"
                },
                {
                    "id": "#GATK_BaseRecalibrator.threads_per_job",
                    "default": 8
                },
                {
                    "id": "#GATK_BaseRecalibrator.tag"
                },
                {
                    "id": "#GATK_BaseRecalibrator.solid_recal_mode"
                },
                {
                    "id": "#GATK_BaseRecalibrator.solid_nocall_strategy"
                },
                {
                    "id": "#GATK_BaseRecalibrator.run_without_dbsnp_potentially_ruining_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.remove_program_records"
                },
                {
                    "id": "#GATK_BaseRecalibrator.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.reads",
                    "source": [
                        "#GATK_IndelRealigner.realigned_bam_file"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.read_group_black_list"
                },
                {
                    "id": "#GATK_BaseRecalibrator.read_filter"
                },
                {
                    "id": "#GATK_BaseRecalibrator.quantizing_levels"
                },
                {
                    "id": "#GATK_BaseRecalibrator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_BaseRecalibrator.phone_home"
                },
                {
                    "id": "#GATK_BaseRecalibrator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_BaseRecalibrator.pedigree_string"
                },
                {
                    "id": "#GATK_BaseRecalibrator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_BaseRecalibrator.no_standard_covs"
                },
                {
                    "id": "#GATK_BaseRecalibrator.mismatches_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.mismatches_context_size"
                },
                {
                    "id": "#GATK_BaseRecalibrator.memory_per_job",
                    "default": 10000
                },
                {
                    "id": "#GATK_BaseRecalibrator.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_BaseRecalibrator.maximum_cycle_value"
                },
                {
                    "id": "#GATK_BaseRecalibrator.max_runtime_units"
                },
                {
                    "id": "#GATK_BaseRecalibrator.max_runtime"
                },
                {
                    "id": "#GATK_BaseRecalibrator.low_quality_tail"
                },
                {
                    "id": "#GATK_BaseRecalibrator.known_sites",
                    "source": [
                        "#Known_SNPs"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.keep_program_records"
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals_file",
                    "source": [
                        "#Target_BED"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_set_rule"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_padding"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_merging"
                },
                {
                    "id": "#GATK_BaseRecalibrator.insertions_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.indels_context_size"
                },
                {
                    "id": "#GATK_BaseRecalibrator.gatk_key"
                },
                {
                    "id": "#GATK_BaseRecalibrator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.exclude_intervals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.emit_original_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsampling_type"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_BaseRecalibrator.disable_radnomization"
                },
                {
                    "id": "#GATK_BaseRecalibrator.disable_indel_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.deletions_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.default_base_qualities"
                },
                {
                    "id": "#GATK_BaseRecalibrator.cpu_per_job",
                    "default": 8
                },
                {
                    "id": "#GATK_BaseRecalibrator.covariate"
                },
                {
                    "id": "#GATK_BaseRecalibrator.bqsr_baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_BaseRecalibrator.binary_tag_name"
                },
                {
                    "id": "#GATK_BaseRecalibrator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_BaseRecalibrator.baq"
                },
                {
                    "id": "#GATK_BaseRecalibrator.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "PDF",
                        "id": "#plot_pdf",
                        "label": "Plot",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:metadata": {},
                            "glob": "*.pdf"
                        }
                    },
                    {
                        "sbg:fileTypes": "GRP",
                        "description": "The output recalibration table file to create.",
                        "label": "BQSR Table",
                        "id": "#bqsr",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "glob": "*.recal_data.grp",
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "GATK BaseRecalibrator",
                "sbg:categories": [
                    "Plotting-and-Rendering",
                    "SAM/BAM-Processing"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911406,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 5,
                "description": "Overview\n\nThis tool is designed to work as the first pass in a two-pass processing step. It does a by-locus traversal operating only at sites that are not in dbSNP. We assume that all reference mismatches we see are therefore errors and indicative of poor base quality. This tool generates tables based on various user-specified covariates (such as read group, reported quality score, cycle, and context). Since there is a large amount of data, one can then calculate an empirical probability of error given the particular covariates seen at this site, where p(error) = num mismatches / num observations. The output file is a table (of the several covariate values, num observations, num mismatches, empirical quality score).\n\nNote: ReadGroupCovariate and QualityScoreCovariate are required covariates and will be added regardless of whether or not they were specified.\n\nInput\nA BAM file containing data that needs to be recalibrated.\nA database of known polymorphic sites to mask out.\n\nOutput\nA GATKReport file with many tables:\nThe list of arguments\nThe quantized qualities table\nThe recalibration table by read group\nThe recalibration table by quality score\nThe recalibration table for all the optional covariates\nThe GATKReport table format is intended to be easy to read by both humans and computer languages (especially R). Check out the documentation of the GATKReport (in the FAQs) to learn how to manipulate this table.\n\nUsage example\n java -jar GenomeAnalysisTK.jar \\\n   -T BaseRecalibrator \\\n   -R reference.fasta \\\n   -I my_reads.bam \\\n   -knownSites latest_dbsnp.vcf \\\n   -o recal_data.table\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "sbg:latestRevision": 5,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-base-recalibrator/7",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "BaseRecalibrator",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(3)\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "sbg:modifiedOn": 1450911413,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "intervals": "intervals",
                        "reads": [
                            {
                                "path": "/folder/my_reads.bam",
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": []
                            }
                        ],
                        "memory_overhead_per_job": 0,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "known_sites": [
                            {
                                "path": "/folder/latest_dbsnp.vcf"
                            }
                        ],
                        "cpu_per_job": null
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911406,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911409,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911410,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911411,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911412,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911413,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-base-recalibrator/5",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.recal_data.grp'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": "--disable_indel_quals"
                    },
                    {
                        "prefix": "--plot_pdf_file",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n    return read_namebase + '.pdf'\n\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "3"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "How should we recalibrate solid bases in which the reference was inserted? Options = DO_NOTHING, SET_Q_ZERO, SET_Q_ZERO_BASE_N, or REMOVE_REF_BIAS.",
                        "inputBinding": {
                            "prefix": "--solid_recal_mode",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Solid Recal Mode",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-sMode",
                        "id": "#solid_recal_mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "DO_NOTHING",
                                    "SET_Q_ZERO",
                                    "SET_Q_ZERO_BASE_N",
                                    "REMOVE_REF_BIAS"
                                ],
                                "type": "enum",
                                "name": "solid_recal_mode"
                            }
                        ],
                        "sbg:toolDefaultValue": "SET_Q_ZERO"
                    },
                    {
                        "description": "Defines the behavior of the recalibrator when it encounters no calls in the color space. Options = THROW_EXCEPTION, LEAVE_READ_UNRECALIBRATED, or PURGE_READ.",
                        "inputBinding": {
                            "prefix": "--solid_nocall_strategy",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Solid Nocall Strategy",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": null,
                        "id": "#solid_nocall_strategy",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "THROW_EXCEPTION",
                                    "LEAVE_READ_UNRECALIBRATED",
                                    "PURGE_READ"
                                ],
                                "type": "enum",
                                "name": "solid_nocall_strategy"
                            }
                        ],
                        "sbg:toolDefaultValue": "THROW_EXCEPTION"
                    },
                    {
                        "description": "If specified, allows the recalibrator to be used without a dbsnp rod. Very unsafe and for expert users only.",
                        "inputBinding": {
                            "prefix": "-run_without_dbsnp_potentially_ruining_quality",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Run Without Dbsnp Potentially Ruining Quality",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": null,
                        "id": "#run_without_dbsnp_potentially_ruining_quality",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "description": "Read sequences in BAM format.",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read sequences",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-I",
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Number of distinct quality scores in the quantized output.",
                        "inputBinding": {
                            "prefix": "--quantizing_levels",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Quantizing Levels",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-ql",
                        "id": "#quantizing_levels",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "16"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Do not use the standard set of covariates, but rather just the ones listed using the -cov argument. Cannot be used if grouped by interval.",
                        "inputBinding": {
                            "prefix": "--no_standard_covs",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "No Standard Covs",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-noStandard",
                        "id": "#no_standard_covs",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Default quality for the base mismatches covariate.",
                        "inputBinding": {
                            "prefix": "--mismatches_default_quality",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mismatches Default Quality",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-msdq",
                        "id": "#mismatches_default_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Size of the k-mer context to be used for base mismatches.",
                        "inputBinding": {
                            "prefix": "--mismatches_context_size",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mismatches Context Size",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-mcs",
                        "id": "#mismatches_context_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2"
                    },
                    {
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The maximum cycle value permitted for the Cycle covariate.",
                        "inputBinding": {
                            "prefix": "--maximum_cycle_value",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Maximum Cycle Value",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-maxCycle",
                        "id": "#maximum_cycle_value",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "500"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Minimum quality for the bases in the tail of the reads to be considered.",
                        "inputBinding": {
                            "prefix": "--low_quality_tail",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Low Quality Tail",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-lqt",
                        "id": "#low_quality_tail",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2"
                    },
                    {
                        "sbg:fileTypes": "VCF, BED, TXT",
                        "description": "A database of known polymorphic sites to skip over in the recalibration algorithm.",
                        "inputBinding": {
                            "prefix": "--knownSites",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Known Sites",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#known_sites",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file. Cannot be used if grouped by interval. .",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "sample"
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Default quality for the base insertions covariate.",
                        "inputBinding": {
                            "prefix": "--insertions_default_quality",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Insertions Default Quality",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-idq",
                        "id": "#insertions_default_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "45"
                    },
                    {
                        "description": "Size of the k-mer context to be used for base insertions and deletions.",
                        "inputBinding": {
                            "prefix": "--indels_context_size",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Indels Context Size",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-ics",
                        "id": "#indels_context_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "3"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Disable indel quality recalibration. Must be set to true in GATK Lite.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable indel quals",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": null,
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "True"
                    },
                    {
                        "description": "Default quality for the base deletions covariate.",
                        "inputBinding": {
                            "prefix": "--deletions_default_quality",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Deletions Default Quality",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-ddq",
                        "id": "#deletions_default_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "45"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPU per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "One or more covariates to be used in the recalibration. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--covariate",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Covariate",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-cov",
                        "id": "#covariate",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "CycleCovariate",
                                        "ReadGroupCovariate",
                                        "ContextCovariate",
                                        "RepeatLengthCovariate",
                                        "QualityScoreCovariate"
                                    ],
                                    "type": "enum",
                                    "name": "covariate"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--bqsrBAQGapOpenPenalty",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Bqsr Baq Gap Open Penalty",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-bqsrBAQGOP",
                        "id": "#bqsr_baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "The binary tag covariate name if using it.",
                        "inputBinding": {
                            "prefix": "--binary_tag_name",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Binary Tag Name",
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-bintag",
                        "id": "#binary_tag_name",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type BaseRecalibrator -nct 3 --reference_sequence /folder/reference.fasta --input_file /folder/my_reads.bam --out my_reads.recal_data.grp  --disable_indel_quals --plot_pdf_file my_reads.pdf",
                "sbg:toolAuthor": "Broad Institute"
            }
        },
        {
            "outputs": [
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
                }
            ],
            "sbg:y": 927.1429478197703,
            "id": "#Picard_CollectAlignmentSummaryMetrics",
            "sbg:x": 2037.1431512054246,
            "inputs": [
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.verbosity"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.validation_stringency"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.stop_after"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.quiet"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.metric_accumulation_level"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.memory_per_job"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.max_records_in_ram"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.max_insert_size"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.is_bisulfite_sequenced"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.input_bam",
                    "source": [
                        "#GATK_PrintReads.recalibrated_bam"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.compression_level"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.assume_sorted"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.adapter_sequence"
                }
            ],
            "run": {
                "y": 927.1429478197703,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "http://broadinstitute.github.io/picard/index.html",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.140",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://broadinstitute.github.io/picard/",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://github.com/broadinstitute/picard/zipball/master",
                        "label": "Download"
                    },
                    {
                        "id": "http://broadinstitute.github.io/picard/",
                        "label": "Publication"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "TXT",
                        "description": "File to which the output will be written.",
                        "label": "Summary metrics",
                        "id": "#summary_metrics",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_bam",
                            "glob": "*.summary_metrics.txt",
                            "secondaryFiles": [
                                ""
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "Picard",
                "label": "Picard CollectAlignmentSummaryMetrics",
                "x": 2037.1431512054246,
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911255,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 2,
                "description": "Picard CollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "class": "CommandLineTool",
                "sbg:latestRevision": 2,
                "sbg:id": "sevenbridges/public-apps/picard-collectalignmentsummarymetrics-1-140/2",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/picard-tools-1.140/picard.jar",
                    "CollectAlignmentSummaryMetrics"
                ],
                "sbg:modifiedOn": 1450911257,
                "sbg:project": "bix-demo/picard-1-140-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "metric_accumulation_level": [
                            "ALL_READS"
                        ],
                        "input_bam": {
                            "path": "/root/folder/example.bam"
                        },
                        "memory_per_job": 0,
                        "reference": {
                            "path": "/root/directory/example.fasta"
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911255,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911256,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911257,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/picard-1-140-demo/picard-collectalignmentsummarymetrics-1-140/2",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "1.140",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "position": 3,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = $job.inputs.input_bam.path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "eab0e70b6629",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 6
                        },
                        "label": "Verbosity",
                        "sbg:category": "",
                        "id": "#verbosity",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "type": "enum",
                                "name": "verbosity"
                            }
                        ],
                        "sbg:toolDefaultValue": "INFO"
                    },
                    {
                        "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 4,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Validation stringency",
                        "id": "#validation_stringency",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "validation_stringency"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 9
                        },
                        "label": "Stop after",
                        "sbg:category": "",
                        "id": "#stop_after",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "sbg:fileTypes": "FASTA",
                        "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated.  Default value: null.",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 3
                        },
                        "label": "Reference sequence",
                        "sbg:category": "File inputs",
                        "sbg:altPrefix": "R",
                        "id": "#reference",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "inputBinding": {
                            "prefix": "QUIET=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 4
                        },
                        "label": "Quiet",
                        "sbg:category": "",
                        "id": "#quiet",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "type": "enum",
                                "name": "quiet"
                            }
                        ],
                        "sbg:toolDefaultValue": "false"
                    },
                    {
                        "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "position": 8
                        },
                        "label": "Metric accumulation level",
                        "sbg:category": "",
                        "sbg:altPrefix": "LEVEL",
                        "id": "#metric_accumulation_level",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ],
                                    "type": "enum",
                                    "name": "metric_accumulation_level"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL_READS"
                    },
                    {
                        "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
                        "id": "#memory_per_job",
                        "label": "Memory per job",
                        "sbg:toolDefaultValue": "2048",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 4
                        },
                        "label": "Max records in RAM",
                        "sbg:category": "",
                        "id": "#max_records_in_ram",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "500000"
                    },
                    {
                        "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
                        "inputBinding": {
                            "prefix": "MAX_INSERT_SIZE=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 9
                        },
                        "label": "Max insert size",
                        "sbg:category": "",
                        "id": "#max_insert_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "100000"
                    },
                    {
                        "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "inputBinding": {
                            "prefix": "BS=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 8
                        },
                        "label": "Is bisulfite sequenced",
                        "sbg:category": "",
                        "sbg:altPrefix": "BS",
                        "id": "#is_bisulfite_sequenced",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "type": "enum",
                                "name": "is_bisulfite_sequenced"
                            }
                        ],
                        "sbg:toolDefaultValue": "false"
                    },
                    {
                        "sbg:fileTypes": "BAM, SAM",
                        "description": "Input SAM or BAM file.  Required.",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 0
                        },
                        "label": "Input file",
                        "sbg:category": "File inputs",
                        "sbg:altPrefix": "I",
                        "id": "#input_bam",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
                        "inputBinding": {
                            "prefix": "COMPRESSION_LEVEL=",
                            "separate": false,
                            "sbg:cmdInclude": true,
                            "position": 4
                        },
                        "label": "Compression level",
                        "sbg:category": "",
                        "id": "#compression_level",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "5"
                    },
                    {
                        "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Assume sorted",
                        "sbg:category": "",
                        "sbg:altPrefix": "AS",
                        "id": "#assume_sorted",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "type": "enum",
                                "name": "assume_sorted"
                            }
                        ],
                        "sbg:toolDefaultValue": "true"
                    },
                    {
                        "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "inputBinding": {
                            "prefix": "ADAPTER_SEQUENCE=",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "position": 8
                        },
                        "label": "Adapter sequence",
                        "sbg:category": "",
                        "id": "#adapter_sequence",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar CollectAlignmentSummaryMetrics INPUT=/root/folder/example.bam REFERENCE_SEQUENCE=/root/directory/example.fasta OUTPUT=example.summary_metrics.txt METRIC_ACCUMULATION_LEVEL=ALL_READS INPUT=/root/folder/example.bam /root/folder/example.bam",
                "sbg:toolAuthor": "Broad Institute"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_UnifiedGenotyper.raw_vcf"
                }
            ],
            "sbg:y": 773.4525860065579,
            "id": "#GATK_UnifiedGenotyper",
            "sbg:x": 2065.1792810829174,
            "inputs": [
                {
                    "id": "#GATK_UnifiedGenotyper.validation_strictness"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.use_original_qualities"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.unsafe"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_UnifiedGenotyper.tag"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.stand_emit_conf"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.stand_call_conf"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.remove_program_records"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reference_sample_calls"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reads",
                    "source": [
                        "#GATK_PrintReads.recalibrated_bam"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.read_group_black_list"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.read_filter"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.phone_home"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pedigree_validation_type"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pedigree_string"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pcr_error_rate"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pair_hmm_implementation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.p_nonref_model"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.output_mode"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_indel_frac"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_indel_cnt"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_base_quality_score"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.memory_per_job",
                    "default": 2000
                },
                {
                    "id": "#GATK_UnifiedGenotyper.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_runtime_units"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_runtime"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_deletion_fraction"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_alternate_alleles"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.keep_program_records"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.intervals_file",
                    "source": [
                        "#Target_BED"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.intervals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_set_rule"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_padding"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_merging"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_heterozygosity"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_gap_open_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_gap_continuation_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.ignore_lane_info"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.heterozygosity"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.group"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.genotyping_mode"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.genotype_likelihoods_model",
                    "default": "BOTH"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.gatk_key"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.exclude_intervals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.exclude_annotation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.emit_original_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsampling_type"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsample_to_fraction"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsample_to_coverage"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.disable_radnomization"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.disable_indel_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.default_base_qualities"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.dbsnp",
                    "source": [
                        "#Known_SNPs"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_UnifiedGenotyper.contamination"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.compute_slod"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.comp"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.bqsr"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.baq"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.annotation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.annotate_nda"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.allow_potentailly_misencoded_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.alleles"
                }
            ],
            "run": {
                "y": 773.4525860065579,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_genotyper_UnifiedGenotyper.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "A raw, unfiltered, highly specific callset in VCF format.",
                        "label": "VCF",
                        "id": "#raw_vcf",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "glob": "*.vcf",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "GATK UnifiedGenotyper",
                "x": 2065.1792810829174,
                "sbg:categories": [
                    "Variant-Calling"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911349,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 5,
                "description": "Overview\n\nThis tool uses a Bayesian genotype likelihood model to estimate simultaneously the most likely genotypes and allele frequency in a population of N samples, emitting a genotype for each sample. The system can either emit just the variant sites or complete genotypes (which includes homozygous reference calls) satisfying some phred-scaled confidence value.\n\nInput\nThe read data from which to make variant calls.\n\nOutput\nA raw, unfiltered, highly sensitive callset in VCF format.\n\nUsage examples:\n\n//Multi-sample SNP calling\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I sample1.bam [-I sample2.bam ...] \\\n   --dbsnp dbSNP.vcf \\\n   -o snps.raw.vcf \\\n   -stand_call_conf [50.0] \\\n   -stand_emit_conf 10.0 \\\n   [-L targets.interval_list]\n \n//Generate calls at all sites\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o raw_variants.vcf \\\n   --output_mode EMIT_ALL_SITES\n \nCaveats\n\nThe caller can be very aggressive in calling variants in order to be very sensitive, so the raw output will contain many false positives. We use extensive post-calling filters to eliminate most of these FPs. See the documentation on filtering (especially by Variant Quality Score Recalibration) for more details.\nThis tool has been deprecated in favor of HaplotypeCaller, a much more sophisticated variant caller that produces much better calls, especially on indels, and includes features that allow it to scale to much larger cohort sizes.\nSpecial note on ploidy\n\nThis tool is able to handle almost any ploidy (except very high ploidies in large pooled experiments); the ploidy can be specified using the -ploidy argument for non-diploid organisms.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "sbg:latestRevision": 5,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-unifiedgenotyper/12",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  return '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "UnifiedGenotyper",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(4)\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "sbg:modifiedOn": 1450911354,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "stand_call_conf": 50,
                        "reads": [
                            {
                                "path": "sample1.bam"
                            },
                            {
                                "path": "sample2.bam"
                            }
                        ],
                        "memory_overhead_per_job": 0,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "stand_emit_conf": 10,
                        "intervals_file": {
                            "path": "/folder/targets.interval_list"
                        },
                        "dbsnp": {
                            "path": "/folder/dbSNP.vcf"
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911349,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911350,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911351,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911352,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911353,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911354,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-unifiedgenotyper/5",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.vcf'\n  }\n  else{\n  \treturn read_namebase + '.vcf'\n  }\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold).",
                        "inputBinding": {
                            "prefix": "--standard_min_confidence_threshold_for_emitting",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Stand Emit Conf",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-stand_emit_conf",
                        "id": "#stand_emit_conf",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "30.0"
                    },
                    {
                        "description": "The minimum phred-scaled confidence threshold at which variants should be called.",
                        "inputBinding": {
                            "prefix": "--standard_min_confidence_threshold_for_calling",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Stand Call Conf",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-stand_call_conf",
                        "id": "#stand_call_conf",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "30.0"
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "VCF file with the truth callset for the reference sample.",
                        "inputBinding": {
                            "prefix": "--reference_sample_calls",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Sample Calls",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#reference_sample_calls",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "description": "Read sequences in BAM format.",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read sequences",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-I",
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "The PCR error rate to be used for computing fragment-based likelihoods.",
                        "inputBinding": {
                            "prefix": "--pcr_error_rate",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pcr Error Rate",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-pcr_error",
                        "id": "#pcr_error_rate",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0001"
                    },
                    {
                        "description": "The PairHMM implementation to use for -glm INDEL genotype likelihood calculations.",
                        "inputBinding": {
                            "prefix": "--pair_hmm_implementation",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pair Hmm Implementation",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-pairHMM",
                        "id": "#pair_hmm_implementation",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "EXACT",
                                    "ORIGINAL",
                                    "CACHING",
                                    "LOGLESS_CACHING"
                                ],
                                "type": "enum",
                                "name": "pair_hmm_implementation"
                            }
                        ],
                        "sbg:toolDefaultValue": "ORIGINAL"
                    },
                    {
                        "description": "Non-reference probability calculation model to employ.",
                        "inputBinding": {
                            "prefix": "--p_nonref_model",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "P Nonref Model",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": null,
                        "id": "#p_nonref_model",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "EXACT_INDEPENDENT",
                                    "EXACT_REFERENCE",
                                    "EXACT_ORIGINAL",
                                    "EXACT_GENERAL_PLOIDY"
                                ],
                                "type": "enum",
                                "name": "p_nonref_model"
                            }
                        ],
                        "sbg:toolDefaultValue": "EXACT_INDEPENDENT"
                    },
                    {
                        "description": "Specifies which type of calls we should output.",
                        "inputBinding": {
                            "prefix": "--output_mode",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Output Mode",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-out_mode",
                        "id": "#output_mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "EMIT_VARIANTS_ONLY",
                                    "EMIT_ALL_CONFIDENT_SITES",
                                    "EMIT_ALL_SITES"
                                ],
                                "type": "enum",
                                "name": "output_mode"
                            }
                        ],
                        "sbg:toolDefaultValue": "EMIT_VARIANTS_ONLY"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Minimum fraction of all reads at a locus that must contain an indel (of any allele) for that sample to contribute to the indel count for alleles.",
                        "inputBinding": {
                            "prefix": "-minIndelFrac",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Min Indel Frac",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-minIndelFrac",
                        "id": "#min_indel_frac",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.25"
                    },
                    {
                        "description": "Minimum number of consensus indels required to trigger genotyping run.",
                        "inputBinding": {
                            "prefix": "--min_indel_count_for_genotyping",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Min Indel Cnt",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-minIndelCnt",
                        "id": "#min_indel_cnt",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "5"
                    },
                    {
                        "description": "Minimum base quality required to consider a base for calling.",
                        "inputBinding": {
                            "prefix": "--min_base_quality_score",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Min Base Quality Score",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-mbq",
                        "id": "#min_base_quality_score",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "17"
                    },
                    {
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Maximum fraction of reads with deletions spanning this locus for it to be callable [to disable, set to  1; default:0.05].",
                        "inputBinding": {
                            "prefix": "--max_deletion_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Deletion Fraction",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-deletions",
                        "id": "#max_deletion_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.05"
                    },
                    {
                        "description": "Maximum number of alternate alleles to genotype.",
                        "inputBinding": {
                            "prefix": "--max_alternate_alleles",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Alternate Alleles",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-maxAltAlleles",
                        "id": "#max_alternate_alleles",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Heterozygosity for indel calling.",
                        "inputBinding": {
                            "prefix": "--indel_heterozygosity",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Indel Heterozygosity",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-indelHeterozygosity",
                        "id": "#indel_heterozygosity",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.000125"
                    },
                    {
                        "description": "Indel gap open penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
                        "inputBinding": {
                            "prefix": "--indelGapOpenPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Indel Gap Open Penalty",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-indelGOP",
                        "id": "#indel_gap_open_penalty",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "45"
                    },
                    {
                        "description": "Indel gap continuation penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
                        "inputBinding": {
                            "prefix": "--indelGapContinuationPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Indel Gap Continuation Penalty",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-indelGCP",
                        "id": "#indel_gap_continuation_penalty",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "10"
                    },
                    {
                        "description": "Ignore lane when building error model, error model is then per-site.",
                        "inputBinding": {
                            "prefix": "--ignoreLaneInfo",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Ignore Lane Info",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": null,
                        "id": "#ignore_lane_info",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Heterozygosity value used to compute prior likelihoods for any locus.",
                        "inputBinding": {
                            "prefix": "--heterozygosity",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Heterozygosity",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-hets",
                        "id": "#heterozygosity",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.001"
                    },
                    {
                        "description": "One or more classes/groups of annotations to apply to variant calls.",
                        "inputBinding": {
                            "prefix": "--group",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Group",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-G",
                        "id": "#group",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[u'Standard']"
                    },
                    {
                        "description": "Specifies how to determine the alternate alleles to use for genotyping.",
                        "inputBinding": {
                            "prefix": "--genotyping_mode",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Genotyping Mode",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-gt_mode",
                        "id": "#genotyping_mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "DISCOVERY",
                                    "GENOTYPE_GIVEN_ALLELES"
                                ],
                                "type": "enum",
                                "name": "genotyping_mode"
                            }
                        ],
                        "sbg:toolDefaultValue": "DISCOVERY"
                    },
                    {
                        "description": "Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together.",
                        "inputBinding": {
                            "prefix": "--genotype_likelihoods_model",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Genotype Likelihoods Model",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-glm",
                        "id": "#genotype_likelihoods_model",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "GENERALPLOIDYSNP",
                                    "GENERALPLOIDYINDEL",
                                    "BOTH"
                                ],
                                "type": "enum",
                                "name": "genotype_likelihoods_model"
                            }
                        ],
                        "sbg:toolDefaultValue": "SNP"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more specific annotations to exclude.",
                        "inputBinding": {
                            "prefix": "--excludeAnnotation",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Annotation",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-XA",
                        "id": "#exclude_annotation",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "DbSNP file in VCF format.",
                        "inputBinding": {
                            "prefix": "--dbsnp",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "DbSNP",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-D",
                        "id": "#dbsnp",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove.",
                        "inputBinding": {
                            "prefix": "--contamination_fraction_to_filter",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Contamination",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-contamination",
                        "id": "#contamination",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.05"
                    },
                    {
                        "description": "If provided, we will calculate the SLOD (SB annotation).",
                        "inputBinding": {
                            "prefix": "--computeSLOD",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Compute Slod",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-slod",
                        "id": "#compute_slod",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Comparison VCF file.",
                        "inputBinding": {
                            "prefix": "--comp",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Comp",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#comp",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "sbg:fileTypes": "GRP",
                        "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
                        "inputBinding": {
                            "prefix": "--BQSR",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BQSR",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-BQSR",
                        "id": "#bqsr",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "One or more specific annotations to apply to variant calls.",
                        "inputBinding": {
                            "prefix": "--annotation",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Annotation",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-A",
                        "id": "#annotation",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site.",
                        "inputBinding": {
                            "prefix": "--annotateNDA",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Annotate Nda",
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-nda",
                        "id": "#annotate_nda",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES.",
                        "inputBinding": {
                            "prefix": "--alleles",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Alleles",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-alleles",
                        "id": "#alleles",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type UnifiedGenotyper -nt 4 --reference_sequence /folder/reference.fasta --input_file sample1.bam --input_file sample2.bam --out sample1.vcf",
                "sbg:toolAuthor": "Broad Institute"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_VariantFiltration_.filtered_vcf"
                }
            ],
            "sbg:y": 708.333292403189,
            "id": "#GATK_VariantFiltration_",
            "sbg:x": 2895.71471224672,
            "inputs": [
                {
                    "id": "#GATK_VariantFiltration_.variants",
                    "source": [
                        "#GATK_SelectVariants.select_variants_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration_.validation_strictness"
                },
                {
                    "id": "#GATK_VariantFiltration_.use_original_qualities"
                },
                {
                    "id": "#GATK_VariantFiltration_.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_VariantFiltration_.unsafe",
                    "default": "ALLOW_UNINDEXED_BAM"
                },
                {
                    "id": "#GATK_VariantFiltration_.threads_per_job"
                },
                {
                    "id": "#GATK_VariantFiltration_.tag"
                },
                {
                    "id": "#GATK_VariantFiltration_.remove_program_records"
                },
                {
                    "id": "#GATK_VariantFiltration_.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration_.read_group_black_list"
                },
                {
                    "id": "#GATK_VariantFiltration_.read_filter"
                },
                {
                    "id": "#GATK_VariantFiltration_.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_VariantFiltration_.phone_home"
                },
                {
                    "id": "#GATK_VariantFiltration_.pedigree_validation_type"
                },
                {
                    "id": "#GATK_VariantFiltration_.pedigree_string"
                },
                {
                    "id": "#GATK_VariantFiltration_.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_VariantFiltration_.missing_values_in_expressions_should_evaluate_as_failing"
                },
                {
                    "id": "#GATK_VariantFiltration_.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_VariantFiltration_.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_VariantFiltration_.max_runtime_units"
                },
                {
                    "id": "#GATK_VariantFiltration_.max_runtime"
                },
                {
                    "id": "#GATK_VariantFiltration_.mask_name"
                },
                {
                    "id": "#GATK_VariantFiltration_.mask_extension"
                },
                {
                    "id": "#GATK_VariantFiltration_.mask"
                },
                {
                    "id": "#GATK_VariantFiltration_.keep_program_records"
                },
                {
                    "id": "#GATK_VariantFiltration_.invalidate_previous_filters"
                },
                {
                    "id": "#GATK_VariantFiltration_.intervals_file"
                },
                {
                    "id": "#GATK_VariantFiltration_.intervals"
                },
                {
                    "id": "#GATK_VariantFiltration_.interval_set_rule"
                },
                {
                    "id": "#GATK_VariantFiltration_.interval_padding"
                },
                {
                    "id": "#GATK_VariantFiltration_.interval_merging"
                },
                {
                    "id": "#GATK_VariantFiltration_.genotype_filter_name"
                },
                {
                    "id": "#GATK_VariantFiltration_.genotype_filter_expression"
                },
                {
                    "id": "#GATK_VariantFiltration_.gatk_key"
                },
                {
                    "id": "#GATK_VariantFiltration_.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_VariantFiltration_.filter_name",
                    "default": [
                        "QD",
                        "MQ",
                        "FS",
                        "HaplotypeScore",
                        "MQRankSum",
                        "ReadPosRankSum"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration_.filter_expression",
                    "default": [
                        "QD < 2.0",
                        "MQ < 40.0",
                        "FS > 60.0",
                        "HaplotypeScore > 13.0",
                        "MQRankSum < -12.5",
                        "ReadPosRankSum < -8.0"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration_.exclude_intervals"
                },
                {
                    "id": "#GATK_VariantFiltration_.emit_original_quals"
                },
                {
                    "id": "#GATK_VariantFiltration_.downsampling_type"
                },
                {
                    "id": "#GATK_VariantFiltration_.downsample_to_fraction"
                },
                {
                    "id": "#GATK_VariantFiltration_.downsample_to_coverage"
                },
                {
                    "id": "#GATK_VariantFiltration_.disable_radnomization"
                },
                {
                    "id": "#GATK_VariantFiltration_.disable_indel_quals"
                },
                {
                    "id": "#GATK_VariantFiltration_.default_base_qualities"
                },
                {
                    "id": "#GATK_VariantFiltration_.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_VariantFiltration_.cluster_window_size"
                },
                {
                    "id": "#GATK_VariantFiltration_.cluster_size"
                },
                {
                    "id": "#GATK_VariantFiltration_.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_VariantFiltration_.baq"
                },
                {
                    "id": "#GATK_VariantFiltration_.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "y": 708.333292403189,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_filters_VariantFiltration.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "File to which variants should be written.",
                        "label": "Filtered VCF",
                        "id": "#filtered_vcf",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "glob": "*.vcf",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "SNP GATK VariantFiltration",
                "x": 2895.71471224672,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911414,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 6,
                "description": "Overview\nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line.\n\nInput\nA variant set to filter.\n\nOutput\nA filtered VCF.\n\nUsage example\n java -jar GenomeAnalysisTK.jar \\\n   -T VariantFiltration \\\n   -R reference.fasta \\\n   -o output.vcf \\\n   --variant input.vcf \\\n   --filterExpression \"AB < 0.2 || MQ0 > 50\" \\\n   --filterName \"Nov09filters\" \\\n   --mask mask.vcf \\\n   --maskName InDel\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "sbg:latestRevision": 6,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-variantfiltration/9",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "VariantFiltration"
                ],
                "sbg:modifiedOn": 1450911419,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "unsafe": null,
                        "validation_strictness": null,
                        "filter_name": [
                            "qd",
                            "rank"
                        ],
                        "memory_overhead_per_job": 0,
                        "filter_expression": [
                            "qd<2",
                            "rank>10"
                        ],
                        "genotype_filter_expression": [],
                        "genotype_filter_name": [],
                        "variants": [
                            {
                                "path": "varaint.vcf"
                            }
                        ]
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911414,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911415,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911416,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911417,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911418,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911419,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1450911419,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantfiltration/6",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "position": 1,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{ \n  if($job.inputs.filter_name && $job.inputs.filter_expression){\n    name = $job.inputs.filter_name\n    expression = $job.inputs.filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--filterName \"', name[i], '\" --filterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.genotype_filter_name && $job.inputs.genotype_filter_expression){\n    name = $job.inputs.genotype_filter_name\n    expression = $job.inputs.genotype_filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--genotypeFilterName \"', name[i], '\" --genotypeFilterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Input VCF file.",
                        "inputBinding": {
                            "prefix": "--variant",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Variants",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-V",
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.validation_strictness){\n  \treturn 'SILENT'\n  }\n  else\n    return $job.inputs.validation_strictness\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.unsafe){\n  \treturn 'LENIENT_VCF_PROCESSING'\n  }\n  else\n    return $job.inputs.unsafe\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression.",
                        "inputBinding": {
                            "prefix": "--missingValuesInExpressionsShouldEvaluateAsFailing",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Missing Values In Expressions Should Evaluate As Failing",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": null,
                        "id": "#missing_values_in_expressions_should_evaluate_as_failing",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call.",
                        "inputBinding": {
                            "prefix": "--maskName",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mask Name",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-maskName",
                        "id": "#mask_name",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "Mask"
                    },
                    {
                        "description": "How many bases beyond records from a provided 'mask' rod should variants be filtered.",
                        "inputBinding": {
                            "prefix": "--maskExtension",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mask Extension",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-maskExtend",
                        "id": "#mask_extension",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "sbg:fileTypes": "BCF2, BEAGLE, BED, BEDTABLE, EXAMPLEBINARY, GELITEXT, RAWHAPMAP, REFSEQ, SAMPILEUP, SAMREAD, TABLE, VCF, VCF3",
                        "description": "Input ROD mask.",
                        "inputBinding": {
                            "prefix": "--mask",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mask",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-mask",
                        "id": "#mask",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Remove previous filters applied to the VCF.",
                        "inputBinding": {
                            "prefix": "--invalidatePreviousFilters",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Invalidate Previous Filters",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": null,
                        "id": "#invalidate_previous_filters",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered",
                        "label": "Genotype filter name",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-G_filterName",
                        "id": "#genotype_filter_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)",
                        "label": "Genotype filter expression",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-G_filter",
                        "id": "#genotype_filter_expression",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Names to use for the list of filters",
                        "label": "FIlter name",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-filterName",
                        "id": "#filter_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "description": "One or more expression used with INFO fields to filter",
                        "label": "Filter expression",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-filter",
                        "id": "#filter_expression",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "The window size (in bases) in which to evaluate clustered SNPs.",
                        "inputBinding": {
                            "prefix": "--clusterWindowSize",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Cluster Window Size",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-window",
                        "id": "#cluster_window_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The number of SNPs which make up a cluster.",
                        "inputBinding": {
                            "prefix": "--clusterSize",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Cluster Size",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-cluster",
                        "id": "#cluster_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "3"
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantFiltration --variant varaint.vcf  --filterName \"qd\" --filterExpression \"qd<2\" --filterName \"rank\" --filterExpression \"rank>10\"   --out varaint.vcf",
                "sbg:toolAuthor": "Broad"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_VariantFiltration__1.filtered_vcf"
                }
            ],
            "sbg:y": 938.0955572960986,
            "id": "#GATK_VariantFiltration__1",
            "sbg:x": 2894.287060894714,
            "inputs": [
                {
                    "id": "#GATK_VariantFiltration__1.variants",
                    "source": [
                        "#GATK_SelectVariants_1.select_variants_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration__1.validation_strictness"
                },
                {
                    "id": "#GATK_VariantFiltration__1.use_original_qualities"
                },
                {
                    "id": "#GATK_VariantFiltration__1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_VariantFiltration__1.unsafe",
                    "default": "ALLOW_UNINDEXED_BAM"
                },
                {
                    "id": "#GATK_VariantFiltration__1.threads_per_job"
                },
                {
                    "id": "#GATK_VariantFiltration__1.tag"
                },
                {
                    "id": "#GATK_VariantFiltration__1.remove_program_records"
                },
                {
                    "id": "#GATK_VariantFiltration__1.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration__1.read_group_black_list"
                },
                {
                    "id": "#GATK_VariantFiltration__1.read_filter"
                },
                {
                    "id": "#GATK_VariantFiltration__1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_VariantFiltration__1.phone_home"
                },
                {
                    "id": "#GATK_VariantFiltration__1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_VariantFiltration__1.pedigree_string"
                },
                {
                    "id": "#GATK_VariantFiltration__1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_VariantFiltration__1.missing_values_in_expressions_should_evaluate_as_failing"
                },
                {
                    "id": "#GATK_VariantFiltration__1.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_VariantFiltration__1.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_VariantFiltration__1.max_runtime_units"
                },
                {
                    "id": "#GATK_VariantFiltration__1.max_runtime"
                },
                {
                    "id": "#GATK_VariantFiltration__1.mask_name"
                },
                {
                    "id": "#GATK_VariantFiltration__1.mask_extension"
                },
                {
                    "id": "#GATK_VariantFiltration__1.mask"
                },
                {
                    "id": "#GATK_VariantFiltration__1.keep_program_records"
                },
                {
                    "id": "#GATK_VariantFiltration__1.invalidate_previous_filters"
                },
                {
                    "id": "#GATK_VariantFiltration__1.intervals_file"
                },
                {
                    "id": "#GATK_VariantFiltration__1.intervals"
                },
                {
                    "id": "#GATK_VariantFiltration__1.interval_set_rule"
                },
                {
                    "id": "#GATK_VariantFiltration__1.interval_padding"
                },
                {
                    "id": "#GATK_VariantFiltration__1.interval_merging"
                },
                {
                    "id": "#GATK_VariantFiltration__1.genotype_filter_name"
                },
                {
                    "id": "#GATK_VariantFiltration__1.genotype_filter_expression"
                },
                {
                    "id": "#GATK_VariantFiltration__1.gatk_key"
                },
                {
                    "id": "#GATK_VariantFiltration__1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_VariantFiltration__1.filter_name",
                    "default": [
                        "QD",
                        "FS",
                        "ReadPosRankSum"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration__1.filter_expression",
                    "default": [
                        "QD < 2.0",
                        "FS > 200.0",
                        "ReadPosRankSum < -20.0"
                    ]
                },
                {
                    "id": "#GATK_VariantFiltration__1.exclude_intervals"
                },
                {
                    "id": "#GATK_VariantFiltration__1.emit_original_quals"
                },
                {
                    "id": "#GATK_VariantFiltration__1.downsampling_type"
                },
                {
                    "id": "#GATK_VariantFiltration__1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_VariantFiltration__1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_VariantFiltration__1.disable_radnomization"
                },
                {
                    "id": "#GATK_VariantFiltration__1.disable_indel_quals"
                },
                {
                    "id": "#GATK_VariantFiltration__1.default_base_qualities"
                },
                {
                    "id": "#GATK_VariantFiltration__1.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_VariantFiltration__1.cluster_window_size"
                },
                {
                    "id": "#GATK_VariantFiltration__1.cluster_size"
                },
                {
                    "id": "#GATK_VariantFiltration__1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_VariantFiltration__1.baq"
                },
                {
                    "id": "#GATK_VariantFiltration__1.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "y": 938.0955572960986,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_filters_VariantFiltration.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "File to which variants should be written.",
                        "label": "Filtered VCF",
                        "id": "#filtered_vcf",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "glob": "*.vcf",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "Indel GATK VariantFiltration",
                "x": 2894.287060894714,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911414,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 6,
                "description": "Overview\nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line.\n\nInput\nA variant set to filter.\n\nOutput\nA filtered VCF.\n\nUsage example\n java -jar GenomeAnalysisTK.jar \\\n   -T VariantFiltration \\\n   -R reference.fasta \\\n   -o output.vcf \\\n   --variant input.vcf \\\n   --filterExpression \"AB < 0.2 || MQ0 > 50\" \\\n   --filterName \"Nov09filters\" \\\n   --mask mask.vcf \\\n   --maskName InDel\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "sbg:latestRevision": 6,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-variantfiltration/9",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "VariantFiltration"
                ],
                "sbg:modifiedOn": 1450911419,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "unsafe": null,
                        "validation_strictness": null,
                        "filter_name": [
                            "qd",
                            "rank"
                        ],
                        "memory_overhead_per_job": 0,
                        "filter_expression": [
                            "qd<2",
                            "rank>10"
                        ],
                        "genotype_filter_expression": [],
                        "genotype_filter_name": [],
                        "variants": [
                            {
                                "path": "varaint.vcf"
                            }
                        ]
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911414,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911415,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911416,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911417,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911418,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911419,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1450911419,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantfiltration/6",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "position": 1,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{ \n  if($job.inputs.filter_name && $job.inputs.filter_expression){\n    name = $job.inputs.filter_name\n    expression = $job.inputs.filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--filterName \"', name[i], '\" --filterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.genotype_filter_name && $job.inputs.genotype_filter_expression){\n    name = $job.inputs.genotype_filter_name\n    expression = $job.inputs.genotype_filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--genotypeFilterName \"', name[i], '\" --genotypeFilterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Input VCF file.",
                        "inputBinding": {
                            "prefix": "--variant",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Variants",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-V",
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.validation_strictness){\n  \treturn 'SILENT'\n  }\n  else\n    return $job.inputs.validation_strictness\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.unsafe){\n  \treturn 'LENIENT_VCF_PROCESSING'\n  }\n  else\n    return $job.inputs.unsafe\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression.",
                        "inputBinding": {
                            "prefix": "--missingValuesInExpressionsShouldEvaluateAsFailing",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Missing Values In Expressions Should Evaluate As Failing",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": null,
                        "id": "#missing_values_in_expressions_should_evaluate_as_failing",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call.",
                        "inputBinding": {
                            "prefix": "--maskName",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mask Name",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-maskName",
                        "id": "#mask_name",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "Mask"
                    },
                    {
                        "description": "How many bases beyond records from a provided 'mask' rod should variants be filtered.",
                        "inputBinding": {
                            "prefix": "--maskExtension",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mask Extension",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-maskExtend",
                        "id": "#mask_extension",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "sbg:fileTypes": "BCF2, BEAGLE, BED, BEDTABLE, EXAMPLEBINARY, GELITEXT, RAWHAPMAP, REFSEQ, SAMPILEUP, SAMREAD, TABLE, VCF, VCF3",
                        "description": "Input ROD mask.",
                        "inputBinding": {
                            "prefix": "--mask",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mask",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-mask",
                        "id": "#mask",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Remove previous filters applied to the VCF.",
                        "inputBinding": {
                            "prefix": "--invalidatePreviousFilters",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Invalidate Previous Filters",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": null,
                        "id": "#invalidate_previous_filters",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered",
                        "label": "Genotype filter name",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-G_filterName",
                        "id": "#genotype_filter_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)",
                        "label": "Genotype filter expression",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-G_filter",
                        "id": "#genotype_filter_expression",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Names to use for the list of filters",
                        "label": "FIlter name",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-filterName",
                        "id": "#filter_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "description": "One or more expression used with INFO fields to filter",
                        "label": "Filter expression",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-filter",
                        "id": "#filter_expression",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "The window size (in bases) in which to evaluate clustered SNPs.",
                        "inputBinding": {
                            "prefix": "--clusterWindowSize",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Cluster Window Size",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-window",
                        "id": "#cluster_window_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The number of SNPs which make up a cluster.",
                        "inputBinding": {
                            "prefix": "--clusterSize",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Cluster Size",
                        "sbg:category": "Variant Filtration",
                        "sbg:altPrefix": "-cluster",
                        "id": "#cluster_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "3"
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantFiltration --variant varaint.vcf  --filterName \"qd\" --filterExpression \"qd<2\" --filterName \"rank\" --filterExpression \"rank>10\"   --out varaint.vcf",
                "sbg:toolAuthor": "Broad"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_SelectVariants.select_variants_vcf"
                }
            ],
            "sbg:y": 710.0001704352328,
            "id": "#GATK_SelectVariants",
            "sbg:x": 2582.8574568495565,
            "inputs": [
                {
                    "id": "#GATK_SelectVariants.variants",
                    "source": [
                        "#GATK_UnifiedGenotyper.raw_vcf"
                    ]
                },
                {
                    "id": "#GATK_SelectVariants.validation_strictness"
                },
                {
                    "id": "#GATK_SelectVariants.use_original_qualities"
                },
                {
                    "id": "#GATK_SelectVariants.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_SelectVariants.unsafe"
                },
                {
                    "id": "#GATK_SelectVariants.threads_per_job"
                },
                {
                    "id": "#GATK_SelectVariants.tag"
                },
                {
                    "id": "#GATK_SelectVariants.select_type_to_include",
                    "default": [
                        "SNP"
                    ]
                },
                {
                    "id": "#GATK_SelectVariants.select_random_fraction"
                },
                {
                    "id": "#GATK_SelectVariants.select_expressions"
                },
                {
                    "id": "#GATK_SelectVariants.sample_name"
                },
                {
                    "id": "#GATK_SelectVariants.sample_expressions"
                },
                {
                    "id": "#GATK_SelectVariants.restrict_alleles_to"
                },
                {
                    "id": "#GATK_SelectVariants.remove_program_records"
                },
                {
                    "id": "#GATK_SelectVariants.remove_fraction_genotypes"
                },
                {
                    "id": "#GATK_SelectVariants.regenotype"
                },
                {
                    "id": "#GATK_SelectVariants.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_SelectVariants.read_group_black_list"
                },
                {
                    "id": "#GATK_SelectVariants.read_filter"
                },
                {
                    "id": "#GATK_SelectVariants.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_SelectVariants.phone_home"
                },
                {
                    "id": "#GATK_SelectVariants.pedigree_validation_type"
                },
                {
                    "id": "#GATK_SelectVariants.pedigree_string"
                },
                {
                    "id": "#GATK_SelectVariants.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_SelectVariants.mvq"
                },
                {
                    "id": "#GATK_SelectVariants.mendelian_violation"
                },
                {
                    "id": "#GATK_SelectVariants.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_SelectVariants.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_SelectVariants.max_runtime_units"
                },
                {
                    "id": "#GATK_SelectVariants.max_runtime"
                },
                {
                    "id": "#GATK_SelectVariants.max_indel_size"
                },
                {
                    "id": "#GATK_SelectVariants.keep_program_records"
                },
                {
                    "id": "#GATK_SelectVariants.keep_original_ac"
                },
                {
                    "id": "#GATK_SelectVariants.keep_ids"
                },
                {
                    "id": "#GATK_SelectVariants.intervals_file"
                },
                {
                    "id": "#GATK_SelectVariants.intervals"
                },
                {
                    "id": "#GATK_SelectVariants.interval_set_rule"
                },
                {
                    "id": "#GATK_SelectVariants.interval_padding"
                },
                {
                    "id": "#GATK_SelectVariants.interval_merging"
                },
                {
                    "id": "#GATK_SelectVariants.gatk_key"
                },
                {
                    "id": "#GATK_SelectVariants.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_SelectVariants.exclude_sample_name"
                },
                {
                    "id": "#GATK_SelectVariants.exclude_non_variants"
                },
                {
                    "id": "#GATK_SelectVariants.exclude_intervals"
                },
                {
                    "id": "#GATK_SelectVariants.exclude_filtered"
                },
                {
                    "id": "#GATK_SelectVariants.emit_original_quals"
                },
                {
                    "id": "#GATK_SelectVariants.downsampling_type"
                },
                {
                    "id": "#GATK_SelectVariants.downsample_to_fraction"
                },
                {
                    "id": "#GATK_SelectVariants.downsample_to_coverage"
                },
                {
                    "id": "#GATK_SelectVariants.discordance"
                },
                {
                    "id": "#GATK_SelectVariants.disable_radnomization"
                },
                {
                    "id": "#GATK_SelectVariants.disable_indel_quals"
                },
                {
                    "id": "#GATK_SelectVariants.default_base_qualities"
                },
                {
                    "id": "#GATK_SelectVariants.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_SelectVariants.concordance"
                },
                {
                    "id": "#GATK_SelectVariants.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_SelectVariants.baq"
                },
                {
                    "id": "#GATK_SelectVariants.allow_potentailly_misencoded_quals"
                },
                {
                    "id": "#GATK_SelectVariants.allow_nonoverlapping_command_line_samples"
                }
            ],
            "run": {
                "y": 710.0001704352328,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantutils_SelectVariants.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "File to which variants should be written.",
                        "label": "Select Variants VCF",
                        "id": "#select_variants_vcf",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "glob": "*.vcf",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "SNP GATK SelectVariants",
                "x": 2582.8574568495565,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911431,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 7,
                "description": "Overview\n\nOften, a VCF containing many samples and/or variants will need to be subset in order to facilitate certain analyses (e.g. comparing and contrasting cases vs. controls; extracting variant or non-variant loci that meet certain requirements, displaying just a few samples in a browser like IGV, etc.). SelectVariants can be used for this purpose.\n\nThere are many different options for selecting subsets of variants from a larger callset:\n\nExtract one or more samples from a callset based on either a complete sample name or a pattern match.\nSpecify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written as \"JEXL expressions\", which are documented in the article about using JEXL expressions.\nProvide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.\nSelect variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.\nThere are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.\n\nInput\nA variant call set from which to select a subset.\n\nOutput\nA new VCF file containing the selected subset of variants.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT Licence",
                "class": "CommandLineTool",
                "sbg:latestRevision": 7,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-selectvariants/9",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "SelectVariants"
                ],
                "sbg:modifiedOn": 1450911439,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "unsafe": null,
                        "validation_strictness": null,
                        "variants": [
                            {
                                "path": "bam.ext"
                            }
                        ],
                        "memory_overhead_per_job": 0,
                        "select_type_to_include": [
                            "INDEL",
                            "MIXED"
                        ]
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911431,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911432,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911433,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911434,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911435,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911436,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1450911438,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1450911439,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 7
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-selectvariants/7",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--sample_expressions",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{ \n  if($job.inputs.sample_expressions){\n\tsexpression = $job.inputs.sample_expressions\n\tfilter = []\n\tfor (i = 0; i < sexpression.length; i++) {\n      \t\tfilter.push('--sample_expressions \"', sexpression[i], '\"')\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--sample_name",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.sample_name){\n\tsname = $job.inputs.sample_name\n\tfilter = []\n\tfor (i = 0; i < sname.length; i++) {\n      \t\tfilter.push('--sample_name \"', sname[i], '\"')\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--select_expressions",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.select_expressions){\n\tsexpression = $job.inputs.select_expressions\n\tfilter = []\n\tfor (i = 0; i < sexpression.length; i++) {\n      \t\tfilter.push('--select_expressions \"', sexpression[i], '\"')\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Input VCF file.",
                        "inputBinding": {
                            "prefix": "--variant",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Variants",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-V",
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.validation_strictness){\n  \treturn 'SILENT'\n  }\n  else\n    return $job.inputs.validation_strictness\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.unsafe){\n  \treturn 'LENIENT_VCF_PROCESSING'\n  }\n  else\n    return $job.inputs.unsafe\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Select only a certain type of variants from the input file. Valid types are INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--selectTypeToInclude",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Select Type To Include",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-selectType",
                        "id": "#select_type_to_include",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "INDEL",
                                        "SNP",
                                        "MIXED",
                                        "MNP",
                                        "SYMBOLIC",
                                        "NO_VARIATION"
                                    ],
                                    "type": "enum",
                                    "name": "select_type_to_include"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION]"
                    },
                    {
                        "description": "Selects a fraction (a number between 0 and 1) of the total variants at random from the variant track.",
                        "inputBinding": {
                            "prefix": "--select_random_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Select Random Fraction",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-fraction",
                        "id": "#select_random_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "One or more criteria to use when selecting the data.",
                        "label": "Select Expressions",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-select",
                        "id": "#select_expressions",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Include genotypes from this sample. Can be specified multiple times.",
                        "label": "Sample Name",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-sn",
                        "id": "#sample_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Regular expression to select many samples from the ROD tracks provided. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--sample_expressions",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Sample Expressions",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-se",
                        "id": "#sample_expressions",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Select only variants of a particular allelicity. Valid options are ALL (default), MULTIALLELIC or BIALLELIC.",
                        "inputBinding": {
                            "prefix": "--restrictAllelesTo",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Restrict Alleles To",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-restrictAllelesTo",
                        "id": "#restrict_alleles_to",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "MULTIALLELIC",
                                    "BIALLELIC"
                                ],
                                "type": "enum",
                                "name": "restrict_alleles_to"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall.",
                        "inputBinding": {
                            "prefix": "--remove_fraction_genotypes",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Fraction Genotypes",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-fractionGenotypes",
                        "id": "#remove_fraction_genotypes",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "Re-genotype the selected samples based on their GLs (or PLs).",
                        "inputBinding": {
                            "prefix": "--regenotype",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Regenotype",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-regenotype",
                        "id": "#regenotype",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Minimum genotype QUAL score for each trio member required to accept a site as a violation.",
                        "inputBinding": {
                            "prefix": "-mvq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mvq",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "--mendelianViolationQualThreshold",
                        "id": "#mvq",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "Output mendelian violation sites only.",
                        "inputBinding": {
                            "prefix": "--mendelianViolation",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mendelian Violation",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-mv",
                        "id": "#mendelian_violation",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Indel size select.",
                        "inputBinding": {
                            "prefix": "--maxIndelSize",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Indel Size",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": null,
                        "id": "#max_indel_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2147483647"
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Store the original AC, AF, and AN values in the INFO field after selecting (using keys AC_Orig, AF_Orig, and AN_Orig).",
                        "inputBinding": {
                            "prefix": "--keepOriginalAC",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Original Ac",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-keepOriginalAC",
                        "id": "#keep_original_ac",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT",
                        "description": "Only emit sites whose ID is found in this file (one ID per line).",
                        "inputBinding": {
                            "prefix": "--keepIDs",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep IDs",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-IDs",
                        "id": "#keep_ids",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Exclude genotypes from this sample. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--exclude_sample_name",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Sample Name",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-xl_sn",
                        "id": "#exclude_sample_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Don't include loci found to be non-variant after the subsetting procedure.",
                        "inputBinding": {
                            "prefix": "--excludeNonVariants",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Non Variants",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-env",
                        "id": "#exclude_non_variants",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Don't include filtered loci in the analysis.",
                        "inputBinding": {
                            "prefix": "--excludeFiltered",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Filtered",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-ef",
                        "id": "#exclude_filtered",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Output variants that were not called in this comparison track.",
                        "inputBinding": {
                            "prefix": "--discordance",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Discordance",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-disc",
                        "id": "#discordance",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Output variants that were also called in this comparison track.",
                        "inputBinding": {
                            "prefix": "--concordance",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Concordance",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-conc",
                        "id": "#concordance",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Allow a samples other than those in the VCF to be specified on the command line. These samples will be ignored.",
                        "inputBinding": {
                            "prefix": "--ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Nonoverlapping Command Line Samples",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": null,
                        "id": "#allow_nonoverlapping_command_line_samples",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type SelectVariants --variant bam.ext --out bam.vcf --sample_expressions  --sample_name  --select_expressions",
                "sbg:toolAuthor": "Broad Institute"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_SelectVariants_1.select_variants_vcf"
                }
            ],
            "sbg:y": 930.0002192656277,
            "id": "#GATK_SelectVariants_1",
            "sbg:x": 2583.8100800173816,
            "inputs": [
                {
                    "id": "#GATK_SelectVariants_1.variants",
                    "source": [
                        "#GATK_UnifiedGenotyper.raw_vcf"
                    ]
                },
                {
                    "id": "#GATK_SelectVariants_1.validation_strictness"
                },
                {
                    "id": "#GATK_SelectVariants_1.use_original_qualities"
                },
                {
                    "id": "#GATK_SelectVariants_1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_SelectVariants_1.unsafe"
                },
                {
                    "id": "#GATK_SelectVariants_1.threads_per_job"
                },
                {
                    "id": "#GATK_SelectVariants_1.tag"
                },
                {
                    "id": "#GATK_SelectVariants_1.select_type_to_include",
                    "default": [
                        "INDEL"
                    ]
                },
                {
                    "id": "#GATK_SelectVariants_1.select_random_fraction"
                },
                {
                    "id": "#GATK_SelectVariants_1.select_expressions"
                },
                {
                    "id": "#GATK_SelectVariants_1.sample_name"
                },
                {
                    "id": "#GATK_SelectVariants_1.sample_expressions"
                },
                {
                    "id": "#GATK_SelectVariants_1.restrict_alleles_to"
                },
                {
                    "id": "#GATK_SelectVariants_1.remove_program_records"
                },
                {
                    "id": "#GATK_SelectVariants_1.remove_fraction_genotypes"
                },
                {
                    "id": "#GATK_SelectVariants_1.regenotype"
                },
                {
                    "id": "#GATK_SelectVariants_1.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_SelectVariants_1.read_group_black_list"
                },
                {
                    "id": "#GATK_SelectVariants_1.read_filter"
                },
                {
                    "id": "#GATK_SelectVariants_1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_SelectVariants_1.phone_home"
                },
                {
                    "id": "#GATK_SelectVariants_1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_SelectVariants_1.pedigree_string"
                },
                {
                    "id": "#GATK_SelectVariants_1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_SelectVariants_1.mvq"
                },
                {
                    "id": "#GATK_SelectVariants_1.mendelian_violation"
                },
                {
                    "id": "#GATK_SelectVariants_1.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_SelectVariants_1.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_SelectVariants_1.max_runtime_units"
                },
                {
                    "id": "#GATK_SelectVariants_1.max_runtime"
                },
                {
                    "id": "#GATK_SelectVariants_1.max_indel_size"
                },
                {
                    "id": "#GATK_SelectVariants_1.keep_program_records"
                },
                {
                    "id": "#GATK_SelectVariants_1.keep_original_ac"
                },
                {
                    "id": "#GATK_SelectVariants_1.keep_ids"
                },
                {
                    "id": "#GATK_SelectVariants_1.intervals_file"
                },
                {
                    "id": "#GATK_SelectVariants_1.intervals"
                },
                {
                    "id": "#GATK_SelectVariants_1.interval_set_rule"
                },
                {
                    "id": "#GATK_SelectVariants_1.interval_padding"
                },
                {
                    "id": "#GATK_SelectVariants_1.interval_merging"
                },
                {
                    "id": "#GATK_SelectVariants_1.gatk_key"
                },
                {
                    "id": "#GATK_SelectVariants_1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_SelectVariants_1.exclude_sample_name"
                },
                {
                    "id": "#GATK_SelectVariants_1.exclude_non_variants"
                },
                {
                    "id": "#GATK_SelectVariants_1.exclude_intervals"
                },
                {
                    "id": "#GATK_SelectVariants_1.exclude_filtered"
                },
                {
                    "id": "#GATK_SelectVariants_1.emit_original_quals"
                },
                {
                    "id": "#GATK_SelectVariants_1.downsampling_type"
                },
                {
                    "id": "#GATK_SelectVariants_1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_SelectVariants_1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_SelectVariants_1.discordance"
                },
                {
                    "id": "#GATK_SelectVariants_1.disable_radnomization"
                },
                {
                    "id": "#GATK_SelectVariants_1.disable_indel_quals"
                },
                {
                    "id": "#GATK_SelectVariants_1.default_base_qualities"
                },
                {
                    "id": "#GATK_SelectVariants_1.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_SelectVariants_1.concordance"
                },
                {
                    "id": "#GATK_SelectVariants_1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_SelectVariants_1.baq"
                },
                {
                    "id": "#GATK_SelectVariants_1.allow_potentailly_misencoded_quals"
                },
                {
                    "id": "#GATK_SelectVariants_1.allow_nonoverlapping_command_line_samples"
                }
            ],
            "run": {
                "y": 930.0002192656277,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantutils_SelectVariants.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "File to which variants should be written.",
                        "label": "Select Variants VCF",
                        "id": "#select_variants_vcf",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "glob": "*.vcf",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "Indel GATK SelectVariants",
                "x": 2583.8100800173816,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911431,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 7,
                "description": "Overview\n\nOften, a VCF containing many samples and/or variants will need to be subset in order to facilitate certain analyses (e.g. comparing and contrasting cases vs. controls; extracting variant or non-variant loci that meet certain requirements, displaying just a few samples in a browser like IGV, etc.). SelectVariants can be used for this purpose.\n\nThere are many different options for selecting subsets of variants from a larger callset:\n\nExtract one or more samples from a callset based on either a complete sample name or a pattern match.\nSpecify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written as \"JEXL expressions\", which are documented in the article about using JEXL expressions.\nProvide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.\nSelect variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.\nThere are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.\n\nInput\nA variant call set from which to select a subset.\n\nOutput\nA new VCF file containing the selected subset of variants.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:license": "MIT Licence",
                "class": "CommandLineTool",
                "sbg:latestRevision": 7,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-selectvariants/9",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "SelectVariants"
                ],
                "sbg:modifiedOn": 1450911439,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "unsafe": null,
                        "validation_strictness": null,
                        "variants": [
                            {
                                "path": "bam.ext"
                            }
                        ],
                        "memory_overhead_per_job": 0,
                        "select_type_to_include": [
                            "INDEL",
                            "MIXED"
                        ]
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911431,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911432,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911433,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911434,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911435,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911436,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1450911438,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1450911439,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 7
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-selectvariants/7",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--sample_expressions",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{ \n  if($job.inputs.sample_expressions){\n\tsexpression = $job.inputs.sample_expressions\n\tfilter = []\n\tfor (i = 0; i < sexpression.length; i++) {\n      \t\tfilter.push('--sample_expressions \"', sexpression[i], '\"')\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--sample_name",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.sample_name){\n\tsname = $job.inputs.sample_name\n\tfilter = []\n\tfor (i = 0; i < sname.length; i++) {\n      \t\tfilter.push('--sample_name \"', sname[i], '\"')\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--select_expressions",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.select_expressions){\n\tsexpression = $job.inputs.select_expressions\n\tfilter = []\n\tfor (i = 0; i < sexpression.length; i++) {\n      \t\tfilter.push('--select_expressions \"', sexpression[i], '\"')\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Input VCF file.",
                        "inputBinding": {
                            "prefix": "--variant",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Variants",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-V",
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.validation_strictness){\n  \treturn 'SILENT'\n  }\n  else\n    return $job.inputs.validation_strictness\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if (!$job.inputs.unsafe){\n  \treturn 'LENIENT_VCF_PROCESSING'\n  }\n  else\n    return $job.inputs.unsafe\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Select only a certain type of variants from the input file. Valid types are INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--selectTypeToInclude",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Select Type To Include",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-selectType",
                        "id": "#select_type_to_include",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "INDEL",
                                        "SNP",
                                        "MIXED",
                                        "MNP",
                                        "SYMBOLIC",
                                        "NO_VARIATION"
                                    ],
                                    "type": "enum",
                                    "name": "select_type_to_include"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION]"
                    },
                    {
                        "description": "Selects a fraction (a number between 0 and 1) of the total variants at random from the variant track.",
                        "inputBinding": {
                            "prefix": "--select_random_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Select Random Fraction",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-fraction",
                        "id": "#select_random_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "One or more criteria to use when selecting the data.",
                        "label": "Select Expressions",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-select",
                        "id": "#select_expressions",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Include genotypes from this sample. Can be specified multiple times.",
                        "label": "Sample Name",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-sn",
                        "id": "#sample_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Regular expression to select many samples from the ROD tracks provided. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--sample_expressions",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Sample Expressions",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-se",
                        "id": "#sample_expressions",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Select only variants of a particular allelicity. Valid options are ALL (default), MULTIALLELIC or BIALLELIC.",
                        "inputBinding": {
                            "prefix": "--restrictAllelesTo",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Restrict Alleles To",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-restrictAllelesTo",
                        "id": "#restrict_alleles_to",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "MULTIALLELIC",
                                    "BIALLELIC"
                                ],
                                "type": "enum",
                                "name": "restrict_alleles_to"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall.",
                        "inputBinding": {
                            "prefix": "--remove_fraction_genotypes",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Fraction Genotypes",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-fractionGenotypes",
                        "id": "#remove_fraction_genotypes",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "Re-genotype the selected samples based on their GLs (or PLs).",
                        "inputBinding": {
                            "prefix": "--regenotype",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Regenotype",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-regenotype",
                        "id": "#regenotype",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Minimum genotype QUAL score for each trio member required to accept a site as a violation.",
                        "inputBinding": {
                            "prefix": "-mvq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mvq",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "--mendelianViolationQualThreshold",
                        "id": "#mvq",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.0"
                    },
                    {
                        "description": "Output mendelian violation sites only.",
                        "inputBinding": {
                            "prefix": "--mendelianViolation",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Mendelian Violation",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-mv",
                        "id": "#mendelian_violation",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Indel size select.",
                        "inputBinding": {
                            "prefix": "--maxIndelSize",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Indel Size",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": null,
                        "id": "#max_indel_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2147483647"
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Store the original AC, AF, and AN values in the INFO field after selecting (using keys AC_Orig, AF_Orig, and AN_Orig).",
                        "inputBinding": {
                            "prefix": "--keepOriginalAC",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Original Ac",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-keepOriginalAC",
                        "id": "#keep_original_ac",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT",
                        "description": "Only emit sites whose ID is found in this file (one ID per line).",
                        "inputBinding": {
                            "prefix": "--keepIDs",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep IDs",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-IDs",
                        "id": "#keep_ids",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Exclude genotypes from this sample. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--exclude_sample_name",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Sample Name",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-xl_sn",
                        "id": "#exclude_sample_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Don't include loci found to be non-variant after the subsetting procedure.",
                        "inputBinding": {
                            "prefix": "--excludeNonVariants",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Non Variants",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-env",
                        "id": "#exclude_non_variants",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Don't include filtered loci in the analysis.",
                        "inputBinding": {
                            "prefix": "--excludeFiltered",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Filtered",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": "-ef",
                        "id": "#exclude_filtered",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Output variants that were not called in this comparison track.",
                        "inputBinding": {
                            "prefix": "--discordance",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Discordance",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-disc",
                        "id": "#discordance",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Output variants that were also called in this comparison track.",
                        "inputBinding": {
                            "prefix": "--concordance",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Concordance",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-conc",
                        "id": "#concordance",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Allow a samples other than those in the VCF to be specified on the command line. These samples will be ignored.",
                        "inputBinding": {
                            "prefix": "--ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Nonoverlapping Command Line Samples",
                        "sbg:category": "Select Variants",
                        "sbg:altPrefix": null,
                        "id": "#allow_nonoverlapping_command_line_samples",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type SelectVariants --variant bam.ext --out bam.vcf --sample_expressions  --sample_name  --select_expressions",
                "sbg:toolAuthor": "Broad Institute"
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_CombineVariants.combined_vcf"
                }
            ],
            "sbg:y": 835.9838386900087,
            "id": "#GATK_CombineVariants",
            "sbg:x": 3195.0000449154095,
            "inputs": [
                {
                    "id": "#GATK_CombineVariants.variants",
                    "source": [
                        "#GATK_VariantFiltration__1.filtered_vcf",
                        "#GATK_VariantFiltration_.filtered_vcf"
                    ]
                },
                {
                    "id": "#GATK_CombineVariants.validation_strictness"
                },
                {
                    "id": "#GATK_CombineVariants.use_original_qualities"
                },
                {
                    "id": "#GATK_CombineVariants.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_CombineVariants.unsafe"
                },
                {
                    "id": "#GATK_CombineVariants.tag"
                },
                {
                    "id": "#GATK_CombineVariants.suppress_command_line_header"
                },
                {
                    "id": "#GATK_CombineVariants.set_key"
                },
                {
                    "id": "#GATK_CombineVariants.remove_program_records"
                },
                {
                    "id": "#GATK_CombineVariants.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_CombineVariants.read_group_black_list"
                },
                {
                    "id": "#GATK_CombineVariants.read_filter"
                },
                {
                    "id": "#GATK_CombineVariants.print_complex_merges"
                },
                {
                    "id": "#GATK_CombineVariants.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_CombineVariants.phone_home"
                },
                {
                    "id": "#GATK_CombineVariants.pedigree_validation_type"
                },
                {
                    "id": "#GATK_CombineVariants.pedigree_string"
                },
                {
                    "id": "#GATK_CombineVariants.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_CombineVariants.minimum_n"
                },
                {
                    "id": "#GATK_CombineVariants.minimal_vcf"
                },
                {
                    "id": "#GATK_CombineVariants.merge_info_with_max_ac"
                },
                {
                    "id": "#GATK_CombineVariants.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_CombineVariants.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.max_runtime_units"
                },
                {
                    "id": "#GATK_CombineVariants.max_runtime"
                },
                {
                    "id": "#GATK_CombineVariants.keep_program_records"
                },
                {
                    "id": "#GATK_CombineVariants.intervals_file"
                },
                {
                    "id": "#GATK_CombineVariants.intervals"
                },
                {
                    "id": "#GATK_CombineVariants.interval_set_rule"
                },
                {
                    "id": "#GATK_CombineVariants.interval_padding"
                },
                {
                    "id": "#GATK_CombineVariants.interval_merging"
                },
                {
                    "id": "#GATK_CombineVariants.genotypemergeoption"
                },
                {
                    "id": "#GATK_CombineVariants.gatk_key"
                },
                {
                    "id": "#GATK_CombineVariants.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_CombineVariants.filteredrecordsmergetype"
                },
                {
                    "id": "#GATK_CombineVariants.filtered_are_uncalled"
                },
                {
                    "id": "#GATK_CombineVariants.exclude_intervals"
                },
                {
                    "id": "#GATK_CombineVariants.emit_original_quals"
                },
                {
                    "id": "#GATK_CombineVariants.downsampling_type"
                },
                {
                    "id": "#GATK_CombineVariants.downsample_to_fraction"
                },
                {
                    "id": "#GATK_CombineVariants.downsample_to_coverage"
                },
                {
                    "id": "#GATK_CombineVariants.disable_radnomization"
                },
                {
                    "id": "#GATK_CombineVariants.disable_indel_quals"
                },
                {
                    "id": "#GATK_CombineVariants.default_base_qualities"
                },
                {
                    "id": "#GATK_CombineVariants.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_CombineVariants.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_CombineVariants.baq"
                },
                {
                    "id": "#GATK_CombineVariants.assume_identical_samples"
                },
                {
                    "id": "#GATK_CombineVariants.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "y": 835.9838386900087,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantutils_CombineVariants.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "File to which variants should be written.",
                        "label": "Output Combined VCF",
                        "id": "#combined_vcf",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "glob": "*.vcf",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "GATK CombineVariants",
                "x": 3195.0000449154095,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "stdout": "",
                "sbg:license": "MIT License",
                "sbg:revision": 9,
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "description": "Overview\n\nCombineVariants reads in variants records from separate ROD (Reference-Ordered Data) sources and combines them into a single VCF. Any (unique) name can be used to bind your ROD and any number of sources can be input. This tool aims to fulfill two main possible use cases, reflected by the two combination options (MERGE and UNION), for merging records at the variant level (the first 8 fields of the VCF) or at the genotype level (the rest).\n\nMERGE: combines multiple variant records present at the same site in the different input sources into a single variant record in the output. If sample names overlap, then they are \"uniquified\" by default, which means a suffix is appended to make them unique. Note that in version 3.3, the automatic uniquifying was disabled (unintentionally), and required setting `-genotypeMergeOptions UNIQUIFY` manually.\nUNION: assumes that each ROD source represents the same set of samples (although this is not enforced). It uses the priority list (if provided) to emit a single record instance at every position represented in the input RODs.\nCombineVariants will emit a record for every site that was present in any of your input VCF files, and will annotate (in the set attribute in the INFO field) whether the record had a PASS or FILTER status in each input ROD . In effect, CombineVariants always produces a union of the input VCFs. However, any part of the Venn of the merged VCFs can be extracted using JEXL expressions on the set attribute using SelectVariants. If you want to extract just the records in common between two VCFs, you would first run CombineVariants on the two files to generate a single VCF and then run SelectVariants to extract the common records with `-select 'set == \"Intersection\"'`, as worked out in the detailed example in the documentation guide.\n\nInput\nTwo or more variant sets to combine.\n\nOutput\nA combined VCF.\n\nUsage examples\n\nMerge two separate callsets\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant input1.vcf \\\n   --variant input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions UNIQUIFY\n \nGet the union of calls made on the same samples\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant:foo input1.vcf \\\n   --variant:bar input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions PRIORITIZE \\\n   -priority foo,bar\n \nCaveats\n\nThis tool is not intended to manipulate GVCFS! To combine GVCF files output by HaplotypeCaller, use CombineGVCFs.\nTo join intermediate VCFs produced by running jobs in parallel by interval (e.g. by chromosome), use CatVariants.\n\nAdditional notes\n\nUsing this tool's multi-threaded parallelism capability is particularly useful when converting from VCF to BCF2, which can be time-consuming. In this case each thread spends CPU time doing the conversion, and the GATK engine is smart enough to merge the partial BCF2 blocks together efficiently. However, since this merge runs in only one thread, you can quickly reach diminishing returns with the number of parallel threads. In our hands, `-nt 4` works well but `-nt 8` tends to be be too much.\nSince GATK 2.1, when merging multiple VCF records at a site, the combined VCF record has the QUAL of the first VCF record with a non-MISSING QUAL value. The previous behavior was to take the max QUAL, which could result in strange downstream confusion.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "class": "CommandLineTool",
                "sbg:latestRevision": 9,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-combinevariants/11",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "CombineVariants"
                ],
                "sbg:modifiedOn": 1458841427,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "variants": [
                            {
                                "path": "variant.vcf",
                                "secondaryFiles": [],
                                "metadata": {
                                    "sample_id": "XY"
                                }
                            }
                        ],
                        "memory_overhead_per_job": 0
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911447,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911448,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911449,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911450,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911451,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911452,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1450911453,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1450911455,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 7
                    },
                    {
                        "sbg:modifiedOn": 1450911456,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 8
                    },
                    {
                        "sbg:modifiedOn": 1458841427,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 9
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-combinevariants/9",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  var input_file = [].concat($job.inputs.variants)[0]\n  var meta = input_file.metadata\n  if(meta){\n  \tvar sample = meta.sample_id ? meta.sample_id : 'Unknown'\n  \tvar library = meta.library_id ? meta.library_id  : 'Unknown'\n  \tvar platform_unit = meta.platform_unit_id  ? meta.platform_unit_id : 'Unknown'\n    if(sample !== 'Unknown' || library !== 'Unknown' || platform_unit !== 'Unknown'){\n    \treturn ['Sample_' + sample, 'Library_' + library, 'Platform_Unit_' + platform_unit, 'combined', 'vcf'].join('.')\n  \t}\n  }\n  var variant_name = input_file.path.replace(/^.*[\\\\\\/]/, '').split('.')\n  var variant_namebase = variant_name.slice(0, -1).join('.')\n  return variant_namebase + '.combined.vcf'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Input VCF file.",
                        "inputBinding": {
                            "prefix": "--variant",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Variants",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-V",
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "If true, do not output the header containing the command line used.",
                        "inputBinding": {
                            "prefix": "--suppressCommandLineHeader",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Suppress Command Line Header",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-suppressCommandLineHeader",
                        "id": "#suppress_command_line_header",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Key used in the INFO key=value tag emitted describing which set the combined VCF record came from.",
                        "inputBinding": {
                            "prefix": "--setKey",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Set Key",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-setKey",
                        "id": "#set_key",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "set"
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Print out interesting sites requiring complex compatibility merging.",
                        "inputBinding": {
                            "prefix": "--printComplexMerges",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Print Complex Merges",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-printComplexMerges",
                        "id": "#print_complex_merges",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Combine variants and output site only if the variant is present in at least N input files.",
                        "inputBinding": {
                            "prefix": "--minimumN",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Minimum N",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-minN",
                        "id": "#minimum_n",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "If true, then the output VCF will contain no INFO or genotype FORMAT fields.",
                        "inputBinding": {
                            "prefix": "--minimalVCF",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Minimal Vcf",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-minimalVCF",
                        "id": "#minimal_vcf",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If true, when VCF records overlap the info field is taken from the one with the max AC instead of only taking the fields which are identical across the overlapping records.",
                        "inputBinding": {
                            "prefix": "--mergeInfoWithMaxAC",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Merge Info With Max Ac",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-mergeInfoWithMaxAC",
                        "id": "#merge_info_with_max_ac",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "VCF, BED, TXT",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "description": "Determines how we should merge genotype records for samples shared across the ROD files.",
                        "inputBinding": {
                            "prefix": "--genotypemergeoption",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Genotypemergeoption",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-genotypeMergeOptions",
                        "id": "#genotypemergeoption",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNIQUIFY",
                                    "UNSORTED",
                                    "REQUIRE_UNIQUE"
                                ],
                                "type": "enum",
                                "name": "genotypemergeoption"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Determines how we should handle records seen at the same site in the VCF, but with different FILTER fields.",
                        "inputBinding": {
                            "prefix": "--filteredrecordsmergetype",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Filteredrecordsmergetype",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-filteredRecordsMergeType",
                        "id": "#filteredrecordsmergetype",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "KEEP_IF_ANY_UNFILTERED",
                                    "KEEP_IF_ALL_UNFILTERED",
                                    "KEEP_UNCONDITIONAL"
                                ],
                                "type": "enum",
                                "name": "filteredrecordsmergetype"
                            }
                        ],
                        "sbg:toolDefaultValue": "KEEP_IF_ANY_UNFILTERED"
                    },
                    {
                        "description": "If true, then filtered VCFs are treated as uncalled, so that filtered set annotations don't appear in the combined VCF.",
                        "inputBinding": {
                            "prefix": "--filteredAreUncalled",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Filtered Are Uncalled",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-filteredAreUncalled",
                        "id": "#filtered_are_uncalled",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "If true, assume input VCFs have identical sample sets and disjoint calls.",
                        "inputBinding": {
                            "prefix": "--assumeIdenticalSamples",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Assume Identical Samples",
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-assumeIdenticalSamples",
                        "id": "#assume_identical_samples",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type CombineVariants --variant variant.vcf --out Sample_XY.Library_Unknown.Platform_Unit_Unknown.combined.vcf",
                "sbg:createdOn": 1450911447
            }
        },
        {
            "outputs": [
                {
                    "id": "#SBG_Html2b64_1.b64html"
                }
            ],
            "sbg:y": 841.4286461849617,
            "id": "#SBG_Html2b64_1",
            "sbg:x": 3697.1431469820022,
            "inputs": [
                {
                    "id": "#SBG_Html2b64_1.input_file",
                    "source": [
                        "#SnpEff_adjusted.summary"
                    ]
                }
            ],
            "run": {
                "y": 841.4286461849617,
                "stdin": "",
                "requirements": [],
                "sbg:license": "Apache License 2.0",
                "successCodes": [],
                "label": "SBG Html2b64",
                "x": 3697.1431469820022,
                "sbg:categories": [
                    "Converters",
                    "Plotting-and-Rendering"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911294,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 2,
                "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
                "class": "CommandLineTool",
                "outputs": [
                    {
                        "sbg:fileTypes": "HTML, B64HTML",
                        "description": "Output file, b64html.",
                        "label": "B64html",
                        "id": "#b64html",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_file",
                            "glob": "*b64html",
                            "sbg:metadata": {}
                        }
                    }
                ],
                "sbg:latestRevision": 2,
                "sbg:id": "sevenbridges/public-apps/sbg-html2b64/3",
                "sbg:toolkit": "SBGTools",
                "sbg:modifiedOn": 1459963571,
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "input_file": {
                            "path": "input_file.ext",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1459963571,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/sbgtools-demo/sbg-html2b64/2",
                "baseCommand": [
                    "python",
                    "/opt/sbg_html_to_b64.py"
                ],
                "sbg:toolkitVersion": "1.0",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [],
                "sbg:modifiedBy": "bix-demo",
                "hints": [
                    {
                        "dockerImageId": "8c35d2a2d8d1",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "ZIP",
                        "description": "Compressed archive.",
                        "inputBinding": {
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input file",
                        "sbg:category": "File input.",
                        "id": "#input_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    }
                ],
                "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
                "sbg:toolAuthor": "Seven Bridges"
            }
        },
        {
            "outputs": [
                {
                    "id": "#SnpEff_adjusted.summary_text"
                },
                {
                    "id": "#SnpEff_adjusted.summary"
                },
                {
                    "id": "#SnpEff_adjusted.annotated"
                }
            ],
            "sbg:y": 843.3334087265883,
            "id": "#SnpEff_adjusted",
            "sbg:x": 3490.000464465898,
            "inputs": [
                {
                    "id": "#SnpEff_adjusted.variants_file",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#SnpEff_adjusted.updownstreamlen"
                },
                {
                    "id": "#SnpEff_adjusted.stats"
                },
                {
                    "id": "#SnpEff_adjusted.splicesitesize"
                },
                {
                    "id": "#SnpEff_adjusted.snp"
                },
                {
                    "id": "#SnpEff_adjusted.sequenceontology"
                },
                {
                    "id": "#SnpEff_adjusted.reg"
                },
                {
                    "id": "#SnpEff_adjusted.quiet"
                },
                {
                    "id": "#SnpEff_adjusted.output_format",
                    "default": "vcf"
                },
                {
                    "id": "#SnpEff_adjusted.outoffset"
                },
                {
                    "id": "#SnpEff_adjusted.onlytr"
                },
                {
                    "id": "#SnpEff_adjusted.onlyreg"
                },
                {
                    "id": "#SnpEff_adjusted.nostats"
                },
                {
                    "id": "#SnpEff_adjusted.nolog"
                },
                {
                    "id": "#SnpEff_adjusted.no_utr"
                },
                {
                    "id": "#SnpEff_adjusted.no_upstream"
                },
                {
                    "id": "#SnpEff_adjusted.no_intron"
                },
                {
                    "id": "#SnpEff_adjusted.no_intergenic"
                },
                {
                    "id": "#SnpEff_adjusted.no_downstream"
                },
                {
                    "id": "#SnpEff_adjusted.nmp"
                },
                {
                    "id": "#SnpEff_adjusted.nextprot"
                },
                {
                    "id": "#SnpEff_adjusted.multi_threads"
                },
                {
                    "id": "#SnpEff_adjusted.motif"
                },
                {
                    "id": "#SnpEff_adjusted.minquality"
                },
                {
                    "id": "#SnpEff_adjusted.mincoverage"
                },
                {
                    "id": "#SnpEff_adjusted.mem_mb",
                    "default": 4000
                },
                {
                    "id": "#SnpEff_adjusted.maxquality"
                },
                {
                    "id": "#SnpEff_adjusted.maxcoverage"
                },
                {
                    "id": "#SnpEff_adjusted.interval"
                },
                {
                    "id": "#SnpEff_adjusted.insertions_only"
                },
                {
                    "id": "#SnpEff_adjusted.input_format"
                },
                {
                    "id": "#SnpEff_adjusted.inoffset"
                },
                {
                    "id": "#SnpEff_adjusted.homozygous_only"
                },
                {
                    "id": "#SnpEff_adjusted.heterozygous_only"
                },
                {
                    "id": "#SnpEff_adjusted.geneid"
                },
                {
                    "id": "#SnpEff_adjusted.filterinterval"
                },
                {
                    "id": "#SnpEff_adjusted.filelist"
                },
                {
                    "id": "#SnpEff_adjusted.dont_show_effect_type"
                },
                {
                    "id": "#SnpEff_adjusted.deletions_only"
                },
                {
                    "id": "#SnpEff_adjusted.datadir"
                },
                {
                    "id": "#SnpEff_adjusted.database",
                    "source": [
                        "#SnpEff_Database"
                    ]
                },
                {
                    "id": "#SnpEff_adjusted.csvstats"
                },
                {
                    "id": "#SnpEff_adjusted.config"
                },
                {
                    "id": "#SnpEff_adjusted.chr"
                },
                {
                    "id": "#SnpEff_adjusted.canon"
                },
                {
                    "id": "#SnpEff_adjusted.cancersamples"
                },
                {
                    "id": "#SnpEff_adjusted.cancer"
                },
                {
                    "id": "#SnpEff_adjusted.around"
                },
                {
                    "id": "#SnpEff_adjusted.add_oicr_tag"
                },
                {
                    "id": "#SnpEff_adjusted.add_lof_tag"
                },
                {
                    "id": "#SnpEff_adjusted.add_hgvs_anno"
                }
            ],
            "run": {
                "y": 843.3334087265883,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "http://snpeff.sourceforge.net/index.html",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/pcingola/SnpEff",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://snpeff.sourceforge.net/SnpEff_manual.html",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/snpeff/files/snpEff_v3_6_core.zip/download",
                        "label": "Download"
                    },
                    {
                        "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf",
                        "label": "Publication"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "TXT",
                        "description": "SnpEff Summary in text format.",
                        "label": "Summary",
                        "id": "#summary_text",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants_file",
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\t\n  filename = $job.inputs.variants_file.path\n  namebase = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  return namebase.concat(\".snpEff_summary.genes.txt\")\n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {}
                        }
                    },
                    {
                        "sbg:fileTypes": "HTML, CSV",
                        "description": "SnpEff summary file in HTML or CSV file format.",
                        "label": "Summary file",
                        "id": "#summary",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants_file",
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  filename = $job.inputs.variants_file.path\n  namebase = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.csv_stats){\n    return namebase.concat(\".snpEff_summary.csv\")\n  }else{\n    return namebase.concat(\".snpEff_summary.zip\")\n  }\n}",
                                "class": "Expression"
                            }
                        }
                    },
                    {
                        "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
                        "description": "SnpEff Annotated file.",
                        "label": "SnpEff Annotated file",
                        "id": "#annotated",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants_file",
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}",
                                "class": "Expression"
                            },
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "SnpEff",
                "label": "SnpEff adjusted",
                "x": 3490.000464465898,
                "sbg:categories": [
                    "Annotation",
                    "VCF-Processing"
                ],
                "stdout": "",
                "sbg:license": "GNU Lesser General Public License v3.0 only",
                "sbg:revision": 2,
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
                "description": "SnpEff Adjusted is a variant annotation and effect-prediction tool. It annotates and predicts the effects of variants on genes, such as amino acid changes.\n\nTypical usage assumes the user chooses inputs that are predicted variants (SNPs, insertions, deletions, and MNPs). This input file is usually the result of a sequencing experiment, and it is usually in variant call format (VCF). SnpEff analyzes the input variants and, in the process, it annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes). The output file can be in several file formats. The most common format is VCF.\n\nThis is an adjusted version of the tool that primarily handles config file editing. There is also a command line option to control the amount of RAM in MB [-Xmx%m] for java, which is a custom parameter.",
                "class": "CommandLineTool",
                "sbg:latestRevision": 2,
                "sbg:id": "sevenbridges/public-apps/snpeff-adjusted-v3-6/3",
                "baseCommand": [
                    "python",
                    "/opt/snpEff_3.6/snpEff_adjusted.py"
                ],
                "sbg:modifiedOn": 1459963437,
                "sbg:project": "bix-demo/snpeff-v3-6-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "homozygous_only": false,
                        "csvstats": true,
                        "variants_file": {
                            "path": "/asdas/fa/sfs/adf/sdfas.dfas.dfas.varinats_file.vcf",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        },
                        "deletions_only": true,
                        "nostats": false,
                        "heterozygous_only": false,
                        "input_format": "vcf",
                        "database": "database",
                        "mem_mb": null,
                        "insertions_only": true,
                        "output_format": "vcf",
                        "filelist": false,
                        "stats": "stats.txt"
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911478,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911479,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1459963437,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/snpeff-v3-6-demo/snpeff-adjusted-v3-6/2",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "3.6",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "separate": false,
                        "position": 100,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  var file_path = [].concat($job.inputs.variants_file)[0].path\n  filename = file_path.split('/').slice(-1)[0]\n  filebase = filename.split('.').slice(0,-1).join('.')\n  \n  html_filename = filebase + '.snpEff_summary.html'\n  zip_filename = filebase + '.snpEff_summary.zip'\n\nreturn '; zip ' + zip_filename + ' ' + html_filename}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "aae3dcb89b53",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/snpeff-adjusted:3.6--2"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if ($job.inputs.mem_mb)\n  {\n    return $job.inputs.mem_mb\n  }\n  \n  else\n  {\n    return 2048\n  }\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
                        "description": "Input variants file.",
                        "inputBinding": {
                            "prefix": "--variants",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "position": -3
                        },
                        "label": "Input variants file",
                        "sbg:category": "File type inputs",
                        "id": "#variants_file",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Set upstream downstream interval length (in bases)",
                        "inputBinding": {
                            "prefix": "--upDownStreamLen",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set upstream downstream interval length (in bases)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-ud",
                        "id": "#updownstreamlen",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Name of stats file (summary).",
                        "inputBinding": {
                            "prefix": "--stats",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Name of stats file (summary)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-s",
                        "id": "#stats",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "snpEff_summary.html"
                    },
                    {
                        "description": "Set size for splice sites (donor and acceptor) in bases.",
                        "inputBinding": {
                            "prefix": "--spliceSiteSize",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Set size for splice sites (donor and acceptor) in bases",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-ss",
                        "id": "#splicesitesize",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2"
                    },
                    {
                        "description": "Only SNPs (single nucleotide polymorphisms)",
                        "inputBinding": {
                            "prefix": "--snp",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Only SNPs (single nucleotide polymorphisms)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#snp",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Use Sequence Ontology terms.",
                        "inputBinding": {
                            "prefix": "--sequenceOntology",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use Sequence Ontology terms",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#sequenceontology",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Regulation track to use (this option can be used add several times).",
                        "inputBinding": {
                            "prefix": "--reg",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "position": 3
                        },
                        "label": "Regulation track to use (this option can be used add several times)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#reg",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Quiet mode (do not show any messages or errors)",
                        "inputBinding": {
                            "prefix": "--quiet",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Quiet mode (do not show any messages or errors)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#quiet",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
                        "inputBinding": {
                            "prefix": "--output_format",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ouput format",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#output_format",
                        "type": [
                            {
                                "symbols": [
                                    "txt",
                                    "vcf",
                                    "gatk",
                                    "bed",
                                    "bedAnn"
                                ],
                                "type": "enum",
                                "name": "output_format"
                            }
                        ],
                        "sbg:toolDefaultValue": "vcf"
                    },
                    {
                        "description": "Offset output by a number of bases. E.g. '-outOffset 1' for one-based TXT output files",
                        "inputBinding": {
                            "prefix": "--outOffset",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Offset output by a number of bases",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-of",
                        "id": "#outoffset",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "sbg:fileTypes": "TEXT",
                        "description": "Only use the transcripts in this file. Format: One transcript ID per line.",
                        "inputBinding": {
                            "prefix": "--onlyTr",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "sbg:toolDefaultValue": null,
                        "label": "Only use the transcripts in this file",
                        "sbg:category": "File type inputs",
                        "sbg:altPrefix": "",
                        "id": "#onlytr",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Only use regulation tracks.",
                        "inputBinding": {
                            "prefix": "--onlyReg",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Only use regulation tracks",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#onlyreg",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not create stats (summary) file",
                        "inputBinding": {
                            "prefix": "--noStats",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not create stats (summary) file",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#nostats",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not report usage statistics to server",
                        "inputBinding": {
                            "prefix": "--noLog",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not report usage statistics to server",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#nolog",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
                        "inputBinding": {
                            "prefix": "--no-utr",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#no_utr",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show UPSTREAM changes",
                        "inputBinding": {
                            "prefix": "--no-upstream",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not show UPSTREAM changes",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#no_upstream",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show INTRON changes",
                        "inputBinding": {
                            "prefix": "--no-intron",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not show INTRON changes",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#no_intron",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show INTERGENIC changes",
                        "inputBinding": {
                            "prefix": "--no-intergenic",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not show INTERGENIC changes",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#no_intergenic",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show DOWNSTREAM changes",
                        "inputBinding": {
                            "prefix": "--no-downstream",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not show DOWNSTREAM changes",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#no_downstream",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Only MNPs (multiple nucleotide polymorphisms)",
                        "inputBinding": {
                            "prefix": "--nmp",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Only MNPs (multiple nucleotide polymorphisms)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#nmp",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Annotate using NextProt (requires NextProt database).",
                        "inputBinding": {
                            "prefix": "--nextProt",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Annotate using NextProt (requires NextProt database)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#nextprot",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Use multiple threads (implies '-noStats').",
                        "inputBinding": {
                            "prefix": "-t",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use multiple threads (implies '-noStats')",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#multi_threads",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "off"
                    },
                    {
                        "description": "Annotate using motifs (requires Motif database).",
                        "inputBinding": {
                            "prefix": "--motif",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Annotate using motifs (requires Motif database)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#motif",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Filter out variants with quality lower than X",
                        "inputBinding": {
                            "prefix": "--minQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filter out variants with quality lower than X",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-minQ",
                        "id": "#minquality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Filter out variants with coverage lower than X",
                        "inputBinding": {
                            "prefix": "--minCoverage",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filter out variants with coverage lower than X",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-minC",
                        "id": "#mincoverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "RAM requirement for the java process execution.",
                        "inputBinding": {
                            "prefix": "--mem_mb",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "position": -5,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  if ($job.inputs.mem_mb)\n  {\n    return $job.inputs.mem_mb\n  }\n  \n  else\n  {\n    return '2048'\n  }\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Java Xmx%m requirement",
                        "sbg:category": "Other input types",
                        "id": "#mem_mb",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Filter out variants with quality higher than X",
                        "inputBinding": {
                            "prefix": "--maxQuality",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filter out variants with quality higher than X",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-maxQ",
                        "id": "#maxquality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Filter out variants with coverage higher than X",
                        "inputBinding": {
                            "prefix": "--maxCoverage",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Filter out variants with coverage higher than X",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-maxC",
                        "id": "#maxcoverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
                        "inputBinding": {
                            "prefix": "--interval",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#interval",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Analyze insertions only",
                        "inputBinding": {
                            "prefix": "--ins",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Analyze insertions only",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#insertions_only",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
                        "inputBinding": {
                            "prefix": "--input_format",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input format",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#input_format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "vcf",
                                    " txt",
                                    " pileup",
                                    " bed"
                                ],
                                "type": "enum",
                                "name": "input_format"
                            }
                        ],
                        "sbg:toolDefaultValue": "vcf"
                    },
                    {
                        "description": "Offset input by a number of bases. E.g. '-inOffset 1' for one-based TXT input files",
                        "inputBinding": {
                            "prefix": "--inOffset",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Offset input by a number of bases",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-if",
                        "id": "#inoffset",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Analyze homozygous variants only",
                        "inputBinding": {
                            "prefix": "--hom",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Analyze homozygous variants only",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#homozygous_only",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Analyze heterozygous variants only",
                        "inputBinding": {
                            "prefix": "--het",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Analyze heterozygous variants only",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#heterozygous_only",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Use gene ID instead of gene name (VCF output).",
                        "inputBinding": {
                            "prefix": "--geneId",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use gene ID instead of gene name (VCF output)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#geneid",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
                        "inputBinding": {
                            "prefix": "--filterInterval",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "position": 1
                        },
                        "sbg:toolDefaultValue": null,
                        "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
                        "sbg:category": "File type inputs",
                        "sbg:altPrefix": "-fi",
                        "id": "#filterinterval",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "Input actually contains a list of files to process.",
                        "inputBinding": {
                            "prefix": "--fileList",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input actually contains a list of files to process",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#filelist",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show 'EffectType'. This option can be used several times.",
                        "inputBinding": {
                            "prefix": "--no",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Do not show 'EffectType'",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#dont_show_effect_type",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Analyze deletions only",
                        "inputBinding": {
                            "prefix": "--del",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Analyze deletions only",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#deletions_only",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Override data_dir parameter from config file.",
                        "inputBinding": {
                            "prefix": "--dataDir",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Override data_dir parameter from config file",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#datadir",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "sbg:fileTypes": "ZIP",
                        "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
                        "inputBinding": {
                            "prefix": "--database",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "position": -4
                        },
                        "label": "SnpEff database file",
                        "sbg:category": "File type inputs",
                        "id": "#database",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Create CSV summary file instead of HTML",
                        "inputBinding": {
                            "prefix": "--csvStats",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Create CSV summary file instead of HTML",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#csvstats",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Specify config file",
                        "inputBinding": {
                            "prefix": "--config",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Specify config file",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-c",
                        "id": "#config",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Prepend 'string' to chromosome name (e.g. 'chr1' instead of '1'). Only on TXT output.",
                        "inputBinding": {
                            "prefix": "--chr",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Prepend 'string' to chromosome name (e.g. 'chr1' instead of '1')",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#chr",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": null
                    },
                    {
                        "description": "Only use canonical transcripts.",
                        "inputBinding": {
                            "prefix": "--canon",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Only use canonical transcripts",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#canon",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:fileTypes": "File type inputs",
                        "description": "Two column TXT file defining 'oringinal \\t derived' samples.",
                        "inputBinding": {
                            "prefix": "--cancerSamples",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "sbg:toolDefaultValue": null,
                        "label": "Two column TXT file defining 'oringinal \\t derived' samples",
                        "sbg:category": "File type inputs",
                        "sbg:altPrefix": "",
                        "id": "#cancersamples",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Perform 'cancer' comparisons (Somatic vs Germline).",
                        "inputBinding": {
                            "prefix": "--cancer",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Perform 'cancer' comparisons (Somatic vs Germline)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#cancer",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Show N codons and amino acids around change (only in coding regions).",
                        "inputBinding": {
                            "prefix": "--around",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Show N codons and amino acids around change (only in coding regions)",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#around",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Add OICR tag in VCF file.",
                        "inputBinding": {
                            "prefix": "--oicr",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Add OICR tag in VCF file",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#add_oicr_tag",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.",
                        "inputBinding": {
                            "prefix": "--lof",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#add_lof_tag",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Use HGVS annotations for amino acid sub-field.",
                        "inputBinding": {
                            "prefix": "--hgvs",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use HGVS annotations for amino acid sub-field",
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "",
                        "id": "#add_hgvs_anno",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:cmdPreview": "python /opt/snpEff_3.6/snpEff_adjusted.py --variants /asdas/fa/sfs/adf/sdfas.dfas.dfas.varinats_file.vcf --output_format vcf ; zip sdfas.dfas.dfas.varinats_file.snpEff_summary.zip sdfas.dfas.dfas.varinats_file.snpEff_summary.html",
                "sbg:createdOn": 1450911478
            }
        },
        {
            "outputs": [
                {
                    "id": "#SBG_Html2b64.b64html"
                }
            ],
            "scatter": "#SBG_Html2b64.input_file",
            "sbg:y": 890.9159697790654,
            "id": "#SBG_Html2b64",
            "sbg:x": -63.04029333751566,
            "inputs": [
                {
                    "id": "#SBG_Html2b64.input_file",
                    "source": [
                        "#FastQC.report_zip"
                    ]
                }
            ],
            "run": {
                "y": 890.9159697790654,
                "stdin": "",
                "requirements": [],
                "sbg:license": "Apache License 2.0",
                "successCodes": [],
                "label": "SBG Html2b64",
                "x": -63.04029333751566,
                "sbg:categories": [
                    "Converters",
                    "Plotting-and-Rendering"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911294,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 2,
                "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
                "class": "CommandLineTool",
                "outputs": [
                    {
                        "sbg:fileTypes": "HTML, B64HTML",
                        "description": "Output file, b64html.",
                        "label": "B64html",
                        "id": "#b64html",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_file",
                            "glob": "*b64html",
                            "sbg:metadata": {}
                        }
                    }
                ],
                "sbg:latestRevision": 2,
                "sbg:id": "sevenbridges/public-apps/sbg-html2b64/3",
                "sbg:toolkit": "SBGTools",
                "sbg:modifiedOn": 1459963571,
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "input_file": {
                            "path": "input_file.ext",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1459963571,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/sbgtools-demo/sbg-html2b64/2",
                "baseCommand": [
                    "python",
                    "/opt/sbg_html_to_b64.py"
                ],
                "sbg:toolkitVersion": "1.0",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [],
                "sbg:modifiedBy": "bix-demo",
                "hints": [
                    {
                        "dockerImageId": "8c35d2a2d8d1",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "ZIP",
                        "description": "Compressed archive.",
                        "inputBinding": {
                            "prefix": "--input",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Input file",
                        "sbg:category": "File input.",
                        "id": "#input_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    }
                ],
                "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
                "sbg:toolAuthor": "Seven Bridges"
            }
        },
        {
            "outputs": [
                {
                    "id": "#FastQC.report_zip"
                }
            ],
            "scatter": "#FastQC.input_fastq",
            "sbg:y": 890.6411112271846,
            "id": "#FastQC",
            "sbg:x": -247.05128826239175,
            "inputs": [
                {
                    "id": "#FastQC.threads"
                },
                {
                    "id": "#FastQC.quiet"
                },
                {
                    "id": "#FastQC.nogroup"
                },
                {
                    "id": "#FastQC.nano"
                },
                {
                    "id": "#FastQC.limits_file"
                },
                {
                    "id": "#FastQC.kmers"
                },
                {
                    "id": "#FastQC.input_fastq",
                    "source": [
                        "#FASTQ"
                    ]
                },
                {
                    "id": "#FastQC.format"
                },
                {
                    "id": "#FastQC.contaminants_file"
                },
                {
                    "id": "#FastQC.casava"
                },
                {
                    "id": "#FastQC.adapters_file"
                }
            ],
            "run": {
                "y": 890.6411112271846,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
                        "label": "Homepage"
                    },
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip",
                        "label": "Download"
                    },
                    {
                        "id": "",
                        "label": "Publication"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "ZIP",
                        "description": "Zip archive of the report",
                        "label": "Report zip",
                        "id": "#report_zip",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_fastq",
                            "glob": "*_fastqc.zip",
                            "sbg:metadata": {
                                "__inherit__": "input_fastq"
                            }
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "FastQC",
                "label": "FastQC",
                "x": -247.05128826239175,
                "sbg:categories": [
                    "FASTQ-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "stdout": "",
                "sbg:license": "GNU General Public License v3.0 only",
                "sbg:revision": 3,
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Babraham Institute",
                "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data.\n\nFastQC is a tool which takes a FastQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.",
                "class": "CommandLineTool",
                "sbg:latestRevision": 3,
                "sbg:id": "sevenbridges/public-apps/fastqc-0-11-4/6",
                "baseCommand": [
                    "fastqc"
                ],
                "sbg:modifiedOn": 1459870965,
                "sbg:project": "bix-demo/fastqc-0-11-4-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "input_fastq": {
                            "path": "/root/dir/example.fastq"
                        },
                        "threads": 0,
                        "quiet": true
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911593,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911593,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911594,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1459870965,
                        "sbg:modifiedBy": "mladenlSBG",
                        "sbg:revision": 3
                    }
                ],
                "sbg:contributors": [
                    "bix-demo",
                    "mladenlSBG"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/fastqc-0-11-4-demo/fastqc-0-11-4/3",
                "sbg:modifiedBy": "mladenlSBG",
                "sbg:toolkitVersion": "0.11.4",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "prefix": "",
                        "separate": true,
                        "order": 1,
                        "valueFrom": "--noextract"
                    },
                    {
                        "prefix": "--outdir",
                        "separate": true,
                        "order": 3,
                        "valueFrom": "."
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "759c4c8fbafd",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\tif ($job.inputs.threads)\n{\n  return $job.inputs.threads\n}\n else\n {\n   return 1\n }\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 2048,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
                        "inputBinding": {
                            "prefix": "--threads",
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "valueFrom": {
                                "engine": "#cwl-js-engine",
                                "script": "{\tif ($job.inputs.threads)\n\t\t{\n  \t\t\treturn $job.inputs.threads\n\t\t}\n\telse\n \t\t{\n   \t\t\treturn 1\n \t\t}\n}",
                                "class": "Expression"
                            }
                        },
                        "label": "Threads",
                        "sbg:altPrefix": "-t",
                        "id": "#threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Supress all progress messages on stdout and only report errors.",
                        "inputBinding": {
                            "prefix": "--quiet",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Quiet",
                        "sbg:altPrefix": "-q",
                        "id": "#quiet",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned!",
                        "inputBinding": {
                            "prefix": "--nogroup",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Nogroup",
                        "sbg:category": "",
                        "id": "#nogroup",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
                        "inputBinding": {
                            "prefix": "--nano",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Nano",
                        "sbg:category": "",
                        "id": "#nano",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
                        "inputBinding": {
                            "prefix": "--limits",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Limits",
                        "sbg:category": "",
                        "sbg:altPrefix": "-l",
                        "id": "#limits_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
                        "inputBinding": {
                            "prefix": "--kmers",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Kmers",
                        "sbg:category": "",
                        "sbg:altPrefix": "-f",
                        "id": "#kmers",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "7"
                    },
                    {
                        "description": "Input file.",
                        "inputBinding": {
                            "separate": true,
                            "sbg:cmdInclude": true,
                            "position": 100
                        },
                        "label": "Input file",
                        "sbg:category": "",
                        "id": "#input_fastq",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
                        "inputBinding": {
                            "prefix": "--format",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Format",
                        "sbg:category": "",
                        "sbg:altPrefix": "-f",
                        "id": "#format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "bam",
                                    "sam",
                                    "bam_mapped",
                                    "sam_mapped",
                                    "fastq"
                                ],
                                "type": "enum",
                                "name": "format"
                            }
                        ]
                    },
                    {
                        "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "inputBinding": {
                            "prefix": "--contaminants",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Contaminants",
                        "sbg:category": "",
                        "sbg:altPrefix": "-c",
                        "id": "#contaminants_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
                        "inputBinding": {
                            "prefix": "--casava",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "label": "Casava",
                        "sbg:category": "",
                        "id": "#casava",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "inputBinding": {
                            "prefix": "--adapters",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Adapters",
                        "sbg:category": "",
                        "sbg:altPrefix": "-a",
                        "id": "#adapters_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    }
                ],
                "sbg:cmdPreview": "fastqc  --noextract --outdir .  /root/dir/example.fastq",
                "sbg:createdOn": 1450911593
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_IndelRealigner.realigned_bam_file"
                }
            ],
            "sbg:y": 921.4287737048501,
            "id": "#GATK_IndelRealigner",
            "sbg:x": 1078.5716774999,
            "inputs": [
                {
                    "id": "#GATK_IndelRealigner.validation_strictness"
                },
                {
                    "id": "#GATK_IndelRealigner.use_original_qualities"
                },
                {
                    "id": "#GATK_IndelRealigner.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_IndelRealigner.unsafe"
                },
                {
                    "id": "#GATK_IndelRealigner.target_intervals",
                    "source": [
                        "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.tag"
                },
                {
                    "id": "#GATK_IndelRealigner.remove_program_records"
                },
                {
                    "id": "#GATK_IndelRealigner.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.reads",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.read_group_black_list"
                },
                {
                    "id": "#GATK_IndelRealigner.read_filter"
                },
                {
                    "id": "#GATK_IndelRealigner.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_IndelRealigner.phone_home"
                },
                {
                    "id": "#GATK_IndelRealigner.pedigree_validation_type"
                },
                {
                    "id": "#GATK_IndelRealigner.pedigree_string"
                },
                {
                    "id": "#GATK_IndelRealigner.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_IndelRealigner.no_original_alignment_tags"
                },
                {
                    "id": "#GATK_IndelRealigner.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_IndelRealigner.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_IndelRealigner.max_runtime_units"
                },
                {
                    "id": "#GATK_IndelRealigner.max_runtime"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_in_memory"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_for_realignment"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_for_consensuses"
                },
                {
                    "id": "#GATK_IndelRealigner.max_positional_move_allowed"
                },
                {
                    "id": "#GATK_IndelRealigner.max_isize_for_movement"
                },
                {
                    "id": "#GATK_IndelRealigner.max_consensuses"
                },
                {
                    "id": "#GATK_IndelRealigner.lod_threshold_for_cleaning"
                },
                {
                    "id": "#GATK_IndelRealigner.known_alleles",
                    "source": [
                        "#Known_Indels"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.keep_program_records"
                },
                {
                    "id": "#GATK_IndelRealigner.intervals_file",
                    "source": [
                        "#Target_BED"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.intervals"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_set_rule"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_padding"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_merging"
                },
                {
                    "id": "#GATK_IndelRealigner.gatk_key"
                },
                {
                    "id": "#GATK_IndelRealigner.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.exclude_intervals"
                },
                {
                    "id": "#GATK_IndelRealigner.entropy_threshold"
                },
                {
                    "id": "#GATK_IndelRealigner.emit_original_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.downsampling_type"
                },
                {
                    "id": "#GATK_IndelRealigner.downsample_to_fraction"
                },
                {
                    "id": "#GATK_IndelRealigner.downsample_to_coverage"
                },
                {
                    "id": "#GATK_IndelRealigner.disable_radnomization"
                },
                {
                    "id": "#GATK_IndelRealigner.disable_indel_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.default_base_qualities"
                },
                {
                    "id": "#GATK_IndelRealigner.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_IndelRealigner.consensus_determination_model"
                },
                {
                    "id": "#GATK_IndelRealigner.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_IndelRealigner.baq"
                },
                {
                    "id": "#GATK_IndelRealigner.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "y": 921.4287737048501,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BAM",
                        "description": "Realigned BAM.",
                        "label": "Realigned BAM",
                        "id": "#realigned_bam_file",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "glob": "*.realigned.bam",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "GATK IndelRealigner",
                "x": 1078.5716774999,
                "sbg:categories": [
                    "Alignment"
                ],
                "stdout": "",
                "sbg:license": "MIT License",
                "sbg:revision": 6,
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such at mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this walker uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists. Following local realignment, the GATK tool Unified Genotyper can be used to sensitively and specifically identify indels.\n\nThere are 2 steps to the realignment process:\n\n1. Determining (small) suspicious intervals which are likely in need of realignment (see the RealignerTargetCreator tool)\n2. Running the realigner over those intervals (IndelRealigner)\nFor more details, see the indel realignment method documentation.\n\nInput\nOne or more aligned BAM files and optionally one or more lists of known indels.\n\nOutput\nA realigned version of your input BAM file(s).\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T IndelRealigner \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -targetIntervals intervalListFromRTC.intervals \\\n   -o realignedBam.bam\n \nCaveats\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "class": "CommandLineTool",
                "sbg:latestRevision": 6,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-indelrealigner/10",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "IndelRealigner"
                ],
                "sbg:modifiedOn": 1460993599,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 3048,
                        "cpu": 1
                    },
                    "inputs": {
                        "intervals": "",
                        "reads": [
                            {
                                "path": "/folder/input.bam"
                            }
                        ],
                        "memory_overhead_per_job": 1000,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "memory_per_job": null,
                        "known_alleles": [
                            {
                                "path": "/folder/indels.vcf"
                            }
                        ],
                        "target_intervals": {
                            "path": "intervalListFromRTC.intervals",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911378,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911378,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911379,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911380,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911381,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911382,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1460993599,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-indelrealigner/6",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.target_intervals)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.realigned.bam'\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "sbg:fileTypes": "TXT,INTERVALS",
                        "description": "Intervals file output from RealignerTargetCreator.",
                        "inputBinding": {
                            "prefix": "--targetIntervals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Target Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-targetIntervals",
                        "id": "#target_intervals",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "description": "Read sequences in BAM format.",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read sequences",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-I",
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Don't output the original cigar or alignment start tags for each realigned read in the output bam.",
                        "inputBinding": {
                            "prefix": "--noOriginalAlignmentTags",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "No Original Alignment Tags",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-noTags",
                        "id": "#no_original_alignment_tags",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Max reads allowed to be kept in memory at a time by the SAMFileWriter.",
                        "inputBinding": {
                            "prefix": "--maxReadsInMemory",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Reads In Memory",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxInMemory",
                        "id": "#max_reads_in_memory",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "150000"
                    },
                    {
                        "description": "Max reads allowed at an interval for realignment.",
                        "inputBinding": {
                            "prefix": "--maxReadsForRealignment",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Reads For Realignment",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxReads",
                        "id": "#max_reads_for_realignment",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "20000"
                    },
                    {
                        "description": "Max reads used for finding the alternate consensuses (necessary to improve performance in deep coverage).",
                        "inputBinding": {
                            "prefix": "--maxReadsForConsensuses",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Reads For Consensuses",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-greedy",
                        "id": "#max_reads_for_consensuses",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "120"
                    },
                    {
                        "description": "Maximum positional move in basepairs that a read can be adjusted during realignment.",
                        "inputBinding": {
                            "prefix": "--maxPositionalMoveAllowed",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Positional Move Allowed",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxPosMove",
                        "id": "#max_positional_move_allowed",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "200"
                    },
                    {
                        "description": "Maximum insert size of read pairs that we attempt to realign.",
                        "inputBinding": {
                            "prefix": "--maxIsizeForMovement",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Isize For Movement",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxIsize",
                        "id": "#max_isize_for_movement",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "3000"
                    },
                    {
                        "description": "Max alternate consensuses to try (necessary to improve performance in deep coverage).",
                        "inputBinding": {
                            "prefix": "--maxConsensuses",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Consensuses",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": null,
                        "id": "#max_consensuses",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "30"
                    },
                    {
                        "description": "LOD threshold above which the cleaner will clean.",
                        "inputBinding": {
                            "prefix": "--LODThresholdForCleaning",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Lod Threshold For Cleaning",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-LOD",
                        "id": "#lod_threshold_for_cleaning",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "5.0"
                    },
                    {
                        "sbg:fileTypes": "VCF",
                        "description": "Input VCF file(s) with known indels.",
                        "inputBinding": {
                            "prefix": "--knownAlleles",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Known Alleles",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-known",
                        "id": "#known_alleles",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-L",
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "sample"
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Percentage of mismatches at a locus to be considered having high entropy.",
                        "inputBinding": {
                            "prefix": "--entropyThreshold",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Entropy Threshold",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-entropy",
                        "id": "#entropy_threshold",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.15"
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "Determines how to compute the possible alternate consenses.",
                        "inputBinding": {
                            "prefix": "--consensusDeterminationModel",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Consensus Determination Model",
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-model",
                        "id": "#consensus_determination_model",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "KNOWNS_ONLY",
                                    "USE_READS",
                                    "USE_SW"
                                ],
                                "type": "enum",
                                "name": "consensus_determination_model"
                            }
                        ],
                        "sbg:toolDefaultValue": "USE_READS"
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type IndelRealigner --reference_sequence /folder/reference.fasta --input_file /folder/input.bam --targetIntervals intervalListFromRTC.intervals --out intervalListFromRTC.realigned.bam",
                "sbg:createdOn": 1450911378
            }
        },
        {
            "outputs": [
                {
                    "id": "#GATK_PrintReads.recalibrated_bam"
                }
            ],
            "sbg:y": 1097.8573979082655,
            "id": "#GATK_PrintReads",
            "sbg:x": 1604.762352443893,
            "inputs": [
                {
                    "id": "#GATK_PrintReads.validation_strictness"
                },
                {
                    "id": "#GATK_PrintReads.use_original_qualities"
                },
                {
                    "id": "#GATK_PrintReads.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_PrintReads.unsafe"
                },
                {
                    "id": "#GATK_PrintReads.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_PrintReads.tag"
                },
                {
                    "id": "#GATK_PrintReads.simplify"
                },
                {
                    "id": "#GATK_PrintReads.sample_name"
                },
                {
                    "id": "#GATK_PrintReads.sample_file"
                },
                {
                    "id": "#GATK_PrintReads.remove_program_records"
                },
                {
                    "id": "#GATK_PrintReads.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.reads",
                    "source": [
                        "#GATK_IndelRealigner.realigned_bam_file"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.read_group_black_list"
                },
                {
                    "id": "#GATK_PrintReads.read_group"
                },
                {
                    "id": "#GATK_PrintReads.read_filter"
                },
                {
                    "id": "#GATK_PrintReads.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_PrintReads.platform"
                },
                {
                    "id": "#GATK_PrintReads.phone_home"
                },
                {
                    "id": "#GATK_PrintReads.pedigree_validation_type"
                },
                {
                    "id": "#GATK_PrintReads.pedigree_string"
                },
                {
                    "id": "#GATK_PrintReads.number"
                },
                {
                    "id": "#GATK_PrintReads.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_PrintReads.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_PrintReads.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_PrintReads.max_runtime_units"
                },
                {
                    "id": "#GATK_PrintReads.max_runtime"
                },
                {
                    "id": "#GATK_PrintReads.keep_program_records"
                },
                {
                    "id": "#GATK_PrintReads.intervals_file",
                    "source": [
                        "#Target_BED"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.intervals"
                },
                {
                    "id": "#GATK_PrintReads.interval_set_rule"
                },
                {
                    "id": "#GATK_PrintReads.interval_padding"
                },
                {
                    "id": "#GATK_PrintReads.interval_merging"
                },
                {
                    "id": "#GATK_PrintReads.gatk_key"
                },
                {
                    "id": "#GATK_PrintReads.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_PrintReads.exclude_intervals"
                },
                {
                    "id": "#GATK_PrintReads.emit_original_quals"
                },
                {
                    "id": "#GATK_PrintReads.downsampling_type"
                },
                {
                    "id": "#GATK_PrintReads.downsample_to_fraction"
                },
                {
                    "id": "#GATK_PrintReads.downsample_to_coverage"
                },
                {
                    "id": "#GATK_PrintReads.disable_radnomization"
                },
                {
                    "id": "#GATK_PrintReads.disable_indel_quals"
                },
                {
                    "id": "#GATK_PrintReads.default_base_qualities"
                },
                {
                    "id": "#GATK_PrintReads.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_PrintReads.bqsr",
                    "source": [
                        "#GATK_BaseRecalibrator.bqsr"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_PrintReads.baq"
                },
                {
                    "id": "#GATK_PrintReads.allow_potentailly_misencoded_quals"
                }
            ],
            "run": {
                "y": 1097.8573979082655,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadgsa/gatk-protected",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
                        "label": "Publication"
                    },
                    {
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_readutils_PrintReads.php",
                        "label": "Documentation"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BAM, SAM",
                        "description": "Write output to this BAM filename.",
                        "label": "Recalibrated BAM",
                        "id": "#recalibrated_bam",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "glob": "*.bam",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "sbg:metadata": {}
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "GATK",
                "label": "GATK PrintReads",
                "x": 1604.762352443893,
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "stdout": "",
                "sbg:license": "MIT License",
                "sbg:revision": 8,
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "description": "Overview\n\nPrintReads is a generic utility tool for manipulating sequencing data in SAM/BAM format. It can dynamically merge the contents of multiple input BAM files, resulting in merged output sorted in coordinate order. It can also optionally filter reads based on various read properties such as read group tags using the `--read_filter/-rf` command line argument (see documentation on read filters for more information).\n\nNote that when PrintReads is used as part of the Base Quality Score Recalibration workflow, it takes the `--BQSR` engine argument, which is listed under Inherited Arguments > CommandLineGATK below.\n\nInput\nOne or more bam files.\n\nOutput\nA single processed bam file.\n\nUsage examples:\n\n // Prints all reads that have a mapping quality above zero\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input1.bam \\\n   -I input2.bam \\\n   -o output.bam \\\n   --read_filter MappingQualityZero\n\n // Prints the first 2000 reads in the BAM file\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -n 2000\n\n // Downsamples BAM file to 25%\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -dfrac 0.25\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "class": "CommandLineTool",
                "sbg:latestRevision": 8,
                "sbg:id": "sevenbridges/public-apps/gatk-2-3-9-lite-printreads/10",
                "baseCommand": [
                    "java",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "PrintReads",
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(4)\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "sbg:modifiedOn": 1461861365,
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "read_filter": [
                            "MappingQualityZero"
                        ],
                        "reads": [
                            {
                                "path": "/folder/input1.bam"
                            },
                            {
                                "path": "/folder/input2.bam"
                            }
                        ],
                        "memory_overhead_per_job": 0,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911393,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911394,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911395,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1450911396,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1450911397,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1450911398,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1450911399,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1461854096,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 7
                    },
                    {
                        "sbg:modifiedOn": 1461861365,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 8
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-printreads/8",
                "sbg:modifiedBy": "bix-demo",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.bam'\n  }\n  else{\n  \treturn read_namebase + '.bam'\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": ";",
                        "separate": true,
                        "position": 10000,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  if($job.inputs.bqsr){\n\treturn 'mv ' + read_namebase + '.base_recalibrated.bai '+ read_namebase + '.base_recalibrated.bam.bai'\n  }\n  else{\n  \treturn 'mv ' + read_namebase + '.bai '+read_namebase+'.bam.bai'\n  }\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "How strict should we be with validation.",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Validation Strictness",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "type": "enum",
                                "name": "validation_strictness"
                            }
                        ],
                        "sbg:toolDefaultValue": "SILENT"
                    },
                    {
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Original Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Use Legacy Downsampler",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Unsafe",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "type": "enum",
                                "name": "unsafe"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "label": "Threads per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Tag",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Simplify all reads.",
                        "inputBinding": {
                            "prefix": "--simplify",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Simplify",
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-s",
                        "id": "#simplify",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Sample name to be included in the analysis. Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--sample_name",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Sample Name",
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-sn",
                        "id": "#sample_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "File containing a list of samples (one per line). Can be specified multiple times.",
                        "inputBinding": {
                            "prefix": "--sample_file",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Sample File",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-sf",
                        "id": "#sample_file",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Remove Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "Reference Genome in FASTA format.",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Reference Genome",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-R",
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "required": true
                    },
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "description": "Read sequences in BAM format.",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read sequences",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-I",
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    },
                    {
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group Black List",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Exclude all reads with this read group from the output.",
                        "inputBinding": {
                            "prefix": "--readGroup",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Group",
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-readGroup",
                        "id": "#read_group",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Read Filter",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "type": "enum",
                                    "name": "read_filter"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Preserve Qscores Less Than",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "6"
                    },
                    {
                        "description": "Exclude all reads with this platform from the output.",
                        "inputBinding": {
                            "prefix": "--platform",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Platform",
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-platform",
                        "id": "#platform",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Phone Home",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "type": "enum",
                                "name": "phone_home"
                            }
                        ],
                        "sbg:toolDefaultValue": "STANDARD"
                    },
                    {
                        "description": "How strict should we be in validating the pedigree information?.",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree Validation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "type": "enum",
                                "name": "pedigree_validation_type"
                            }
                        ],
                        "sbg:toolDefaultValue": "STRICT"
                    },
                    {
                        "description": "Pedigree string for samples.",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Pedigree String",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[]"
                    },
                    {
                        "description": "Print the first n reads from the file, discarding the rest.",
                        "inputBinding": {
                            "prefix": "--number",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Number",
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-n",
                        "id": "#number",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Non Deterministic Random Seed",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "label": "Memory per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "label": "Memory overhead per job",
                        "sbg:category": "Execution",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "The TimeUnit for maxRuntime.",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime Units",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "type": "enum",
                                "name": "max_runtime_units"
                            }
                        ],
                        "sbg:toolDefaultValue": "MINUTES"
                    },
                    {
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Max Runtime",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Keep Program Records",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "One or more genomic intervals over which to operate.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Intervals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Set Rule",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "type": "enum",
                                "name": "interval_set_rule"
                            }
                        ],
                        "sbg:toolDefaultValue": "UNION"
                    },
                    {
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Padding",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Interval Merging",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "type": "enum",
                                "name": "interval_merging"
                            }
                        ],
                        "sbg:toolDefaultValue": "ALL"
                    },
                    {
                        "sbg:fileTypes": "KEY, LICENSE",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Gatk key",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-K",
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "Fix mis-encoded base quality scores.",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Fix Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Exclude Intervals",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": "-XL",
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Emit Original Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsampling Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "type": "enum",
                                "name": "downsampling_type"
                            }
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Fraction",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Downsample to Coverage",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": ""
                    },
                    {
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Randomization",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Disable Indel Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Default Base Qualities",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "-1"
                    },
                    {
                        "description": "Number of CPUs per job.",
                        "label": "CPU per job",
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "sbg:fileTypes": "GRP",
                        "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
                        "inputBinding": {
                            "prefix": "--BQSR",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BQSR Table",
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#bqsr",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": false
                    },
                    {
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Gap Open Penalty",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "40.0"
                    },
                    {
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "BAQ Calculation Type",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "type": "enum",
                                "name": "baq"
                            }
                        ],
                        "sbg:toolDefaultValue": "OFF"
                    },
                    {
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "label": "Allow Potentially Misencoded Quals",
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    }
                ],
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type PrintReads -nct 4 --reference_sequence /folder/reference.fasta --input_file /folder/input1.bam --input_file /folder/input2.bam --out input1.bam ; mv input1.bai input1.bam.bai",
                "sbg:createdOn": 1450911393
            }
        },
        {
            "outputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                }
            ],
            "sbg:y": 672.5000000000001,
            "id": "#SBG_Pair_FASTQs_by_Metadata",
            "sbg:x": 267.50000000000017,
            "inputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.fastq_list",
                    "source": [
                        "#SBG_FASTQ_Quality_Converter.result"
                    ]
                }
            ],
            "run": {
                "y": 672.5000000000001,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "https://cgc.sbgenomics.com/u/stefanristeski/group-fastqs/apps/#sbg-pair-fastqs-by-metadata/9",
                        "label": "Homepage"
                    }
                ],
                "requirements": [],
                "outputs": [
                    {
                        "id": "#tuple_list",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "SBGTools",
                "label": "SBG Pair FASTQs by Metadata",
                "x": 267.50000000000017,
                "sbg:categories": [
                    "Converters",
                    "Other"
                ],
                "stdout": "",
                "sbg:createdOn": 1450911289,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 3,
                "description": "Tool accepts list of FASTQ files for one sample as the input and groups them into pairs  (two files for each paired end). This grouping is done using metadata values that are creating unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining one FASTQ pair are Sample ID, Library ID, Platform unit ID and File segment number. Listed order of metadata fields is also representing their hierarchy in the metadata structure. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files.",
                "sbg:license": "Apache License 2.0",
                "class": "CommandLineTool",
                "sbg:latestRevision": 3,
                "sbg:id": "sevenbridges/public-apps/sbg-pair-fastqs-by-metadata/4",
                "baseCommand": [
                    "python",
                    "/opt/sbg_pair_fastqs_by_metadata.py"
                ],
                "sbg:modifiedOn": 1463403276,
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1024,
                        "cpu": 1
                    },
                    "inputs": {
                        "fastq_list": [
                            {
                                "path": "/asda/dsa/sda/sda/fasta1.fastq",
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": []
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta2.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta3.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta4.fastq"
                            }
                        ]
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911289,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1450911290,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1450911290,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1463403276,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 3
                    }
                ],
                "sbg:contributors": [
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/sbgtools-demo/sbg-pair-fastqs-by-metadata/3",
                "sbg:modifiedBy": "bix-demo",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "prefix": "--in_metafile",
                        "separate": true,
                        "position": 1,
                        "valueFrom": "job.json"
                    },
                    {
                        "prefix": "--out_metafile",
                        "separate": true,
                        "position": 2,
                        "valueFrom": "cwl.output.json"
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "d41a0837ab81",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-pair-fastqs-by-metadata:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1024,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
                        "description": "List of the FASTQ files with properly set metadata fileds.",
                        "inputBinding": {
                            "prefix": "--fastq_list",
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "position": 0
                        },
                        "label": "List of FASTQ files",
                        "sbg:category": "",
                        "id": "#fastq_list",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "required": true
                    }
                ],
                "sbg:cmdPreview": "python /opt/sbg_pair_fastqs_by_metadata.py --fastq_list /asda/dsa/sda/sda/fasta1.fastq,/asda/dsa/sda/sda/fasta2.fastq,/asda/dsa/sda/sda/fasta3.fastq,/asda/dsa/sda/sda/fasta4.fastq --in_metafile job.json --out_metafile cwl.output.json",
                "sbg:toolAuthor": "Djordje Klisic, Seven Bridges Genomics, <djordje.klisic@sbgenomics.com>"
            }
        },
        {
            "outputs": [
                {
                    "id": "#BWA_INDEX.indexed_reference"
                }
            ],
            "sbg:y": 590.2381416124024,
            "id": "#BWA_INDEX",
            "sbg:x": 446.428596500367,
            "inputs": [
                {
                    "id": "#BWA_INDEX.total_memory"
                },
                {
                    "id": "#BWA_INDEX.reference",
                    "source": [
                        "#input_tar_with_reference"
                    ]
                },
                {
                    "id": "#BWA_INDEX.prefix_of_the_index_to_be_output"
                },
                {
                    "id": "#BWA_INDEX.bwt_construction"
                },
                {
                    "id": "#BWA_INDEX.block_size"
                },
                {
                    "id": "#BWA_INDEX.add_64_to_fasta_name"
                }
            ],
            "run": {
                "y": 590.2381416124024,
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "http://bio-bwa.sourceforge.net/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/lh3/bwa",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/bio-bwa/",
                        "label": "Download"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
                        "label": "Publication"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "FASTA, FA",
                        "description": "TARed fasta with its BWA indices.",
                        "label": "TARed fasta with its BWA indices",
                        "fileTypes": "TAR",
                        "id": "#indexed_reference",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reference",
                            "glob": {
                                "engine": "#cwl-js-engine",
                                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                                "class": "Expression"
                            }
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "BWA",
                "label": "BWA INDEX",
                "x": 446.428596500367,
                "sbg:categories": [
                    "Indexing",
                    "FASTA-Processing"
                ],
                "stdout": "",
                "sbg:license": "GNU Affero General Public License v3.0, MIT License",
                "sbg:revision": 14,
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Heng Li",
                "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
                "class": "CommandLineTool",
                "sbg:latestRevision": 14,
                "sbg:id": "sevenbridges/public-apps/bwa-index/26",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "sbg:modifiedOn": 1466077580,
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1536,
                        "cpu": 1
                    },
                    "inputs": {
                        "bwt_construction": "bwtsw",
                        "block_size": 0,
                        "prefix_of_the_index_to_be_output": "prefix",
                        "reference": {
                            "path": "/path/to/the/reference.fasta",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ]
                        },
                        "add_64_to_fasta_name": true,
                        "total_memory": null
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1458658817,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1458658836,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1458745340,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1460643813,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1462801955,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1465227109,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1465231882,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1465990497,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 7
                    },
                    {
                        "sbg:modifiedOn": 1465992672,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 8
                    },
                    {
                        "sbg:modifiedOn": 1465993183,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 9
                    },
                    {
                        "sbg:modifiedOn": 1465994793,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 10
                    },
                    {
                        "sbg:modifiedOn": 1466070064,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11
                    },
                    {
                        "sbg:modifiedOn": 1466071727,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 12
                    },
                    {
                        "sbg:modifiedOn": 1466072504,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 13
                    },
                    {
                        "sbg:modifiedOn": 1466077580,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 14
                    }
                ],
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:validationErrors": [],
                "id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-index/14",
                "sbg:modifiedBy": "vladimirk",
                "sbg:toolkitVersion": "0.7.13",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "2f813371e803",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
                        "id": "#total_memory",
                        "sbg:category": "Configuration",
                        "label": "Total memory [Gb]",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
                        "description": "Input reference fasta of TAR file with reference and indices.",
                        "sbg:stageInput": "link",
                        "required": true,
                        "label": "Reference",
                        "sbg:category": "File input",
                        "id": "#reference",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "Prefix of the index [same as fasta name].",
                        "id": "#prefix_of_the_index_to_be_output",
                        "sbg:category": "Configuration",
                        "label": "Prefix of the index to be output",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
                        "inputBinding": {
                            "prefix": "-a",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Bwt construction",
                        "sbg:category": "Configuration",
                        "id": "#bwt_construction",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "bwtsw",
                                    "is",
                                    "div"
                                ],
                                "type": "enum",
                                "name": "bwt_construction"
                            }
                        ],
                        "sbg:toolDefaultValue": "auto"
                    },
                    {
                        "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
                        "label": "Block size",
                        "sbg:category": "Configuration",
                        "id": "#block_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "10000000"
                    },
                    {
                        "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
                        "id": "#add_64_to_fasta_name",
                        "sbg:category": "Configuration",
                        "label": "Output index files renamed by adding 64",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
                "sbg:createdOn": 1458658817
            }
        },
        {
            "outputs": [
                {
                    "id": "#SBG_Untar_fasta.output_fasta"
                }
            ],
            "sbg:y": 1534.42726525044,
            "id": "#SBG_Untar_fasta",
            "sbg:x": 195.00006761816027,
            "inputs": [
                {
                    "id": "#SBG_Untar_fasta.input_tar_with_reference",
                    "source": [
                        "#input_tar_with_reference"
                    ]
                }
            ],
            "run": {
                "y": 1534.42726525044,
                "stdin": "",
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "successCodes": [],
                "label": "SBG Untar fasta",
                "x": 195.00006761816027,
                "sbg:categories": [
                    "Other"
                ],
                "stdout": "",
                "sbg:createdOn": 1466002722,
                "sbg:createdBy": "bix-demo",
                "sbg:revision": 7,
                "description": "SBG Untar fasta outputs FA/FASTA/FA.GZ/FASTA.GZ from TAR.",
                "class": "CommandLineTool",
                "outputs": [
                    {
                        "description": "Unpacked fasta file from the input archive.",
                        "id": "#output_fasta",
                        "label": "Unpacked fasta file",
                        "type": [
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_tar_with_reference",
                            "glob": "{*.fasta,*.fa,*.fa.gz,*.fasta.gz}"
                        }
                    }
                ],
                "sbg:latestRevision": 7,
                "sbg:id": "sevenbridges/public-apps/sbg-untar-fasta/6",
                "sbg:toolkit": "SBGTools",
                "sbg:modifiedOn": 1466077480,
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "input_tar_with_reference": {
                            "path": "input_file.fasta",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": []
                        }
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1466002722,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1466003214,
                        "sbg:modifiedBy": "bix-demo",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1466004710,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1466004986,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1466005081,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1466005599,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1466007588,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1466077480,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 7
                    }
                ],
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ],
                "sbg:validationErrors": [],
                "id": "bix-demo/sbgtools-demo/sbg-untar-fasta/7",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  reference_file = $job.inputs.input_tar_with_reference.path.split('/')[$job.inputs.input_tar_with_reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'tar -xf ' + reference_file    \n  }\n  else{\n    return 'echo Passing input file '\n  }\n}",
                        "class": "Expression"
                    }
                ],
                "sbg:toolkitVersion": "v1.0",
                "temporaryFailCodes": [],
                "sbg:homepage": "https://igor.sbgenomics.com/",
                "sbg:image_url": null,
                "arguments": [],
                "sbg:modifiedBy": "vladimirk",
                "hints": [
                    {
                        "dockerImageId": "58b79c627f95",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/markop/sbg-decompressor:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
                        "description": "The input archive file to be unpacked.",
                        "sbg:stageInput": "link",
                        "required": true,
                        "label": "Input archive file with fasta",
                        "id": "#input_tar_with_reference",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:cmdPreview": "echo Passing input file",
                "sbg:toolAuthor": "Vladimir Kovacevic, Seven Bridges Genomics"
            }
        },
        {
            "outputs": [
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.bam_index"
                }
            ],
            "scatter": "#BWA_MEM_Bundle_0_7_13.input_reads",
            "sbg:y": 641.6666918993,
            "id": "#BWA_MEM_Bundle_0_7_13",
            "sbg:x": 598.3333773877897,
            "inputs": [
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.reference",
                    "source": [
                        "#BWA_INDEX.indexed_reference"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.input_reads",
                    "source": [
                        "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.threads",
                    "default": 8
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.minimum_seed_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.dropoff"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.select_seeds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.seed_occurrence_for_the_3rd_round"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_seeds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.drop_chains_fraction"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.discard_chain_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mate_rescue_rounds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_mate_rescue"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_pairing"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.discard_exact_matches"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.score_for_a_sequence_match"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mismatch_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.smart_pairing_in_input_fastq"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.read_group_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.insert_string_to_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.ignore_alt_file"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.verbose_level"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.minimum_output_score"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_alignments"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.append_comment"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.use_soft_clipping"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mark_shorter",
                    "default": true
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.gap_open_penalties"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.gap_extension_penalties"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.clipping_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.unpaired_read_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.read_type"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_in_xa"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.speficy_distribution_parameters"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.band_width"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_platform"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_sample_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_library_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_platform_unit_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_data_submitting_center"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_median_fragment_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_format",
                    "default": "SortedBAM"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.sambamba_threads"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.sort_memory",
                    "default": 2
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.deduplication",
                    "default": "MarkDuplicates"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.total_memory",
                    "default": 15
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.filter_out_secondary_alignments",
                    "default": true
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_name"
                }
            ],
            "run": {
                "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
                "stdin": "",
                "sbg:links": [
                    {
                        "id": "http://bio-bwa.sourceforge.net/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/lh3/bwa",
                        "label": "Source code"
                    },
                    {
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
                        "label": "Wiki"
                    },
                    {
                        "id": "http://sourceforge.net/projects/bio-bwa/",
                        "label": "Download"
                    },
                    {
                        "id": "http://arxiv.org/abs/1303.3997",
                        "label": "Publication"
                    },
                    {
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
                        "label": "Publication BWA Algorithm"
                    }
                ],
                "requirements": [
                    {
                        "id": "#cwl-js-engine",
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ]
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "description": "Aligned reads.",
                        "label": "Aligned SAM/BAM",
                        "fileTypes": "SAM,BAM",
                        "id": "#aligned_reads",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_reads",
                            "glob": "{*.sam,*.bam}",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ]
                        }
                    },
                    {
                        "sbg:fileTypes": "BAI",
                        "description": "Bam index produced by BWA MEM Bundle, if SortedBAM output format is chosen.",
                        "label": "Bam index",
                        "fileTypes": "BAI",
                        "id": "#bam_index",
                        "type": [
                            "null",
                            "File"
                        ],
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_reads",
                            "glob": "*.bai"
                        }
                    }
                ],
                "successCodes": [],
                "sbg:toolkit": "BWA",
                "label": "BWA-MEM Bundle 0.7.13",
                "sbg:categories": [
                    "Alignment",
                    "FASTQ-Processing"
                ],
                "stdout": "",
                "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
                "sbg:revision": 15,
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Heng Li",
                "class": "CommandLineTool",
                "sbg:latestRevision": 15,
                "sbg:id": "sevenbridges/public-apps/bwa-mem-bundle-0-7-13/15",
                "baseCommand": [
                    {
                        "engine": "#cwl-js-engine",
                        "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
                        "class": "Expression"
                    },
                    "/opt/bwa-0.7.13/bwa",
                    "mem"
                ],
                "sbg:modifiedOn": 1466161520,
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "sbg:sbgMaintained": false,
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 4096,
                        "cpu": 1
                    },
                    "inputs": {
                        "read_group_header": "",
                        "total_memory": null,
                        "sambamba_threads": null,
                        "reference": {
                            "path": "/path/to/reference.fasta.tar",
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ]
                        },
                        "input_reads": [
                            {
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz",
                                "size": 30000000000,
                                "class": "File",
                                "secondaryFiles": [],
                                "metadata": {
                                    "sample_id": "dnk_sample",
                                    "paired_end": "2"
                                }
                            },
                            {
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
                            }
                        ],
                        "rg_platform_unit_id": "",
                        "sort_memory": 0,
                        "output_format": "BAM",
                        "skip_seeds": null,
                        "rg_platform": "Illumina",
                        "band_width": null,
                        "deduplication": "MarkDuplicates",
                        "rg_sample_id": "",
                        "rg_data_submitting_center": "",
                        "rg_library_id": "",
                        "filter_out_secondary_alignments": false,
                        "rg_median_fragment_length": "",
                        "threads": null,
                        "output_name": ""
                    }
                },
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1458653351,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 0
                    },
                    {
                        "sbg:modifiedOn": 1458653365,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 1
                    },
                    {
                        "sbg:modifiedOn": 1458653397,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 2
                    },
                    {
                        "sbg:modifiedOn": 1458653457,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 3
                    },
                    {
                        "sbg:modifiedOn": 1458735076,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 4
                    },
                    {
                        "sbg:modifiedOn": 1458744323,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 5
                    },
                    {
                        "sbg:modifiedOn": 1460644019,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 6
                    },
                    {
                        "sbg:modifiedOn": 1461676796,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 7
                    },
                    {
                        "sbg:modifiedOn": 1461677982,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 8
                    },
                    {
                        "sbg:modifiedOn": 1461691955,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 9
                    },
                    {
                        "sbg:modifiedOn": 1462799414,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 10
                    },
                    {
                        "sbg:modifiedOn": 1462800334,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 11
                    },
                    {
                        "sbg:modifiedOn": 1465226602,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 12
                    },
                    {
                        "sbg:modifiedOn": 1465997760,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 13
                    },
                    {
                        "sbg:modifiedOn": 1465999303,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 14
                    },
                    {
                        "sbg:modifiedOn": 1466161520,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:revision": 15
                    }
                ],
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:validationErrors": [],
                "id": "https://api.sbgenomics.com/v2/apps/vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-mem-bundle-0-7-13/15/raw/",
                "sbg:modifiedBy": "vladimirk",
                "sbg:toolkitVersion": "0.7.13",
                "temporaryFailCodes": [],
                "sbg:image_url": null,
                "arguments": [
                    {
                        "prefix": "",
                        "separate": false,
                        "position": 111,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i])\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0].constructor == Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else{\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SortedBAM'){\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n  else { // SAM\n    return \"> \" + name + \".sam\"\n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": false,
                        "position": 112,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i])\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0].constructor == Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else{\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n  \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n  \n  //if(!$job.inputs.deduplication){ blaster_memory = 0 }\n  //else { blaster_memory = (reads_size/(1024*1024*1024))*150/1000 }\n\n  //if((total_memory - blaster_memory) > 24){ bwa_memory = 22 }\n  //else{ bwa_memory = 10 } Removed because sorter gets 37Gb and BWA MEM fails!\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  if ($job.inputs.output_format == 'SortedBAM'){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "position": 110,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n    return \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout\"\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    return \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout\"\n  }\n  else{\n   return \"\" \n  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "position": 1,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  if($job.inputs.input_reads[0].constructor == Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else{\n    input_1 = $job.inputs.input_reads[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  add_param('ID', '1')\n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n  \tadd_param('PL', read_metadata.platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "position": 101,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n  if($job.inputs.input_reads[0].constructor == Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else{\n    input_reads = $job.inputs.input_reads\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "-t",
                        "separate": true,
                        "position": 2,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  \n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "position": 10,
                        "valueFrom": {
                            "engine": "#cwl-js-engine",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  return name\n  \n}",
                            "class": "Expression"
                        }
                    }
                ],
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n\n  if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "engine": "#cwl-js-engine",
                            "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "inputs": [
                    {
                        "sbg:fileTypes": "TAR",
                        "description": "Reference fasta file with BWA index files.",
                        "sbg:stageInput": "link",
                        "label": "Reference file",
                        "sbg:category": "Input files",
                        "id": "#reference",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
                        "description": "Input sequence reads.",
                        "label": "Input reads",
                        "sbg:category": "Input files",
                        "id": "#input_reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array",
                                "name": "input_reads"
                            }
                        ]
                    },
                    {
                        "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
                        "label": "Threads",
                        "sbg:category": "Execution",
                        "id": "#threads",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "8"
                    },
                    {
                        "description": "Minimum seed length for BWA MEM.",
                        "inputBinding": {
                            "prefix": "-k",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum seed length",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#minimum_seed_length",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "19"
                    },
                    {
                        "description": "Off-diagonal X-dropoff.",
                        "inputBinding": {
                            "prefix": "-d",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Dropoff",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#dropoff",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "100"
                    },
                    {
                        "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
                        "inputBinding": {
                            "prefix": "-r",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Select seeds",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#select_seeds",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "1.5"
                    },
                    {
                        "description": "Seed occurrence for the 3rd round seeding.",
                        "inputBinding": {
                            "prefix": "-y",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Seed occurrence for the 3rd round",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#seed_occurrence_for_the_3rd_round",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "20"
                    },
                    {
                        "description": "Skip seeds with more than INT occurrences.",
                        "inputBinding": {
                            "prefix": "-c",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip seeds with more than INT occurrences",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#skip_seeds",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "500"
                    },
                    {
                        "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
                        "inputBinding": {
                            "prefix": "-D",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Drop chains fraction",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#drop_chains_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:toolDefaultValue": "0.50"
                    },
                    {
                        "description": "Discard a chain if seeded bases shorter than INT.",
                        "inputBinding": {
                            "prefix": "-W",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Discard chain length",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#discard_chain_length",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "0"
                    },
                    {
                        "description": "Perform at most INT rounds of mate rescues for each read.",
                        "inputBinding": {
                            "prefix": "-m",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mate rescue rounds",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#mate_rescue_rounds",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "50"
                    },
                    {
                        "description": "Skip mate rescue.",
                        "inputBinding": {
                            "prefix": "-S",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip mate rescue",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#skip_mate_rescue",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Skip pairing; mate rescue performed unless -S also in use.",
                        "inputBinding": {
                            "prefix": "-P",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Skip pairing",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#skip_pairing",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Discard full-length exact matches.",
                        "inputBinding": {
                            "prefix": "-e",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Discard exact matches",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#discard_exact_matches",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
                        "inputBinding": {
                            "prefix": "-A",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Score for a sequence match",
                        "sbg:category": "BWA Scoring options",
                        "id": "#score_for_a_sequence_match",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "1"
                    },
                    {
                        "description": "Penalty for a mismatch.",
                        "inputBinding": {
                            "prefix": "-B",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mismatch penalty",
                        "sbg:category": "BWA Scoring options",
                        "id": "#mismatch_penalty",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "4"
                    },
                    {
                        "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
                        "inputBinding": {
                            "prefix": "-p",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Smart pairing in input FASTQ file",
                        "sbg:category": "BWA Input/output options",
                        "id": "#smart_pairing_in_input_fastq",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
                        "label": "Read group header",
                        "sbg:category": "BWA Read Group Options",
                        "id": "#read_group_header",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata."
                    },
                    {
                        "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
                        "inputBinding": {
                            "prefix": "-H",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Insert string to output SAM or BAM header",
                        "sbg:category": "BWA Input/output options",
                        "id": "#insert_string_to_header",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
                        "inputBinding": {
                            "prefix": "-j",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Ignore ALT file",
                        "sbg:category": "BWA Input/output options",
                        "id": "#ignore_alt_file",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
                        "inputBinding": {
                            "prefix": "-v",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Verbose level",
                        "sbg:category": "BWA Input/output options",
                        "id": "#verbose_level",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "1",
                                    "2",
                                    "3",
                                    "4"
                                ],
                                "type": "enum",
                                "name": "verbose_level"
                            }
                        ],
                        "sbg:toolDefaultValue": "3"
                    },
                    {
                        "description": "Minimum alignment score for a read to be output in SAM/BAM.",
                        "inputBinding": {
                            "prefix": "-T",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Minimum alignment score for a read to be output in SAM/BAM",
                        "sbg:category": "BWA Input/output options",
                        "id": "#minimum_output_score",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "30"
                    },
                    {
                        "description": "Output all alignments for SE or unpaired PE.",
                        "inputBinding": {
                            "prefix": "-a",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output alignments",
                        "sbg:category": "BWA Input/output options",
                        "id": "#output_alignments",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Append FASTA/FASTQ comment to SAM output.",
                        "inputBinding": {
                            "prefix": "-C",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Append comment",
                        "sbg:category": "BWA Input/output options",
                        "id": "#append_comment",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Output the reference FASTA header in the XR tag.",
                        "inputBinding": {
                            "prefix": "-V",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Output header",
                        "sbg:category": "BWA Input/output options",
                        "id": "#output_header",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Use soft clipping for supplementary alignments.",
                        "inputBinding": {
                            "prefix": "-Y",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Use soft clipping",
                        "sbg:category": "BWA Input/output options",
                        "id": "#use_soft_clipping",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Mark shorter split hits as secondary.",
                        "inputBinding": {
                            "prefix": "-M",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Mark shorter",
                        "sbg:category": "BWA Input/output options",
                        "id": "#mark_shorter",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
                        "inputBinding": {
                            "prefix": "-O",
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "label": "Gap open penalties",
                        "sbg:category": "BWA Scoring options",
                        "id": "#gap_open_penalties",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[6,6]"
                    },
                    {
                        "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
                        "inputBinding": {
                            "prefix": "-E",
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "label": "Gap extension",
                        "sbg:category": "BWA Scoring options",
                        "id": "#gap_extension_penalties",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[1,1]"
                    },
                    {
                        "description": "Penalty for 5'- and 3'-end clipping.",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "label": "Clipping penalty",
                        "sbg:category": "BWA Scoring options",
                        "id": "#clipping_penalty",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[5,5]"
                    },
                    {
                        "description": "Penalty for an unpaired read pair.",
                        "inputBinding": {
                            "prefix": "-U",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Unpaired read penalty",
                        "sbg:category": "BWA Scoring options",
                        "id": "#unpaired_read_penalty",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "17"
                    },
                    {
                        "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
                        "inputBinding": {
                            "prefix": "-x",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Sequencing technology-specific settings",
                        "sbg:category": "BWA Scoring options",
                        "id": "#read_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "pacbio",
                                    "ont2d",
                                    "intractg"
                                ],
                                "type": "enum",
                                "name": "read_type"
                            }
                        ]
                    },
                    {
                        "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
                        "inputBinding": {
                            "prefix": "-h",
                            "itemSeparator": ",",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "label": "Output in XA",
                        "sbg:category": "BWA Input/output options",
                        "id": "#output_in_xa",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ],
                        "sbg:toolDefaultValue": "[5, 200]"
                    },
                    {
                        "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
                        "inputBinding": {
                            "prefix": "-I",
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "label": "Specify distribution parameters",
                        "sbg:category": "BWA Input/output options",
                        "id": "#speficy_distribution_parameters",
                        "type": [
                            "null",
                            {
                                "items": "float",
                                "type": "array",
                                "name": "speficy_distribution_parameters"
                            }
                        ]
                    },
                    {
                        "description": "Band width for banded alignment.",
                        "inputBinding": {
                            "prefix": "-w",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "label": "Band width",
                        "sbg:category": "BWA Algorithm options",
                        "id": "#band_width",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "100"
                    },
                    {
                        "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
                        "label": "Platform",
                        "sbg:category": "BWA Read Group Options",
                        "id": "#rg_platform",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "454",
                                    "Helicos",
                                    "Illumina",
                                    "Solid",
                                    "IonTorrent"
                                ],
                                "type": "enum",
                                "name": "rg_platform"
                            }
                        ],
                        "sbg:toolDefaultValue": "Inferred from metadata"
                    },
                    {
                        "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
                        "label": "Sample ID",
                        "sbg:category": "BWA Read Group Options",
                        "id": "#rg_sample_id",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "Inferred from metadata"
                    },
                    {
                        "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
                        "label": "Library ID",
                        "sbg:category": "BWA Read Group Options",
                        "id": "#rg_library_id",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "Inferred from metadata"
                    },
                    {
                        "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
                        "label": "Platform unit ID",
                        "sbg:category": "BWA Read Group Options",
                        "id": "#rg_platform_unit_id",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:toolDefaultValue": "Inferred from metadata"
                    },
                    {
                        "description": "Specify the data submitting center for RG line.",
                        "id": "#rg_data_submitting_center",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Data submitting center",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "description": "Specify the median fragment length for RG line.",
                        "id": "#rg_median_fragment_length",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Median fragment length",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
                        "label": "Output format",
                        "sbg:category": "Execution",
                        "id": "#output_format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SAM",
                                    "BAM",
                                    "SortedBAM"
                                ],
                                "type": "enum",
                                "name": "output_format"
                            }
                        ],
                        "sbg:toolDefaultValue": "SortedBAM"
                    },
                    {
                        "description": "Number of threads to pass to Sambamba sort, if used.",
                        "id": "#sambamba_threads",
                        "sbg:category": "Execution",
                        "label": "Sambamba Sort threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
                        "id": "#sort_memory",
                        "sbg:category": "Execution",
                        "label": "Memory for BAM sorting",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Use Samblaster for finding duplicates on sequence reads.",
                        "label": "PCR duplicate detection",
                        "sbg:category": "Samblaster parameters",
                        "id": "#deduplication",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "None",
                                    "MarkDuplicates",
                                    "RemoveDuplicates"
                                ],
                                "type": "enum",
                                "name": "deduplication"
                            }
                        ],
                        "sbg:toolDefaultValue": "MarkDuplicates"
                    },
                    {
                        "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
                        "sbg:stageInput": null,
                        "label": "Total memory",
                        "sbg:category": "Execution",
                        "id": "#total_memory",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "15"
                    },
                    {
                        "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
                        "sbg:stageInput": null,
                        "label": "Filter out secondary alignments",
                        "sbg:category": "Execution",
                        "id": "#filter_out_secondary_alignments",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:toolDefaultValue": "False"
                    },
                    {
                        "description": "Name of the output BAM file.",
                        "id": "#output_name",
                        "sbg:category": "Configuration",
                        "label": "Output SAM/BAM file name",
                        "type": [
                            "null",
                            "string"
                        ]
                    }
                ],
                "sbg:cmdPreview": "tar -xf reference.fasta.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:1\\tPL:Illumina\\tSM:dnk_sample' -t 1  reference.fasta  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout | /opt/sambamba_v0.6.0 view -t 8 -f bam -S /dev/stdin -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam",
                "sbg:createdOn": 1458653351
            }
        }
    ],
    "class": "Workflow",
    "sbg:canvas_x": 610,
    "sbg:id": "sevenbridges/public-apps/whole-exome-sequencing-gatk-2-3-9-lite/52",
    "sbg:toolkit": "SBGTools",
    "sbg:license": "Apache License 2.0",
    "sbg:project": "sevenbridges/public-apps",
    "sbg:sbgMaintained": false,
    "sbg:modifiedBy": "sevenbridges",
    "hints": [
        {
            "value": "c3.2xlarge",
            "class": "sbg:AWSInstanceType"
        },
        {
            "value": "n1-standard-8",
            "class": "sbg:GoogleInstanceType"
        }
    ],
    "sbg:validationErrors": [],
    "id": "https://api.sbgenomics.com/v2/apps/sevenbridges/public-apps/whole-exome-sequencing-gatk-2-3-9-lite/52/raw/",
    "sbg:canvas_zoom": 0.5999999999999996,
    "sbg:toolkitVersion": "1",
    "sbg:image_url": "https://brood.sbgenomics.com/static/sevenbridges/public-apps/whole-exome-sequencing-gatk-2-3-9-lite/52.png",
    "sbg:latestRevision": 52,
    "sbg:contributors": [
        "sevenbridges"
    ],
    "sbg:canvas_y": -310,
    "sbg:toolAuthor": "Seven Bridges",
    "inputs": [
        {
            "label": "Known Indels",
            "sbg:y": 938.3340420723234,
            "sbg:x": 276.4287550222375,
            "sbg:includeInPorts": true,
            "id": "#Known_Indels",
            "type": [
                "null",
                {
                    "items": "File",
                    "type": "array"
                }
            ]
        },
        {
            "label": "Target BED",
            "sbg:y": 1106.667849832157,
            "sbg:x": 271.4287853411347,
            "sbg:includeInPorts": true,
            "id": "#Target_BED",
            "type": [
                "null",
                "File"
            ]
        },
        {
            "label": "#FASTQ",
            "sbg:y": 670.7692536743431,
            "sbg:x": -446.1538372434792,
            "sbg:includeInPorts": true,
            "id": "#FASTQ",
            "type": [
                {
                    "items": "File",
                    "type": "array"
                }
            ]
        },
        {
            "label": "Known SNPs",
            "sbg:y": 670.0000891393577,
            "sbg:x": 1080.0002131754138,
            "sbg:includeInPorts": true,
            "id": "#Known_SNPs",
            "type": [
                "null",
                {
                    "items": "File",
                    "type": "array"
                }
            ]
        },
        {
            "label": "SnpEff Database",
            "sbg:y": 1032.3437101712632,
            "sbg:x": 3185.0000457101382,
            "sbg:includeInPorts": true,
            "id": "#SnpEff_Database",
            "type": [
                "File"
            ]
        },
        {
            "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
            "sbg:y": 1513.3285612927534,
            "id": "#input_tar_with_reference",
            "sbg:x": -441.66666592492055,
            "label": "Reference or TAR with BWA reference indices",
            "type": [
                "File"
            ]
        }
    ],
    "sbg:createdOn": 1453799556
}